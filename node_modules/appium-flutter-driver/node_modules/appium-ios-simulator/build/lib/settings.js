"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.read = read;
exports.readSettings = readSettings;
exports.setReduceMotion = setReduceMotion;
exports.stub = stub;
exports.update = update;
exports.updateLocale = updateLocale;
exports.updateLocationSettings = updateLocationSettings;
exports.updateSafariGlobalSettings = updateSafariGlobalSettings;
exports.updateSafariUserSettings = updateSafariUserSettings;
exports.updateSettings = updateSettings;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("./logger"));

var _semver = _interopRequireDefault(require("semver"));

var _bluebird = _interopRequireDefault(require("bluebird"));

async function plistPaths(sim, identifier) {
  let paths = [];
  let simDirectory = sim.getDir();

  switch (identifier) {
    case 'webInspector':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.webInspector.plist'));
      break;

    case 'mobileSafari':
      paths.push(_path.default.resolve(await sim.getAppDir('com.apple.mobilesafari'), 'Library', 'Preferences', 'com.apple.mobilesafari.plist'));
      break;

    case 'globalMobileSafari':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.mobilesafari.plist'));
      break;

    case 'webUI':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebUI.plist'));
      break;

    case 'webFoundation':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebFoundation.plist'));
      break;

    case 'preferences':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Preferences.plist'));
      break;

    case 'locationServices':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist'));
      break;

    case 'locationClients':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Caches', 'locationd', 'clients.plist'));
      break;

    case 'locationCache':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Caches', 'locationd', 'cache.plist'));
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist'));
      break;

    case 'userSettings':
      if (_semver.default.lt(_semver.default.coerce(sim.xcodeVersion.versionString), _semver.default.coerce('7.3'))) {
        paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'UserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
      } else {
        paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'UserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'EffectiveUserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
      }

      break;

    case 'effectiveUserSettings':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'));
      paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
      break;

    case 'accessibilitySettings':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Accessibility.plist'));
      break;

    case 'uiStyleSettings':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.uikitservices.userInterfaceStyleMode.plist'));
      break;
  }

  return paths;
}

async function updateSettings(sim, plist, updates) {
  return await _bluebird.default.reduce(await plistPaths(sim, plist), async function reducer(updated, path) {
    return (await update(path, updates)) || updated;
  }, false);
}

async function update(pathToPlist, updates) {
  const currentSettings = await read(pathToPlist);
  const newSettings = Object.assign({}, currentSettings, updates);

  if (_lodash.default.isEqual(currentSettings, newSettings)) {
    return false;
  }

  await _support.plist.updatePlistFile(pathToPlist, newSettings, true, false);
  return true;
}

async function readSettings(sim, plist) {
  let settings = {};

  for (let path of await plistPaths(sim, plist)) {
    settings[path] = await read(path);
  }

  return settings;
}

async function read(pathToPlist) {
  return await _support.plist.parsePlistFile(pathToPlist, false);
}

async function updateLocationSettings(sim, bundleId, authorized) {
  const newCachePrefs = {
    LastFenceActivityTimestamp: 412122103.232983,
    CleanShutdown: true
  };
  let updated = await updateSettings(sim, 'locationCache', {
    [bundleId]: newCachePrefs
  });
  const newClientPrefs = {
    BundleId: bundleId,
    Authorized: !!authorized,
    Whitelisted: false
  };

  for (const file of await plistPaths(sim, 'locationClients')) {
    _logger.default.debug(`Updating location client file: ${file}`);

    let updates = {};
    const plist = await read(file);
    const weirdLocKey = 'com.apple.locationd.bundle-/System/Library/' + 'PrivateFrameworks/AOSNotification.framework';

    if (!_lodash.default.has(plist, weirdLocKey)) {
      updates[weirdLocKey] = {
        BundlePath: '/System/Library/PrivateFrameworks/AOSNotification.framework',
        Whitelisted: false,
        Executable: '',
        Registered: ''
      };
    }

    const baseSetting = _lodash.default.has(plist, bundleId) ? plist[bundleId] : {};
    updates[bundleId] = _lodash.default.defaults(newClientPrefs, baseSetting);
    updates[bundleId].Executable = updates[bundleId].Executable || '';
    updates[bundleId].Registered = updates[bundleId].Registered || '';
    updated = (await update(file, updates)) || updated;
  }

  return updated;
}

async function setReduceMotion(sim, reduceMotion = true) {
  _logger.default.debug(`Updating reduce motion. Setting to ${reduceMotion}.`);

  const paths = await plistPaths(sim, 'accessibilitySettings');

  for (const file of paths) {
    await update(file, {
      ReduceMotionEnabled: reduceMotion ? 1 : 0
    });
  }
}

async function updateSafariGlobalSettings(sim, settingSet) {
  _logger.default.debug('Updating Safari global settings');

  let updated = false;

  for (const [file, safariSettingSet] of _lodash.default.toPairs(await readSettings(sim, 'globalMobileSafari'))) {
    let newSettings = {};

    for (const [key, value] of _lodash.default.toPairs(settingSet)) {
      if (safariSettingSet[key] !== value) {
        newSettings[key] = value;
      }
    }

    if (_lodash.default.isEmpty(newSettings)) {
      continue;
    }

    updated = (await update(file, newSettings)) || updated;
  }

  return updated;
}

async function updateSafariUserSettings(sim, settingSet) {
  _logger.default.debug('Updating Safari user settings');

  let newUserSettings = {};

  if (_lodash.default.has(settingSet, 'WebKitJavaScriptEnabled')) {
    newUserSettings.safariAllowJavaScript = settingSet.WebKitJavaScriptEnabled;
  }

  if (_lodash.default.has(settingSet, 'WebKitJavaScriptCanOpenWindowsAutomatically')) {
    newUserSettings.safariAllowPopups = settingSet.WebKitJavaScriptCanOpenWindowsAutomatically;
  }

  if (_lodash.default.has(settingSet, 'WarnAboutFraudulentWebsites')) {
    newUserSettings.safariForceFraudWarning = !settingSet.WarnAboutFraudulentWebsites;
  }

  if (_lodash.default.isEmpty(newUserSettings)) {
    return false;
  }

  let updated = false;

  for (const [file, userSettingSet] of _lodash.default.toPairs(await readSettings(sim, 'userSettings'))) {
    if (!_lodash.default.has(userSettingSet, 'restrictedBool')) {
      userSettingSet.restrictedBool = {};
    }

    for (let [key, value] of _lodash.default.toPairs(newUserSettings)) {
      userSettingSet.restrictedBool[key] = {
        value
      };
    }

    updated = (await update(file, userSettingSet)) || updated;
  }

  return updated;
}

async function updateLocale(sim, language, locale, calendarFormat) {
  let globalPrefs = _path.default.resolve(sim.getDir(), 'Library', 'Preferences', '.GlobalPreferences.plist');

  let data = await read(globalPrefs);
  let updates = {};

  if (language) {
    _logger.default.debug(`New language: ${language}`);

    let supportedLangs = data.AppleLanguages || [];

    if (supportedLangs.indexOf(language) !== 0) {
      updates.AppleLanguages = [language].concat(_lodash.default.without(supportedLangs, language));
    }
  }

  if (locale || calendarFormat) {
    let calSplit = '@calendar=';
    let curLocaleAndCal = data.AppleLocale || language || 'en';
    let split = curLocaleAndCal.split(calSplit);
    let curLoc = split[0];

    if (calendarFormat || split[1]) {
      calendarFormat = `${calSplit}${calendarFormat || split[1] || ''}`;
    }

    calendarFormat = calendarFormat || '';
    let newLocaleAndCal = locale ? locale : curLoc;

    if (calendarFormat) {
      newLocaleAndCal = `${newLocaleAndCal}${calendarFormat}`;
    }

    if (newLocaleAndCal !== curLocaleAndCal) {
      _logger.default.debug(`New locale: ${newLocaleAndCal}`);

      updates.AppleLocale = newLocaleAndCal;
    }
  }

  if (_lodash.default.size(updates) === 0) {
    _logger.default.debug('No locale updates necessary.');

    return false;
  }

  _logger.default.debug('Writing new locale plist data');

  await update(globalPrefs, updates);
  return true;
}

async function stub() {
  return await plistPaths;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJwbGlzdFBhdGhzIiwic2ltIiwiaWRlbnRpZmllciIsInBhdGhzIiwic2ltRGlyZWN0b3J5IiwiZ2V0RGlyIiwicHVzaCIsInBhdGgiLCJyZXNvbHZlIiwiZ2V0QXBwRGlyIiwic2VtdmVyIiwibHQiLCJjb2VyY2UiLCJ4Y29kZVZlcnNpb24iLCJ2ZXJzaW9uU3RyaW5nIiwidXBkYXRlU2V0dGluZ3MiLCJwbGlzdCIsInVwZGF0ZXMiLCJCIiwicmVkdWNlIiwicmVkdWNlciIsInVwZGF0ZWQiLCJ1cGRhdGUiLCJwYXRoVG9QbGlzdCIsImN1cnJlbnRTZXR0aW5ncyIsInJlYWQiLCJuZXdTZXR0aW5ncyIsIk9iamVjdCIsImFzc2lnbiIsIl8iLCJpc0VxdWFsIiwidXBkYXRlUGxpc3RGaWxlIiwicmVhZFNldHRpbmdzIiwic2V0dGluZ3MiLCJwYXJzZVBsaXN0RmlsZSIsInVwZGF0ZUxvY2F0aW9uU2V0dGluZ3MiLCJidW5kbGVJZCIsImF1dGhvcml6ZWQiLCJuZXdDYWNoZVByZWZzIiwiTGFzdEZlbmNlQWN0aXZpdHlUaW1lc3RhbXAiLCJDbGVhblNodXRkb3duIiwibmV3Q2xpZW50UHJlZnMiLCJCdW5kbGVJZCIsIkF1dGhvcml6ZWQiLCJXaGl0ZWxpc3RlZCIsImZpbGUiLCJsb2ciLCJkZWJ1ZyIsIndlaXJkTG9jS2V5IiwiaGFzIiwiQnVuZGxlUGF0aCIsIkV4ZWN1dGFibGUiLCJSZWdpc3RlcmVkIiwiYmFzZVNldHRpbmciLCJkZWZhdWx0cyIsInNldFJlZHVjZU1vdGlvbiIsInJlZHVjZU1vdGlvbiIsIlJlZHVjZU1vdGlvbkVuYWJsZWQiLCJ1cGRhdGVTYWZhcmlHbG9iYWxTZXR0aW5ncyIsInNldHRpbmdTZXQiLCJzYWZhcmlTZXR0aW5nU2V0IiwidG9QYWlycyIsImtleSIsInZhbHVlIiwiaXNFbXB0eSIsInVwZGF0ZVNhZmFyaVVzZXJTZXR0aW5ncyIsIm5ld1VzZXJTZXR0aW5ncyIsInNhZmFyaUFsbG93SmF2YVNjcmlwdCIsIldlYktpdEphdmFTY3JpcHRFbmFibGVkIiwic2FmYXJpQWxsb3dQb3B1cHMiLCJXZWJLaXRKYXZhU2NyaXB0Q2FuT3BlbldpbmRvd3NBdXRvbWF0aWNhbGx5Iiwic2FmYXJpRm9yY2VGcmF1ZFdhcm5pbmciLCJXYXJuQWJvdXRGcmF1ZHVsZW50V2Vic2l0ZXMiLCJ1c2VyU2V0dGluZ1NldCIsInJlc3RyaWN0ZWRCb29sIiwidXBkYXRlTG9jYWxlIiwibGFuZ3VhZ2UiLCJsb2NhbGUiLCJjYWxlbmRhckZvcm1hdCIsImdsb2JhbFByZWZzIiwiZGF0YSIsInN1cHBvcnRlZExhbmdzIiwiQXBwbGVMYW5ndWFnZXMiLCJpbmRleE9mIiwiY29uY2F0Iiwid2l0aG91dCIsImNhbFNwbGl0IiwiY3VyTG9jYWxlQW5kQ2FsIiwiQXBwbGVMb2NhbGUiLCJzcGxpdCIsImN1ckxvYyIsIm5ld0xvY2FsZUFuZENhbCIsInNpemUiLCJzdHViIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUtBLGVBQWVBLFVBQWYsQ0FBMkJDLEdBQTNCLEVBQWdDQyxVQUFoQyxFQUE0QztBQUMxQyxNQUFJQyxLQUFLLEdBQUcsRUFBWjtBQUNBLE1BQUlDLFlBQVksR0FBR0gsR0FBRyxDQUFDSSxNQUFKLEVBQW5COztBQUVBLFVBQVFILFVBQVI7QUFDRSxTQUFLLGNBQUw7QUFDRUMsTUFBQUEsS0FBSyxDQUFDRyxJQUFOLENBQVdDLGNBQUtDLE9BQUwsQ0FBYUosWUFBYixFQUEyQixTQUEzQixFQUFzQyxhQUF0QyxFQUFxRCw4QkFBckQsQ0FBWDtBQUNBOztBQUNGLFNBQUssY0FBTDtBQUNFRCxNQUFBQSxLQUFLLENBQUNHLElBQU4sQ0FBV0MsY0FBS0MsT0FBTCxDQUFhLE1BQU1QLEdBQUcsQ0FBQ1EsU0FBSixDQUFjLHdCQUFkLENBQW5CLEVBQTRELFNBQTVELEVBQXVFLGFBQXZFLEVBQXNGLDhCQUF0RixDQUFYO0FB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c0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHBsaXN0IH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxuLy8gcmV0dXJucyBwYXRoIHRvIHBsaXN0IGJhc2VkIG9uIGlkIGZvciBwbGlzdC5cbi8vIHRoZXNlIGlkcyBhcmUgYXBwaXVtIHRlcm1zXG5hc3luYyBmdW5jdGlvbiBwbGlzdFBhdGhzIChzaW0sIGlkZW50aWZpZXIpIHtcbiAgbGV0IHBhdGhzID0gW107XG4gIGxldCBzaW1EaXJlY3RvcnkgPSBzaW0uZ2V0RGlyKCk7XG5cbiAgc3dpdGNoIChpZGVudGlmaWVyKSB7XG4gICAgY2FzZSAnd2ViSW5zcGVjdG9yJzpcbiAgICAgIHBhdGhzLnB1c2gocGF0aC5yZXNvbHZlKHNpbURpcmVjdG9yeSwgJ0xpYnJhcnknLCAnUHJlZmVyZW5jZXMnLCAnY29tLmFwcGxlLndlYkluc3BlY3Rvci5wbGlzdCcpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ21vYmlsZVNhZmFyaSc6XG4gICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShhd2FpdCBzaW0uZ2V0QXBwRGlyKCdjb20uYXBwbGUubW9iaWxlc2FmYXJpJyksICdMaWJyYXJ5JywgJ1ByZWZlcmVuY2VzJywgJ2NvbS5hcHBsZS5tb2JpbGVzYWZhcmkucGxpc3QnKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdnbG9iYWxNb2JpbGVTYWZhcmknOlxuICAgICAgcGF0aHMucHVzaChwYXRoLnJlc29sdmUoc2ltRGlyZWN0b3J5LCAnTGlicmFyeScsICdQcmVmZXJlbmNlcycsICdjb20uYXBwbGUubW9iaWxlc2FmYXJpLnBsaXN0JykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnd2ViVUknOlxuICAgICAgcGF0aHMucHVzaChwYXRoLnJlc29sdmUoc2ltRGlyZWN0b3J5LCAnTGlicmFyeScsICdQcmVmZXJlbmNlcycsICdjb20uYXBwbGUuV2ViVUkucGxpc3QnKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd3ZWJGb3VuZGF0aW9uJzpcbiAgICAgIHBhdGhzLnB1c2gocGF0aC5yZXNvbHZlKHNpbURpcmVjdG9yeSwgJ0xpYnJhcnknLCAnUHJlZmVyZW5jZXMnLCAnY29tLmFwcGxlLldlYkZvdW5kYXRpb24ucGxpc3QnKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdwcmVmZXJlbmNlcyc6XG4gICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShzaW1EaXJlY3RvcnksICdMaWJyYXJ5JywgJ1ByZWZlcmVuY2VzJywgJ2NvbS5hcHBsZS5QcmVmZXJlbmNlcy5wbGlzdCcpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xvY2F0aW9uU2VydmljZXMnOlxuICAgICAgcGF0aHMucHVzaChwYXRoLnJlc29sdmUoc2ltRGlyZWN0b3J5LCAnTGlicmFyeScsICdQcmVmZXJlbmNlcycsICdjb20uYXBwbGUubG9jYXRpb25kLnBsaXN0JykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbG9jYXRpb25DbGllbnRzJzpcbiAgICAgIHBhdGhzLnB1c2gocGF0aC5yZXNvbHZlKHNpbURpcmVjdG9yeSwgJ0xpYnJhcnknLCAnQ2FjaGVzJywgJ2xvY2F0aW9uZCcsICdjbGllbnRzLnBsaXN0JykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbG9jYXRpb25DYWNoZSc6XG4gICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShzaW1EaXJlY3RvcnksICdMaWJyYXJ5JywgJ0NhY2hlcycsICdsb2NhdGlvbmQnLCAnY2FjaGUucGxpc3QnKSk7XG4gICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShzaW1EaXJlY3RvcnksICdMaWJyYXJ5JywgJ1ByZWZlcmVuY2VzJywgJ2NvbS5hcHBsZS5sb2NhdGlvbmQucGxpc3QnKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1c2VyU2V0dGluZ3MnOlxuICAgICAgaWYgKHNlbXZlci5sdChzZW12ZXIuY29lcmNlKHNpbS54Y29kZVZlcnNpb24udmVyc2lvblN0cmluZyksIHNlbXZlci5jb2VyY2UoJzcuMycpKSkge1xuICAgICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShzaW1EaXJlY3RvcnksICdMaWJyYXJ5JywgJ0NvbmZpZ3VyYXRpb25Qcm9maWxlcycsICdVc2VyU2V0dGluZ3MucGxpc3QnKSk7XG4gICAgICAgIHBhdGhzLnB1c2gocGF0aC5yZXNvbHZlKHNpbURpcmVjdG9yeSwgJ0xpYnJhcnknLCAnQ29uZmlndXJhdGlvblByb2ZpbGVzJywgJ0VmZmVjdGl2ZVVzZXJTZXR0aW5ncy5wbGlzdCcpKTtcbiAgICAgICAgcGF0aHMucHVzaChwYXRoLnJlc29sdmUoc2ltRGlyZWN0b3J5LCAnTGlicmFyeScsICdDb25maWd1cmF0aW9uUHJvZmlsZXMnLCAnUHVibGljSW5mbycsICdQdWJsaWNFZmZlY3RpdmVVc2VyU2V0dGluZ3MucGxpc3QnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShzaW1EaXJlY3RvcnksICdMaWJyYXJ5JywgJ1VzZXJDb25maWd1cmF0aW9uUHJvZmlsZXMnLCAnVXNlclNldHRpbmdzLnBsaXN0JykpO1xuICAgICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShzaW1EaXJlY3RvcnksICdMaWJyYXJ5JywgJ1VzZXJDb25maWd1cmF0aW9uUHJvZmlsZXMnLCAnRWZmZWN0aXZlVXNlclNldHRpbmdzLnBsaXN0JykpO1xuICAgICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShzaW1EaXJlY3RvcnksICdMaWJyYXJ5JywgJ1VzZXJDb25maWd1cmF0aW9uUHJvZmlsZXMnLCAnUHVibGljSW5mbycsICdQdWJsaWNFZmZlY3RpdmVVc2VyU2V0dGluZ3MucGxpc3QnKSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlZmZlY3RpdmVVc2VyU2V0dGluZ3MnOlxuICAgICAgcGF0aHMucHVzaChwYXRoLnJlc29sdmUoc2ltRGlyZWN0b3J5LCAnTGlicmFyeScsICdDb25maWd1cmF0aW9uUHJvZmlsZXMnLCAnRWZmZWN0aXZlVXNlclNldHRpbmdzLnBsaXN0JykpO1xuICAgICAgcGF0aHMucHVzaChwYXRoLnJlc29sdmUoc2ltRGlyZWN0b3J5LCAnTGlicmFyeScsICdDb25maWd1cmF0aW9uUHJvZmlsZXMnLCAnUHVibGljSW5mbycsICdQdWJsaWNFZmZlY3RpdmVVc2VyU2V0dGluZ3MucGxpc3QnKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdhY2Nlc3NpYmlsaXR5U2V0dGluZ3MnOlxuICAgICAgcGF0aHMucHVzaChwYXRoLnJlc29sdmUoc2ltRGlyZWN0b3J5LCAnTGlicmFyeScsICdQcmVmZXJlbmNlcycsICdjb20uYXBwbGUuQWNjZXNzaWJpbGl0eS5wbGlzdCcpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VpU3R5bGVTZXR0aW5ncyc6XG4gICAgICBwYXRocy5wdXNoKHBhdGgucmVzb2x2ZShzaW1EaXJlY3RvcnksICdMaWJyYXJ5JywgJ1ByZWZlcmVuY2VzJywgJ2NvbS5hcHBsZS51aWtpdHNlcnZpY2VzLnVzZXJJbnRlcmZhY2VTdHlsZU1vZGUucGxpc3QnKSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBwYXRocztcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2V0dGluZ3MgKHNpbSwgcGxpc3QsIHVwZGF0ZXMpIHtcbiAgcmV0dXJuIGF3YWl0IEIucmVkdWNlKGF3YWl0IHBsaXN0UGF0aHMoc2ltLCBwbGlzdCksIGFzeW5jIGZ1bmN0aW9uIHJlZHVjZXIgKHVwZGF0ZWQsIHBhdGgpIHtcbiAgICByZXR1cm4gYXdhaXQgdXBkYXRlKHBhdGgsIHVwZGF0ZXMpIHx8IHVwZGF0ZWQ7XG4gIH0sIGZhbHNlKTtcbn1cblxuLy8gdXBkYXRlIGEgcGxpc3QgZmlsZSwgbG9jYXRlZCBhdCBwYXRoVG9QbGlzdFxuLy8gcGFzcyBpbiBhbiBvYmplY3QsIGFsbCBzZXR0aW5ncyBzcGVjaWZpZWQgaW4gdGhlIG9iamVjdCB3aWxsIGJlXG4vLyB1cGRhdGVkIG9uIHRoZSBwbGlzdCwgYWxsIG90aGVycyBsZWZ0IGFzLWlzXG5hc3luYyBmdW5jdGlvbiB1cGRhdGUgKHBhdGhUb1BsaXN0LCB1cGRhdGVzKSB7XG4gIGNvbnN0IGN1cnJlbnRTZXR0aW5ncyA9IGF3YWl0IHJlYWQocGF0aFRvUGxpc3QpO1xuICBjb25zdCBuZXdTZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIGN1cnJlbnRTZXR0aW5ncywgdXBkYXRlcyk7XG5cbiAgaWYgKF8uaXNFcXVhbChjdXJyZW50U2V0dGluZ3MsIG5ld1NldHRpbmdzKSkge1xuICAgIC8vIG5vIHNldHRpbmcgY2hhbmdlcywgc28gZG8gbm90aGluZ1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGF3YWl0IHBsaXN0LnVwZGF0ZVBsaXN0RmlsZShwYXRoVG9QbGlzdCwgbmV3U2V0dGluZ3MsIHRydWUsIGZhbHNlKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlYWRTZXR0aW5ncyAoc2ltLCBwbGlzdCkge1xuICBsZXQgc2V0dGluZ3MgPSB7fTtcbiAgZm9yIChsZXQgcGF0aCBvZiBhd2FpdCBwbGlzdFBhdGhzKHNpbSwgcGxpc3QpKSB7XG4gICAgc2V0dGluZ3NbcGF0aF0gPSBhd2FpdCByZWFkKHBhdGgpO1xuICB9XG4gIHJldHVybiBzZXR0aW5ncztcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVhZCAocGF0aFRvUGxpc3QpIHtcbiAgcmV0dXJuIGF3YWl0IHBsaXN0LnBhcnNlUGxpc3RGaWxlKHBhdGhUb1BsaXN0LCBmYWxzZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUxvY2F0aW9uU2V0dGluZ3MgKHNpbSwgYnVuZGxlSWQsIGF1dGhvcml6ZWQpIHtcbiAgLy8gdXBkYXRlIGxvY2F0aW9uIGNhY2hlXG4gIGNvbnN0IG5ld0NhY2hlUHJlZnMgPSB7XG4gICAgTGFzdEZlbmNlQWN0aXZpdHlUaW1lc3RhbXA6IDQxMjEyMjEwMy4yMzI5ODMsXG4gICAgQ2xlYW5TaHV0ZG93bjogdHJ1ZVxuICB9O1xuICBsZXQgdXBkYXRlZCA9IGF3YWl0IHVwZGF0ZVNldHRpbmdzKHNpbSwgJ2xvY2F0aW9uQ2FjaGUnLCB7W2J1bmRsZUlkXTogbmV3Q2FjaGVQcmVmc30pO1xuXG4gIC8vIHVwZGF0ZSBsb2NhdGlvbiBjbGllbnRzXG4gIGNvbnN0IG5ld0NsaWVudFByZWZzID0ge1xuICAgIEJ1bmRsZUlkOiBidW5kbGVJZCxcbiAgICBBdXRob3JpemVkOiAhIWF1dGhvcml6ZWQsXG4gICAgV2hpdGVsaXN0ZWQ6IGZhbHNlLFxuICB9O1xuICBmb3IgKGNvbnN0IGZpbGUgb2YgYXdhaXQgcGxpc3RQYXRocyhzaW0sICdsb2NhdGlvbkNsaWVudHMnKSkge1xuICAgIGxvZy5kZWJ1ZyhgVXBkYXRpbmcgbG9jYXRpb24gY2xpZW50IGZpbGU6ICR7ZmlsZX1gKTtcblxuICAgIGxldCB1cGRhdGVzID0ge307XG5cbiAgICAvLyBzZWUgaWYgdGhlIGJ1bmRsZSBpcyBhbHJlYWR5IHRoZXJlXG4gICAgY29uc3QgcGxpc3QgPSBhd2FpdCByZWFkKGZpbGUpO1xuXG4gICAgLy8gcmFuZG9tIGRhdGEgdGhhdCBhbHdheXMgc2VlbXMgdG8gYmUgaW4gdGhlIGNsaWVudHMucGxpc3RcbiAgICBjb25zdCB3ZWlyZExvY0tleSA9ICdjb20uYXBwbGUubG9jYXRpb25kLmJ1bmRsZS0vU3lzdGVtL0xpYnJhcnkvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnUHJpdmF0ZUZyYW1ld29ya3MvQU9TTm90aWZpY2F0aW9uLmZyYW1ld29yayc7XG4gICAgaWYgKCFfLmhhcyhwbGlzdCwgd2VpcmRMb2NLZXkpKSB7XG4gICAgICB1cGRhdGVzW3dlaXJkTG9jS2V5XSA9IHtcbiAgICAgICAgQnVuZGxlUGF0aDogJy9TeXN0ZW0vTGlicmFyeS9Qcml2YXRlRnJhbWV3b3Jrcy9BT1NOb3RpZmljYXRpb24uZnJhbWV3b3JrJyxcbiAgICAgICAgV2hpdGVsaXN0ZWQ6IGZhbHNlLFxuICAgICAgICBFeGVjdXRhYmxlOiAnJyxcbiAgICAgICAgUmVnaXN0ZXJlZDogJydcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIHRoZSB1cGRhdGUsIGFuZCBtYWtlIHN1cmUgaXQgaGFzIHNlbnNpYmxlIHZhbHVlc1xuICAgIGNvbnN0IGJhc2VTZXR0aW5nID0gXy5oYXMocGxpc3QsIGJ1bmRsZUlkKSA/IHBsaXN0W2J1bmRsZUlkXSA6IHt9O1xuICAgIHVwZGF0ZXNbYnVuZGxlSWRdID0gXy5kZWZhdWx0cyhuZXdDbGllbnRQcmVmcywgYmFzZVNldHRpbmcpO1xuICAgIHVwZGF0ZXNbYnVuZGxlSWRdLkV4ZWN1dGFibGUgPSB1cGRhdGVzW2J1bmRsZUlkXS5FeGVjdXRhYmxlIHx8ICcnO1xuICAgIHVwZGF0ZXNbYnVuZGxlSWRdLlJlZ2lzdGVyZWQgPSB1cGRhdGVzW2J1bmRsZUlkXS5SZWdpc3RlcmVkIHx8ICcnO1xuXG4gICAgdXBkYXRlZCA9IGF3YWl0IHVwZGF0ZShmaWxlLCB1cGRhdGVzKSB8fCB1cGRhdGVkO1xuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZWQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldFJlZHVjZU1vdGlvbiAoc2ltLCByZWR1Y2VNb3Rpb24gPSB0cnVlKSB7XG4gIGxvZy5kZWJ1ZyhgVXBkYXRpbmcgcmVkdWNlIG1vdGlvbi4gU2V0dGluZyB0byAke3JlZHVjZU1vdGlvbn0uYCk7XG4gIGNvbnN0IHBhdGhzID0gYXdhaXQgcGxpc3RQYXRocyhzaW0sICdhY2Nlc3NpYmlsaXR5U2V0dGluZ3MnKTtcbiAgZm9yIChjb25zdCBmaWxlIG9mIHBhdGhzKSB7XG4gICAgYXdhaXQgdXBkYXRlKGZpbGUsIHtcbiAgICAgIFJlZHVjZU1vdGlvbkVuYWJsZWQ6IHJlZHVjZU1vdGlvbiA/IDEgOiAwXG4gICAgfSk7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2FmYXJpR2xvYmFsU2V0dGluZ3MgKHNpbSwgc2V0dGluZ1NldCkge1xuICBsb2cuZGVidWcoJ1VwZGF0aW5nIFNhZmFyaSBnbG9iYWwgc2V0dGluZ3MnKTtcblxuICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IFtmaWxlLCBzYWZhcmlTZXR0aW5nU2V0XSBvZiBfLnRvUGFpcnMoYXdhaXQgcmVhZFNldHRpbmdzKHNpbSwgJ2dsb2JhbE1vYmlsZVNhZmFyaScpKSkge1xuICAgIGxldCBuZXdTZXR0aW5ncyA9IHt9O1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIF8udG9QYWlycyhzZXR0aW5nU2V0KSkge1xuICAgICAgaWYgKHNhZmFyaVNldHRpbmdTZXRba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgbmV3U2V0dGluZ3Nba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoXy5pc0VtcHR5KG5ld1NldHRpbmdzKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdXBkYXRlZCA9IGF3YWl0IHVwZGF0ZShmaWxlLCBuZXdTZXR0aW5ncykgfHwgdXBkYXRlZDtcbiAgfVxuICByZXR1cm4gdXBkYXRlZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2FmYXJpVXNlclNldHRpbmdzIChzaW0sIHNldHRpbmdTZXQpIHtcbiAgbG9nLmRlYnVnKCdVcGRhdGluZyBTYWZhcmkgdXNlciBzZXR0aW5ncycpO1xuXG4gIC8vIGFkZCBleHRyYSBzdHVmZiB0byBVc2VyU2V0dGluZ3MucGxpc3QgYW5kIEVmZmVjdGl2ZVVzZXJTZXR0aW5ncy5wbGlzdFxuICBsZXQgbmV3VXNlclNldHRpbmdzID0ge307XG4gIGlmIChfLmhhcyhzZXR0aW5nU2V0LCAnV2ViS2l0SmF2YVNjcmlwdEVuYWJsZWQnKSkge1xuICAgIG5ld1VzZXJTZXR0aW5ncy5zYWZhcmlBbGxvd0phdmFTY3JpcHQgPSBzZXR0aW5nU2V0LldlYktpdEphdmFTY3JpcHRFbmFibGVkO1xuICB9XG4gIGlmIChfLmhhcyhzZXR0aW5nU2V0LCAnV2ViS2l0SmF2YVNjcmlwdENhbk9wZW5XaW5kb3dzQXV0b21hdGljYWxseScpKSB7XG4gICAgbmV3VXNlclNldHRpbmdzLnNhZmFyaUFsbG93UG9wdXBzID0gc2V0dGluZ1NldC5XZWJLaXRKYXZhU2NyaXB0Q2FuT3BlbldpbmRvd3NBdXRvbWF0aWNhbGx5O1xuICB9XG4gIGlmIChfLmhhcyhzZXR0aW5nU2V0LCAnV2FybkFib3V0RnJhdWR1bGVudFdlYnNpdGVzJykpIHtcbiAgICBuZXdVc2VyU2V0dGluZ3Muc2FmYXJpRm9yY2VGcmF1ZFdhcm5pbmcgPSAhc2V0dGluZ1NldC5XYXJuQWJvdXRGcmF1ZHVsZW50V2Vic2l0ZXM7XG4gIH1cblxuICBpZiAoXy5pc0VtcHR5KG5ld1VzZXJTZXR0aW5ncykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IFtmaWxlLCB1c2VyU2V0dGluZ1NldF0gb2YgXy50b1BhaXJzKGF3YWl0IHJlYWRTZXR0aW5ncyhzaW0sICd1c2VyU2V0dGluZ3MnKSkpIHtcbiAgICAvLyB0aGUgdXNlciBzZXR0aW5ncyBwbGlzdCBoYXMgdHdvIGJ1Y2tldHMsIG9uZSBmb3JcbiAgICAvLyBib29sZWFuIHNldHRpbmdzIChgcmVzdHJpY3RlZEJvb2xgKSBhbmQgb25lIGZvclxuICAgIC8vIG90aGVyIHZhbHVlIHNldHRpbmdzIChgcmVzdHJpY3RlZFZhbHVlYCkuIEluIGVhY2gsIHRoZSB2YWx1ZVxuICAgIC8vIGlzIGluIGEgYHZhbHVlYCBzdWItZmllbGQuXG4gICAgaWYgKCFfLmhhcyh1c2VyU2V0dGluZ1NldCwgJ3Jlc3RyaWN0ZWRCb29sJykpIHtcbiAgICAgIHVzZXJTZXR0aW5nU2V0LnJlc3RyaWN0ZWRCb29sID0ge307XG4gICAgfVxuICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBfLnRvUGFpcnMobmV3VXNlclNldHRpbmdzKSkge1xuICAgICAgdXNlclNldHRpbmdTZXQucmVzdHJpY3RlZEJvb2xba2V5XSA9IHt2YWx1ZX07XG4gICAgfVxuXG4gICAgLy8gYWN0dWFsbHkgZG8gdGhlIHVwZGF0ZVxuICAgIHVwZGF0ZWQgPSBhd2FpdCB1cGRhdGUoZmlsZSwgdXNlclNldHRpbmdTZXQpIHx8IHVwZGF0ZWQ7XG4gIH1cblxuICByZXR1cm4gdXBkYXRlZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlTG9jYWxlIChzaW0sIGxhbmd1YWdlLCBsb2NhbGUsIGNhbGVuZGFyRm9ybWF0KSB7XG4gIGxldCBnbG9iYWxQcmVmcyA9IHBhdGgucmVzb2x2ZShzaW0uZ2V0RGlyKCksICdMaWJyYXJ5JywgJ1ByZWZlcmVuY2VzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcuR2xvYmFsUHJlZmVyZW5jZXMucGxpc3QnKTtcblxuICAvLyBnZXQgdGhlIGN1cnJlbnQgZGF0YVxuICBsZXQgZGF0YSA9IGF3YWl0IHJlYWQoZ2xvYmFsUHJlZnMpO1xuICBsZXQgdXBkYXRlcyA9IHt9O1xuXG4gIC8vIGlmIHdlIGFyZSBzZXR0aW5nIHRoZSBsYW5ndWFnZSwgYWRkIGl0IHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3Qgb2YgbGFuZ3VhZ2VzXG4gIGlmIChsYW5ndWFnZSkge1xuICAgIGxvZy5kZWJ1ZyhgTmV3IGxhbmd1YWdlOiAke2xhbmd1YWdlfWApO1xuICAgIGxldCBzdXBwb3J0ZWRMYW5ncyA9IGRhdGEuQXBwbGVMYW5ndWFnZXMgfHwgW107XG4gICAgLy8gaWYgdGhlIGxhbmd1YWdlIGlzIGZpcnN0LCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgaWYgKHN1cHBvcnRlZExhbmdzLmluZGV4T2YobGFuZ3VhZ2UpICE9PSAwKSB7XG4gICAgICB1cGRhdGVzLkFwcGxlTGFuZ3VhZ2VzID0gW2xhbmd1YWdlXS5jb25jYXQoXy53aXRob3V0KHN1cHBvcnRlZExhbmdzLCBsYW5ndWFnZSkpO1xuICAgIH1cbiAgfVxuICAvLyBpZiB3ZSBhcmUgc2V0dGluZyB0aGUgbG9jYWxlIG9yIGNhbGVuZGFyIGZvcm1hdCwgc2V0IHRoZW0gYXMgYXBwcm9wcmlhdGVcbiAgaWYgKGxvY2FsZSB8fCBjYWxlbmRhckZvcm1hdCkge1xuICAgIGxldCBjYWxTcGxpdCA9ICdAY2FsZW5kYXI9JztcbiAgICBsZXQgY3VyTG9jYWxlQW5kQ2FsID0gZGF0YS5BcHBsZUxvY2FsZSB8fCBsYW5ndWFnZSB8fCAnZW4nO1xuXG4gICAgbGV0IHNwbGl0ID0gY3VyTG9jYWxlQW5kQ2FsLnNwbGl0KGNhbFNwbGl0KTtcbiAgICBsZXQgY3VyTG9jID0gc3BsaXRbMF07XG4gICAgaWYgKGNhbGVuZGFyRm9ybWF0IHx8IHNwbGl0WzFdKSB7XG4gICAgICBjYWxlbmRhckZvcm1hdCA9IGAke2NhbFNwbGl0fSR7Y2FsZW5kYXJGb3JtYXQgfHwgc3BsaXRbMV0gfHwgJyd9YDtcbiAgICB9XG4gICAgY2FsZW5kYXJGb3JtYXQgPSBjYWxlbmRhckZvcm1hdCB8fCAnJztcbiAgICBsZXQgbmV3TG9jYWxlQW5kQ2FsID0gbG9jYWxlID8gbG9jYWxlIDogY3VyTG9jO1xuICAgIGlmIChjYWxlbmRhckZvcm1hdCkge1xuICAgICAgbmV3TG9jYWxlQW5kQ2FsID0gYCR7bmV3TG9jYWxlQW5kQ2FsfSR7Y2FsZW5kYXJGb3JtYXR9YDtcbiAgICB9XG4gICAgLy8gb25seSBuZWVkIHRvIHVwZGF0ZSBpZiBpdCBoYXMgY2hhbmdlZFxuICAgIGlmIChuZXdMb2NhbGVBbmRDYWwgIT09IGN1ckxvY2FsZUFuZENhbCkge1xuICAgICAgbG9nLmRlYnVnKGBOZXcgbG9jYWxlOiAke25ld0xvY2FsZUFuZENhbH1gKTtcbiAgICAgIHVwZGF0ZXMuQXBwbGVMb2NhbGUgPSBuZXdMb2NhbGVBbmRDYWw7XG4gICAgfVxuICB9XG5cbiAgaWYgKF8uc2l6ZSh1cGRhdGVzKSA9PT0gMCkge1xuICAgIGxvZy5kZWJ1ZygnTm8gbG9jYWxlIHVwZGF0ZXMgbmVjZXNzYXJ5LicpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZygnV3JpdGluZyBuZXcgbG9jYWxlIHBsaXN0IGRhdGEnKTtcbiAgYXdhaXQgdXBkYXRlKGdsb2JhbFByZWZzLCB1cGRhdGVzKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0dWIgKCkge1xuICByZXR1cm4gYXdhaXQgcGxpc3RQYXRocztcbn1cblxuZXhwb3J0IHtcbiAgdXBkYXRlLCB1cGRhdGVTZXR0aW5ncywgdXBkYXRlTG9jYXRpb25TZXR0aW5ncywgc2V0UmVkdWNlTW90aW9uLFxuICB1cGRhdGVTYWZhcmlVc2VyU2V0dGluZ3MsIHVwZGF0ZVNhZmFyaUdsb2JhbFNldHRpbmdzLCB1cGRhdGVMb2NhbGUsIHJlYWQsXG4gIHJlYWRTZXR0aW5ncywgc3R1Yixcbn07XG4iXSwiZmlsZSI6ImxpYi9zZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
