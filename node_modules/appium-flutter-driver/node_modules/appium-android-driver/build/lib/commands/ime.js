"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _baseDriver = require("@appium/base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.isIMEActivated = async function isIMEActivated() {
  return true;
};

commands.availableIMEEngines = async function availableIMEEngines() {
  _logger.default.debug('Retrieving available IMEs');

  let engines = await this.adb.availableIMEs();

  _logger.default.debug(`Engines: ${JSON.stringify(engines)}`);

  return engines;
};

commands.getActiveIMEEngine = async function getActiveIMEEngine() {
  _logger.default.debug('Retrieving current default IME');

  return await this.adb.defaultIME();
};

commands.activateIMEEngine = async function activateIMEEngine(imeId) {
  _logger.default.debug(`Attempting to activate IME ${imeId}`);

  let availableEngines = await this.adb.availableIMEs();

  if (availableEngines.indexOf(imeId) === -1) {
    _logger.default.debug('IME not found, failing');

    throw new _baseDriver.errors.IMENotAvailableError();
  }

  _logger.default.debug('Found installed IME, attempting to activate');

  await this.adb.enableIME(imeId);
  await this.adb.setIME(imeId);
};

commands.deactivateIMEEngine = async function deactivateIMEEngine() {
  let currentEngine = await this.getActiveIMEEngine();

  _logger.default.debug(`Attempting to deactivate ${currentEngine}`);

  await this.adb.disableIME(currentEngine);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9pbWUuanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJoZWxwZXJzIiwiZXh0ZW5zaW9ucyIsImlzSU1FQWN0aXZhdGVkIiwiYXZhaWxhYmxlSU1FRW5naW5lcyIsImxvZyIsImRlYnVnIiwiZW5naW5lcyIsImFkYiIsImF2YWlsYWJsZUlNRXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0QWN0aXZlSU1FRW5naW5lIiwiZGVmYXVsdElNRSIsImFjdGl2YXRlSU1FRW5naW5lIiwiaW1lSWQiLCJhdmFpbGFibGVFbmdpbmVzIiwiaW5kZXhPZiIsImVycm9ycyIsIklNRU5vdEF2YWlsYWJsZUVycm9yIiwiZW5hYmxlSU1FIiwic2V0SU1FIiwiZGVhY3RpdmF0ZUlNRUVuZ2luZSIsImN1cnJlbnRFbmdpbmUiLCJkaXNhYmxlSU1FIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7Ozs7QUFFQUYsUUFBUSxDQUFDRyxjQUFULEdBQTBCLGVBQWVBLGNBQWYsR0FBaUM7QUFFekQsU0FBTyxJQUFQO0FBQ0QsQ0FIRDs7QUFLQUgsUUFBUSxDQUFDSSxtQkFBVCxHQUErQixlQUFlQSxtQkFBZixHQUFzQztBQUNuRUMsa0JBQUlDLEtBQUosQ0FBVSwyQkFBVjs7QUFDQSxNQUFJQyxPQUFPLEdBQUcsTUFBTSxLQUFLQyxHQUFMLENBQVNDLGFBQVQsRUFBcEI7O0FBQ0FKLGtCQUFJQyxLQUFKLENBQVcsWUFBV0ksSUFBSSxDQUFDQyxTQUFMLENBQWVKLE9BQWYsQ0FBd0IsRUFBOUM7O0FBQ0EsU0FBT0EsT0FBUDtBQUNELENBTEQ7O0FBT0FQLFFBQVEsQ0FBQ1ksa0JBQVQsR0FBOEIsZUFBZUEsa0JBQWYsR0FBcUM7QUFDakVQLGtCQUFJQyxLQUFKLENBQVUsZ0NBQVY7O0FBQ0EsU0FBTyxNQUFNLEtBQUtFLEdBQUwsQ0FBU0ssVUFBVCxFQUFiO0FBQ0QsQ0FIRDs7QUFLQWIsUUFBUSxDQUFDYyxpQkFBVCxHQUE2QixlQUFlQSxpQkFBZixDQUFrQ0MsS0FBbEMsRUFBeUM7QUFDcEVWLGtCQUFJQyxLQUFKLENBQVcsOEJBQTZCUyxLQUFNLEVBQTlDOztBQUNBLE1BQUlDLGdCQUFnQixHQUFHLE1BQU0sS0FBS1IsR0FBTCxDQUFTQyxhQUFULEVBQTdCOztBQUNBLE1BQUlPLGdCQUFnQixDQUFDQyxPQUFqQixDQUF5QkYsS0FBekIsTUFBb0MsQ0FBQyxDQUF6QyxFQUE0QztBQUMxQ1Ysb0JBQUlDLEtBQUosQ0FBVSx3QkFBVjs7QUFDQSxVQUFNLElBQUlZLG1CQUFPQyxvQkFBWCxFQUFOO0FBQ0Q7O0FBQ0RkLGtCQUFJQyxLQUFKLENBQVUsNkNBQVY7O0FBQ0EsUUFBTSxLQUFLRSxHQUFMLENBQVNZLFNBQVQsQ0FBbUJMLEtBQW5CLENBQU47QUFDQSxRQUFNLEtBQUtQLEdBQUwsQ0FBU2EsTUFBVCxDQUFnQk4sS0FBaEIsQ0FBTjtBQUNELENBVkQ7O0FBWUFmLFFBQVEsQ0FBQ3NCLG1CQUFULEdBQStCLGVBQWVBLG1CQUFmLEdBQXNDO0FBQ25FLE1BQUlDLGFBQWEsR0FBRyxNQUFNLEtBQUtYLGtCQUFMLEVBQTFCOztBQUNBUCxrQkFBSUMsS0FBSixDQUFXLDRCQUEyQmlCLGFBQWMsRUFBcEQ7O0FBQ0EsUUFBTSxLQUFLZixHQUFMLENBQVNnQixVQUFULENBQW9CRCxhQUFwQixDQUFOO0FBQ0QsQ0FKRDs7QUFNQUUsTUFBTSxDQUFDQyxNQUFQLENBQWN4QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ0BhcHBpdW0vYmFzZS1kcml2ZXInO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmlzSU1FQWN0aXZhdGVkID0gYXN5bmMgZnVuY3Rpb24gaXNJTUVBY3RpdmF0ZWQgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgLy8gSU1FIGlzIGFsd2F5cyBhY3RpdmF0ZWQgb24gQW5kcm9pZCBkZXZpY2VzXG4gIHJldHVybiB0cnVlO1xufTtcblxuY29tbWFuZHMuYXZhaWxhYmxlSU1FRW5naW5lcyA9IGFzeW5jIGZ1bmN0aW9uIGF2YWlsYWJsZUlNRUVuZ2luZXMgKCkge1xuICBsb2cuZGVidWcoJ1JldHJpZXZpbmcgYXZhaWxhYmxlIElNRXMnKTtcbiAgbGV0IGVuZ2luZXMgPSBhd2FpdCB0aGlzLmFkYi5hdmFpbGFibGVJTUVzKCk7XG4gIGxvZy5kZWJ1ZyhgRW5naW5lczogJHtKU09OLnN0cmluZ2lmeShlbmdpbmVzKX1gKTtcbiAgcmV0dXJuIGVuZ2luZXM7XG59O1xuXG5jb21tYW5kcy5nZXRBY3RpdmVJTUVFbmdpbmUgPSBhc3luYyBmdW5jdGlvbiBnZXRBY3RpdmVJTUVFbmdpbmUgKCkge1xuICBsb2cuZGVidWcoJ1JldHJpZXZpbmcgY3VycmVudCBkZWZhdWx0IElNRScpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5hZGIuZGVmYXVsdElNRSgpO1xufTtcblxuY29tbWFuZHMuYWN0aXZhdGVJTUVFbmdpbmUgPSBhc3luYyBmdW5jdGlvbiBhY3RpdmF0ZUlNRUVuZ2luZSAoaW1lSWQpIHtcbiAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIGFjdGl2YXRlIElNRSAke2ltZUlkfWApO1xuICBsZXQgYXZhaWxhYmxlRW5naW5lcyA9IGF3YWl0IHRoaXMuYWRiLmF2YWlsYWJsZUlNRXMoKTtcbiAgaWYgKGF2YWlsYWJsZUVuZ2luZXMuaW5kZXhPZihpbWVJZCkgPT09IC0xKSB7XG4gICAgbG9nLmRlYnVnKCdJTUUgbm90IGZvdW5kLCBmYWlsaW5nJyk7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JTUVOb3RBdmFpbGFibGVFcnJvcigpO1xuICB9XG4gIGxvZy5kZWJ1ZygnRm91bmQgaW5zdGFsbGVkIElNRSwgYXR0ZW1wdGluZyB0byBhY3RpdmF0ZScpO1xuICBhd2FpdCB0aGlzLmFkYi5lbmFibGVJTUUoaW1lSWQpO1xuICBhd2FpdCB0aGlzLmFkYi5zZXRJTUUoaW1lSWQpO1xufTtcblxuY29tbWFuZHMuZGVhY3RpdmF0ZUlNRUVuZ2luZSA9IGFzeW5jIGZ1bmN0aW9uIGRlYWN0aXZhdGVJTUVFbmdpbmUgKCkge1xuICBsZXQgY3VycmVudEVuZ2luZSA9IGF3YWl0IHRoaXMuZ2V0QWN0aXZlSU1FRW5naW5lKCk7XG4gIGxvZy5kZWJ1ZyhgQXR0ZW1wdGluZyB0byBkZWFjdGl2YXRlICR7Y3VycmVudEVuZ2luZX1gKTtcbiAgYXdhaXQgdGhpcy5hZGIuZGlzYWJsZUlNRShjdXJyZW50RW5naW5lKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9pbWUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
