"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _androidHelpers = _interopRequireDefault(require("../android-helpers"));

var _support = require("@appium/support");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _jimp = _interopRequireDefault(require("jimp"));

var _teen_process = require("teen_process");

const swipeStepsPerSec = 28;
const dragStepsPerSec = 40;
let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.keyevent = async function keyevent(keycode, metastate = null) {
  _logger.default.warn('keyevent will be deprecated use pressKeyCode');

  return await this.pressKeyCode(keycode, metastate);
};

commands.pressKeyCode = async function pressKeyCode(keycode, metastate = null) {
  return await this.bootstrap.sendAction('pressKeyCode', {
    keycode,
    metastate
  });
};

commands.longPressKeyCode = async function longPressKeyCode(keycode, metastate = null) {
  return await this.bootstrap.sendAction('longPressKeyCode', {
    keycode,
    metastate
  });
};

commands.getOrientation = async function getOrientation() {
  let params = {
    naturalOrientation: !!this.opts.androidNaturalOrientation
  };
  let orientation = await this.bootstrap.sendAction('orientation', params);
  return orientation.toUpperCase();
};

commands.setOrientation = async function setOrientation(orientation) {
  orientation = orientation.toUpperCase();
  let params = {
    orientation,
    naturalOrientation: !!this.opts.androidNaturalOrientation
  };
  return await this.bootstrap.sendAction('orientation', params);
};

commands.fakeFlick = async function fakeFlick(xSpeed, ySpeed) {
  return await this.bootstrap.sendAction('flick', {
    xSpeed,
    ySpeed
  });
};

commands.fakeFlickElement = async function fakeFlickElement(elementId, xoffset, yoffset, speed) {
  let params = {
    xoffset,
    yoffset,
    speed,
    elementId
  };
  return await this.bootstrap.sendAction('element:flick', params);
};

commands.swipe = async function swipe(startX, startY, endX, endY, duration, touchCount, elId) {
  if (startX === 'null') {
    startX = 0.5;
  }

  if (startY === 'null') {
    startY = 0.5;
  }

  let swipeOpts = {
    startX,
    startY,
    endX,
    endY,
    steps: Math.round(duration * swipeStepsPerSec)
  };

  if (_support.util.hasValue(elId)) {
    swipeOpts.elementId = elId;
  }

  return await this.doSwipe(swipeOpts);
};

commands.doSwipe = async function doSwipe(swipeOpts) {
  if (_support.util.hasValue(swipeOpts.elementId)) {
    return await this.bootstrap.sendAction('element:swipe', swipeOpts);
  } else {
    return await this.bootstrap.sendAction('swipe', swipeOpts);
  }
};

commands.pinchClose = async function pinchClose(startX, startY, endX, endY, duration, percent, steps, elId) {
  let pinchOpts = {
    direction: 'in',
    elementId: elId,
    percent,
    steps
  };
  return await this.bootstrap.sendAction('element:pinch', pinchOpts);
};

commands.pinchOpen = async function pinchOpen(startX, startY, endX, endY, duration, percent, steps, elId) {
  let pinchOpts = {
    direction: 'out',
    elementId: elId,
    percent,
    steps
  };
  return await this.bootstrap.sendAction('element:pinch', pinchOpts);
};

commands.flick = async function flick(element, xSpeed, ySpeed, xOffset, yOffset, speed) {
  if (element) {
    await this.fakeFlickElement(element, xOffset, yOffset, speed);
  } else {
    await this.fakeFlick(xSpeed, ySpeed);
  }
};

commands.drag = async function drag(startX, startY, endX, endY, duration, touchCount, elementId, destElId) {
  let dragOpts = {
    elementId,
    destElId,
    startX,
    startY,
    endX,
    endY,
    steps: Math.round(duration * dragStepsPerSec)
  };
  return await this.doDrag(dragOpts);
};

commands.doDrag = async function doDrag(dragOpts) {
  if (_support.util.hasValue(dragOpts.elementId)) {
    return await this.bootstrap.sendAction('element:drag', dragOpts);
  } else {
    return await this.bootstrap.sendAction('drag', dragOpts);
  }
};

commands.lock = async function lock(seconds) {
  await this.adb.lock();

  if (isNaN(seconds)) {
    return;
  }

  const floatSeconds = parseFloat(seconds);

  if (floatSeconds <= 0) {
    return;
  }

  await _bluebird.default.delay(1000 * floatSeconds);
  await this.unlock();
};

commands.isLocked = async function isLocked() {
  return await this.adb.isScreenLocked();
};

commands.unlock = async function unlock() {
  return await _androidHelpers.default.unlock(this, this.adb, this.caps);
};

commands.openNotifications = async function openNotifications() {
  return await this.bootstrap.sendAction('openNotification');
};

commands.setLocation = async function setLocation(latitude, longitude) {
  return await this.adb.sendTelnetCommand(`geo fix ${longitude} ${latitude}`);
};

commands.fingerprint = async function fingerprint(fingerprintId) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('fingerprint method is only available for emulators');
  }

  await this.adb.fingerprint(fingerprintId);
};

commands.sendSMS = async function sendSMS(phoneNumber, message) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('sendSMS method is only available for emulators');
  }

  await this.adb.sendSMS(phoneNumber, message);
};

commands.gsmCall = async function gsmCall(phoneNumber, action) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('gsmCall method is only available for emulators');
  }

  await this.adb.gsmCall(phoneNumber, action);
};

commands.gsmSignal = async function gsmSignal(signalStrengh) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('gsmSignal method is only available for emulators');
  }

  await this.adb.gsmSignal(signalStrengh);
};

commands.gsmVoice = async function gsmVoice(state) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('gsmVoice method is only available for emulators');
  }

  await this.adb.gsmVoice(state);
};

commands.powerAC = async function powerAC(state) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('powerAC method is only available for emulators');
  }

  await this.adb.powerAC(state);
};

commands.powerCapacity = async function powerCapacity(batteryPercent) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('powerCapacity method is only available for emulators');
  }

  await this.adb.powerCapacity(batteryPercent);
};

commands.networkSpeed = async function networkSpeed(networkSpeed) {
  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('networkSpeed method is only available for emulators');
  }

  await this.adb.networkSpeed(networkSpeed);
};

commands.sensorSet = async function sensorSet(sensor = {}) {
  const {
    sensorType,
    value
  } = sensor;

  if (!_support.util.hasValue(sensorType)) {
    _logger.default.errorAndThrow(`'sensorType' argument is required`);
  }

  if (!_support.util.hasValue(value)) {
    _logger.default.errorAndThrow(`'value' argument is required`);
  }

  if (!this.isEmulator()) {
    _logger.default.errorAndThrow('sensorSet method is only available for emulators');
  }

  await this.adb.sensorSet(sensorType, value);
};

helpers.getScreenshotDataWithAdbShell = async function getScreenshotDataWithAdbShell(adb, opts) {
  const localFile = await _support.tempDir.path({
    prefix: 'appium',
    suffix: '.png'
  });

  if (await _support.fs.exists(localFile)) {
    await _support.fs.unlink(localFile);
  }

  try {
    const pngDir = opts.androidScreenshotPath || '/data/local/tmp/';

    const png = _path.default.posix.resolve(pngDir, 'screenshot.png');

    const cmd = ['/system/bin/rm', `${png};`, '/system/bin/screencap', '-p', png];
    await adb.shell(cmd);

    if (!(await adb.fileSize(png))) {
      throw new Error('The size of the taken screenshot equals to zero.');
    }

    await adb.pull(png, localFile);
    return await _jimp.default.read(localFile);
  } finally {
    if (await _support.fs.exists(localFile)) {
      await _support.fs.unlink(localFile);
    }
  }
};

helpers.getScreenshotDataWithAdbExecOut = async function getScreenshotDataWithAdbExecOut(adb) {
  let {
    stdout,
    stderr,
    code
  } = await (0, _teen_process.exec)(adb.executable.path, adb.executable.defaultArgs.concat(['exec-out', '/system/bin/screencap', '-p']), {
    encoding: 'binary',
    isBuffer: true
  });

  if (code || stderr.length) {
    throw new Error(`Screenshot returned error, code: '${code}', stderr: '${stderr.toString()}'`);
  }

  if (!stdout.length) {
    throw new Error('Screenshot returned no data');
  }

  return await _jimp.default.read(stdout);
};

commands.getScreenshot = async function getScreenshot() {
  const apiLevel = await this.adb.getApiLevel();
  let image = null;

  if (apiLevel > 20) {
    try {
      image = await this.getScreenshotDataWithAdbExecOut(this.adb);
    } catch (e) {
      _logger.default.info(`Cannot get screenshot data with 'adb exec-out' because of '${e.message}'. ` + `Defaulting to 'adb shell' call`);
    }
  }

  if (!image) {
    try {
      image = await this.getScreenshotDataWithAdbShell(this.adb, this.opts);
    } catch (e) {
      const err = `Cannot get screenshot data because of '${e.message}'. ` + `Make sure the 'LayoutParams.FLAG_SECURE' is not set for ` + `the current view`;

      _logger.default.errorAndThrow(err);
    }
  }

  if (apiLevel < 23) {
    let screenOrientation = await this.adb.getScreenOrientation();

    try {
      image = await image.rotate(-90 * screenOrientation);
    } catch (err) {
      _logger.default.warn(`Could not rotate screenshot due to error: ${err}`);
    }
  }

  const getBuffer = _bluebird.default.promisify(image.getBuffer, {
    context: image
  });

  const imgBuffer = await getBuffer(_jimp.default.MIME_PNG);
  return imgBuffer.toString('base64');
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
