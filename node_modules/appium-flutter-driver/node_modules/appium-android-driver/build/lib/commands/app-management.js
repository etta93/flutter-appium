"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _asyncbox = require("asyncbox");

var _support = require("@appium/support");

var _logger = _interopRequireDefault(require("../logger"));

var _androidHelpers = require("../android-helpers");

var _baseDriver = require("@appium/base-driver");

const APP_EXTENSIONS = ['.apk', '.apks'];
let commands = {};
exports.commands = commands;

commands.isAppInstalled = async function isAppInstalled(appId) {
  return await this.adb.isAppInstalled(appId);
};

commands.queryAppState = async function queryAppState(appId) {
  _logger.default.info(`Querying the state of '${appId}'`);

  if (!(await this.adb.isAppInstalled(appId))) {
    return _androidHelpers.APP_STATE.NOT_INSTALLED;
  }

  if (!(await this.adb.processExists(appId))) {
    return _androidHelpers.APP_STATE.NOT_RUNNING;
  }

  for (const line of (await this.adb.dumpWindows()).split('\n')) {
    if (line.includes(appId) && (line.includes('mCurrentFocus') || line.includes('mFocusedApp'))) {
      return _androidHelpers.APP_STATE.RUNNING_IN_FOREGROUND;
    }
  }

  return _androidHelpers.APP_STATE.RUNNING_IN_BACKGROUND;
};

commands.activateApp = async function activateApp(appId) {
  const cmd = ['monkey', '-p', appId, '-c', 'android.intent.category.LAUNCHER', '1'];
  let output = '';

  try {
    _logger.default.debug(`Activating '${appId}' with 'adb shell ${cmd.join(' ')}' command`);

    output = await this.adb.shell(cmd);

    _logger.default.debug(`Command stdout: ${output}`);
  } catch (e) {
    _logger.default.errorAndThrow(`Cannot activate '${appId}'. Original error: ${e.message}`);
  }

  if (output.includes('monkey aborted')) {
    _logger.default.errorAndThrow(`Cannot activate '${appId}'. Are you sure it is installed?`);
  }
};

commands.removeApp = async function removeApp(appId, options = {}) {
  return await this.adb.uninstallApk(appId, options);
};

commands.terminateApp = async function terminateApp(appId, options = {}) {
  _logger.default.info(`Terminating '${appId}'`);

  if (!(await this.adb.processExists(appId))) {
    _logger.default.info(`The app '${appId}' is not running`);

    return false;
  }

  await this.adb.forceStop(appId);
  const timeout = _support.util.hasValue(options.timeout) && !isNaN(options.timeout) ? parseInt(options.timeout, 10) : 500;

  try {
    await (0, _asyncbox.waitForCondition)(async () => (await this.queryAppState(appId)) <= _androidHelpers.APP_STATE.NOT_RUNNING, {
      waitMs: timeout,
      intervalMs: 100
    });
  } catch (e) {
    _logger.default.errorAndThrow(`'${appId}' is still running after ${timeout}ms timeout`);
  }

  _logger.default.info(`'${appId}' has been successfully terminated`);

  return true;
};

commands.installApp = async function installApp(appPath, options = {}) {
  const localPath = await this.helpers.configureApp(appPath, APP_EXTENSIONS);
  await this.adb.install(localPath, options);
};

commands.mobileClearApp = async function mobileClearApp(opts = {}) {
  const {
    appId
  } = opts;

  if (!appId) {
    throw new _baseDriver.errors.InvalidArgumentError(`The 'appId' argument is required`);
  }

  await this.adb.clear(appId);
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
