"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

var _bluebird = _interopRequireDefault(require("bluebird"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const AIRPLANE_MODE_MASK = 0b001;
const WIFI_MASK = 0b010;
const DATA_MASK = 0b100;
const GEO_EPSILON = Number.MIN_VALUE;

commands.getNetworkConnection = async function getNetworkConnection() {
  _logger.default.info('Getting network connection');

  let airplaneModeOn = await this.adb.isAirplaneModeOn();
  let connection = airplaneModeOn ? AIRPLANE_MODE_MASK : 0;

  if (!airplaneModeOn) {
    let wifiOn = await this.isWifiOn();
    connection |= wifiOn ? WIFI_MASK : 0;
    let dataOn = await this.adb.isDataOn();
    connection |= dataOn ? DATA_MASK : 0;
  }

  return connection;
};

commands.isWifiOn = async function isWifiOn() {
  return await this.adb.isWifiOn();
};

commands.setNetworkConnection = async function setNetworkConnection(type) {
  _logger.default.info('Setting network connection');

  const shouldEnableAirplaneMode = (type & AIRPLANE_MODE_MASK) !== 0;
  const shouldEnableWifi = (type & WIFI_MASK) !== 0;
  const shouldEnableDataConnection = (type & DATA_MASK) !== 0;
  const currentState = await this.getNetworkConnection();
  const isAirplaneModeEnabled = (currentState & AIRPLANE_MODE_MASK) !== 0;
  const isWiFiEnabled = (currentState & WIFI_MASK) !== 0;
  const isDataEnabled = (currentState & DATA_MASK) !== 0;

  if (shouldEnableAirplaneMode !== isAirplaneModeEnabled) {
    await this.wrapBootstrapDisconnect(async () => {
      await this.adb.setAirplaneMode(shouldEnableAirplaneMode);
    });
    await this.wrapBootstrapDisconnect(async () => {
      await this.adb.broadcastAirplaneMode(shouldEnableAirplaneMode);
    });
  } else {
    _logger.default.info(`Not changing airplane mode, since it is already ` + `${shouldEnableAirplaneMode ? 'enabled' : 'disabled'}`);
  }

  if (shouldEnableWifi === isWiFiEnabled && shouldEnableDataConnection === isDataEnabled) {
    _logger.default.info('Not changing data connection/Wi-Fi states, since they are already set to expected values');

    if (await this.adb.isAirplaneModeOn()) {
      return AIRPLANE_MODE_MASK | currentState;
    }

    return ~AIRPLANE_MODE_MASK & currentState;
  }

  await this.wrapBootstrapDisconnect(async () => {
    if (shouldEnableWifi !== isWiFiEnabled) {
      await this.setWifiState(shouldEnableWifi);
    } else {
      _logger.default.info(`Not changing Wi-Fi state, since it is already ` + `${shouldEnableWifi ? 'enabled' : 'disabled'}`);
    }

    if (shouldEnableAirplaneMode) {
      _logger.default.info('Not changing data connection state, because airplane mode is enabled');
    } else if (shouldEnableDataConnection === isDataEnabled) {
      _logger.default.info(`Not changing data connection state, since it is already ` + `${shouldEnableDataConnection ? 'enabled' : 'disabled'}`);
    } else {
      await this.adb.setDataState(shouldEnableDataConnection, this.isEmulator());
    }
  });
  return await this.getNetworkConnection();
};

commands.setWifiState = async function setWifiState(wifi) {
  await this.adb.setWifiState(wifi, this.isEmulator());
};

commands.toggleData = async function toggleData() {
  let data = !(await this.adb.isDataOn());

  _logger.default.info(`Turning network data ${data ? 'on' : 'off'}`);

  await this.wrapBootstrapDisconnect(async () => {
    await this.adb.setWifiAndData({
      data
    }, this.isEmulator());
  });
};

commands.toggleWiFi = async function toggleWiFi() {
  let wifi = !(await this.adb.isWifiOn());

  _logger.default.info(`Turning WiFi ${wifi ? 'on' : 'off'}`);

  await this.wrapBootstrapDisconnect(async () => {
    await this.adb.setWifiAndData({
      wifi
    }, this.isEmulator());
  });
};

commands.toggleFlightMode = async function toggleFlightMode() {
  let flightMode = !(await this.adb.isAirplaneModeOn());

  _logger.default.info(`Turning flight mode ${flightMode ? 'on' : 'off'}`);

  await this.wrapBootstrapDisconnect(async () => {
    await this.adb.setAirplaneMode(flightMode);
  });
  await this.wrapBootstrapDisconnect(async () => {
    await this.adb.broadcastAirplaneMode(flightMode);
  });
};

commands.setGeoLocation = async function setGeoLocation(location) {
  await this.adb.setGeoLocation(location, this.isEmulator());

  try {
    return await this.getGeoLocation();
  } catch (e) {
    _logger.default.warn(`Could not get the current geolocation info: ${e.message}`);

    _logger.default.warn(`Returning the default zero'ed values`);

    return {
      latitude: GEO_EPSILON,
      longitude: GEO_EPSILON,
      altitude: GEO_EPSILON
    };
  }
};

commands.mobileRefreshGpsCache = async function mobileRefreshGpsCache(opts = {}) {
  const {
    timeoutMs
  } = opts;
  await this.adb.refreshGeoLocationCache(timeoutMs);
};

commands.getGeoLocation = async function getGeoLocation() {
  const {
    latitude,
    longitude,
    altitude
  } = await this.adb.getGeoLocation();
  return {
    latitude: parseFloat(latitude) || GEO_EPSILON,
    longitude: parseFloat(longitude) || GEO_EPSILON,
    altitude: parseFloat(altitude) || GEO_EPSILON
  };
};

const KeyCode = {
  UP: 19,
  DOWN: 20,
  RIGHT: 22,
  CENTER: 23
};

commands.toggleLocationServices = async function toggleLocationServices() {
  _logger.default.info('Toggling location services');

  let api = await this.adb.getApiLevel();

  if (this.isEmulator()) {
    let providers = await this.adb.getLocationProviders();
    let isGpsEnabled = providers.indexOf('gps') !== -1;
    await this.adb.toggleGPSLocationProvider(!isGpsEnabled);
    return;
  }

  if (api > 15) {
    let seq = [KeyCode.UP, KeyCode.UP];

    if (api === 16) {
      seq.push(KeyCode.DOWN);
    } else if (api < 28) {
      seq = [KeyCode.RIGHT, KeyCode.RIGHT, KeyCode.UP];
      await this.adb.keyevent(KeyCode.UP);
    } else if (api >= 28) {
      seq = [KeyCode.RIGHT];
      await this.adb.keyevent(KeyCode.UP);
    }

    await this.toggleSetting('LOCATION_SOURCE_SETTINGS', seq);
  } else {
    throw new _baseDriver.errors.NotYetImplementedError();
  }
};

helpers.toggleSetting = async function toggleSetting(setting, preKeySeq) {
  if (_lodash.default.isNull(preKeySeq)) {
    preKeySeq = [KeyCode.UP, KeyCode.UP, KeyCode.DOWN];
  }

  await this.openSettingsActivity(setting);

  for (let key of preKeySeq) {
    await this.doKey(key);
  }

  let {
    appPackage,
    appActivity
  } = await this.adb.getFocusedPackageAndActivity();
  await this.wrapBootstrapDisconnect(async () => {
    await this.doKey(KeyCode.CENTER);
  });

  try {
    await this.adb.waitForNotActivity(appPackage, appActivity, 5000);
    await this.doKey(KeyCode.RIGHT);
    await this.doKey(KeyCode.CENTER);
    await this.adb.waitForNotActivity(appPackage, appActivity, 5000);
  } catch (ign) {}

  await this.adb.back();
};

helpers.doKey = async function doKey(key) {
  await _bluebird.default.delay(2000);
  await this.adb.keyevent(key);
};

helpers.wrapBootstrapDisconnect = async function wrapBootstrapDisconnect(wrapped) {
  if (!this.bootstrap) {
    return await wrapped();
  }

  this.bootstrap.ignoreUnexpectedShutdown = true;

  try {
    await wrapped();
    await this.adb.restart();
    await this.bootstrap.start(this.opts.appPackage, this.opts.disableAndroidWatchers, this.opts.acceptSslCerts);
  } finally {
    this.bootstrap.ignoreUnexpectedShutdown = false;
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
