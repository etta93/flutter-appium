"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers");

const logCommands = {};

logCommands.listCrashLogs = async function listCrashLogs(opts = {}) {
  const {
    bundleId,
    before,
    since
  } = opts;

  _logger.default.debug(`Listing crash logs on the device '${this.udid}'`);

  const command = ['crash', 'list'];
  const args = ['--json'];

  if (bundleId) {
    args.push('--bundle-id', bundleId);
  }

  if (before) {
    args.push('--before', before);
  }

  if (since) {
    args.push('--since', since);
  }

  return (0, _helpers.fixOutputToArray)(await this.exec(command, args));
};

logCommands.fetchCrashLog = async function fetchCrashLog(name) {
  _logger.default.debug(`Fetching the crash log '${name}' from the device '${this.udid}'`);

  return await this.exec(['crash', 'show'], [name]);
};

logCommands.deleteCrashLogs = async function deleteCrashLogs(opts = {}) {
  const {
    name,
    before,
    since,
    all
  } = opts;

  _logger.default.debug(`Deleting crash logs from the device '${this.udid}'`);

  const command = ['crash', 'delete'];
  const args = [];

  if (before) {
    args.push('--before', before);
  }

  if (since) {
    args.push('--since', since);
  }

  if (all) {
    args.push('--all');
  }

  if (name) {
    args.push(name);
  }

  await this.exec(command, args);
};

var _default = logCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9jcmFzaGxvZy1jb21tYW5kcy5qcyJdLCJuYW1lcyI6WyJsb2dDb21tYW5kcyIsImxpc3RDcmFzaExvZ3MiLCJvcHRzIiwiYnVuZGxlSWQiLCJiZWZvcmUiLCJzaW5jZSIsImxvZyIsImRlYnVnIiwidWRpZCIsImNvbW1hbmQiLCJhcmdzIiwicHVzaCIsImV4ZWMiLCJmZXRjaENyYXNoTG9nIiwibmFtZSIsImRlbGV0ZUNyYXNoTG9ncyIsImFsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxXQUFXLEdBQUcsRUFBcEI7O0FBT0FBLFdBQVcsQ0FBQ0MsYUFBWixHQUE0QixlQUFlQSxhQUFmLENBQThCQyxJQUFJLEdBQUcsRUFBckMsRUFBeUM7QUFDbkUsUUFBTTtBQUNKQyxJQUFBQSxRQURJO0FBRUpDLElBQUFBLE1BRkk7QUFHSkMsSUFBQUE7QUFISSxNQUlGSCxJQUpKOztBQUtBSSxrQkFBSUMsS0FBSixDQUFXLHFDQUFvQyxLQUFLQyxJQUFLLEdBQXpEOztBQUNBLFFBQU1DLE9BQU8sR0FBRyxDQUFDLE9BQUQsRUFBVSxNQUFWLENBQWhCO0FBQ0EsUUFBTUMsSUFBSSxHQUFHLENBQUMsUUFBRCxDQUFiOztBQUNBLE1BQUlQLFFBQUosRUFBYztBQUNaTyxJQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxhQUFWLEVBQXlCUixRQUF6QjtBQUNEOztBQUNELE1BQUlDLE1BQUosRUFBWTtBQUNWTSxJQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxVQUFWLEVBQXNCUCxNQUF0QjtBQUNEOztBQUNELE1BQUlDLEtBQUosRUFBVztBQUNUSyxJQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxTQUFWLEVBQXFCTixLQUFyQjtBQUNEOztBQUNELFNBQU8sK0JBQWlCLE1BQU0sS0FBS08sSUFBTCxDQUFVSCxPQUFWLEVBQW1CQyxJQUFuQixDQUF2QixDQUFQO0FBQ0QsQ0FuQkQ7O0FBMkJBVixXQUFXLENBQUNhLGFBQVosR0FBNEIsZUFBZUEsYUFBZixDQUE4QkMsSUFBOUIsRUFBb0M7QUFDOURSLGtCQUFJQyxLQUFKLENBQVcsMkJBQTBCTyxJQUFLLHNCQUFxQixLQUFLTixJQUFLLEdBQXpFOztBQUNBLFNBQU8sTUFBTSxLQUFLSSxJQUFMLENBQVUsQ0FBQyxPQUFELEVBQVUsTUFBVixDQUFWLEVBQTZCLENBQUNFLElBQUQsQ0FBN0IsQ0FBYjtBQUNELENBSEQ7O0FBdUJBZCxXQUFXLENBQUNlLGVBQVosR0FBOEIsZUFBZUEsZUFBZixDQUFnQ2IsSUFBSSxHQUFHLEVBQXZDLEVBQTJDO0FBQ3ZFLFFBQU07QUFDSlksSUFBQUEsSUFESTtBQUVKVixJQUFBQSxNQUZJO0FBR0pDLElBQUFBLEtBSEk7QUFJSlcsSUFBQUE7QUFKSSxNQUtGZCxJQUxKOztBQU1BSSxrQkFBSUMsS0FBSixDQUFXLHdDQUF1QyxLQUFLQyxJQUFLLEdBQTVEOztBQUNBLFFBQU1DLE9BQU8sR0FBRyxDQUFDLE9BQUQsRUFBVSxRQUFWLENBQWhCO0FBQ0EsUUFBTUMsSUFBSSxHQUFHLEVBQWI7O0FBQ0EsTUFBSU4sTUFBSixFQUFZO0FBQ1ZNLElBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFVBQVYsRUFBc0JQLE1BQXRCO0FBQ0Q7O0FBQ0QsTUFBSUMsS0FBSixFQUFXO0FBQ1RLLElBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLFNBQVYsRUFBcUJOLEtBQXJCO0FBQ0Q7O0FBQ0QsTUFBSVcsR0FBSixFQUFTO0FBQ1BOLElBQUFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLE9BQVY7QUFDRDs7QUFDRCxNQUFJRyxJQUFKLEVBQVU7QUFDUkosSUFBQUEsSUFBSSxDQUFDQyxJQUFMLENBQVVHLElBQVY7QUFDRDs7QUFDRCxRQUFNLEtBQUtGLElBQUwsQ0FBVUgsT0FBVixFQUFtQkMsSUFBbkIsQ0FBTjtBQUNELENBdkJEOztlQXlCZVYsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCB7IGZpeE91dHB1dFRvQXJyYXkgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuXG5jb25zdCBsb2dDb21tYW5kcyA9IHt9O1xuXG4vKipcbiAqIEZldGNoZXMgYSBsaXN0IG9mIGNyYXNoIGxvZ3MgcHJlc2VudCBvbiB0aGUgdGFyZ2V0XG4gKlxuICogQHJldHVybnMge0FycmF5PG9iamVjdD59IFRoZSBsaXN0IG9mIGZldGNoZWQgbG9ncyBvciBhbiBlbXB0eSBhcnJheVxuICovXG5sb2dDb21tYW5kcy5saXN0Q3Jhc2hMb2dzID0gYXN5bmMgZnVuY3Rpb24gbGlzdENyYXNoTG9ncyAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBidW5kbGVJZCxcbiAgICBiZWZvcmUsXG4gICAgc2luY2UsXG4gIH0gPSBvcHRzO1xuICBsb2cuZGVidWcoYExpc3RpbmcgY3Jhc2ggbG9ncyBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGNvbnN0IGNvbW1hbmQgPSBbJ2NyYXNoJywgJ2xpc3QnXTtcbiAgY29uc3QgYXJncyA9IFsnLS1qc29uJ107XG4gIGlmIChidW5kbGVJZCkge1xuICAgIGFyZ3MucHVzaCgnLS1idW5kbGUtaWQnLCBidW5kbGVJZCk7XG4gIH1cbiAgaWYgKGJlZm9yZSkge1xuICAgIGFyZ3MucHVzaCgnLS1iZWZvcmUnLCBiZWZvcmUpO1xuICB9XG4gIGlmIChzaW5jZSkge1xuICAgIGFyZ3MucHVzaCgnLS1zaW5jZScsIHNpbmNlKTtcbiAgfVxuICByZXR1cm4gZml4T3V0cHV0VG9BcnJheShhd2FpdCB0aGlzLmV4ZWMoY29tbWFuZCwgYXJncykpO1xufTtcblxuLyoqXG4gKiBGZXRjaGVzIHRoZSBjcmFzaCBsb2cgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbG9nIHRvIGZldGNoXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29udGVudCBvZiB0aGUgbG9nXG4gKi9cbmxvZ0NvbW1hbmRzLmZldGNoQ3Jhc2hMb2cgPSBhc3luYyBmdW5jdGlvbiBmZXRjaENyYXNoTG9nIChuYW1lKSB7XG4gIGxvZy5kZWJ1ZyhgRmV0Y2hpbmcgdGhlIGNyYXNoIGxvZyAnJHtuYW1lfScgZnJvbSB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIHJldHVybiBhd2FpdCB0aGlzLmV4ZWMoWydjcmFzaCcsICdzaG93J10sIFtuYW1lXSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IERlbGV0ZUNyYXNoTG9nT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIC0gSWYgcHJlc2VudCB0aGVuIG9ubHlcbiAqIHRoaXMgcGFydGljdWxhciBsb2cgaXMgZ29pbmcgdG8gYmUgZGVsZXRlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGJlZm9yZSAtIElmIHNldCB0aGVuIG9ubHkgbG9nc1xuICogYmVmb3JlIHRoaXMgZGF0ZSB3aWxsIGJlIGRlbGV0ZWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzaW5jZSAtIElmIHNldCB0aGVuIG9ubHkgbG9nc1xuICogYWZ0ZXIgdGhpcyBkYXRlIHdpbGwgYmUgZGVsZXRlZFxuICogQHByb3BlcnR5IHtib29sZWFufSBhbGwgLSBJZiBzZXQgdGhlbiBhbGwgY3Jhc2ggbG9nc1xuICogYXJlIGdvaW5nIHRvIGJlIGRlbGV0ZWRcbiAqL1xuXG4vKipcbiAqIERlbGV0ZXMgY3Jhc2ggbG9nc1xuICpcbiAqIEBwYXJhbSB7RGVsZXRlQ3Jhc2hMb2dPcHRpb25zfSBvcHRzXG4gKi9cbmxvZ0NvbW1hbmRzLmRlbGV0ZUNyYXNoTG9ncyA9IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUNyYXNoTG9ncyAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBuYW1lLFxuICAgIGJlZm9yZSxcbiAgICBzaW5jZSxcbiAgICBhbGwsXG4gIH0gPSBvcHRzO1xuICBsb2cuZGVidWcoYERlbGV0aW5nIGNyYXNoIGxvZ3MgZnJvbSB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGNvbnN0IGNvbW1hbmQgPSBbJ2NyYXNoJywgJ2RlbGV0ZSddO1xuICBjb25zdCBhcmdzID0gW107XG4gIGlmIChiZWZvcmUpIHtcbiAgICBhcmdzLnB1c2goJy0tYmVmb3JlJywgYmVmb3JlKTtcbiAgfVxuICBpZiAoc2luY2UpIHtcbiAgICBhcmdzLnB1c2goJy0tc2luY2UnLCBzaW5jZSk7XG4gIH1cbiAgaWYgKGFsbCkge1xuICAgIGFyZ3MucHVzaCgnLS1hbGwnKTtcbiAgfVxuICBpZiAobmFtZSkge1xuICAgIGFyZ3MucHVzaChuYW1lKTtcbiAgfVxuICBhd2FpdCB0aGlzLmV4ZWMoY29tbWFuZCwgYXJncyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2dDb21tYW5kcztcbiJdLCJmaWxlIjoibGliL3Rvb2xzL2NyYXNobG9nLWNvbW1hbmRzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
