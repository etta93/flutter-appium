"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _helpers = require("../helpers");

const xctestCommands = {};

xctestCommands.runXCUITest = async function runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, opts = {}) {
  const uiTestProcess = this.createSubProcess(['xctest', 'run', opts.testType || 'ui'], [...(opts.args || []), xctestBundleId, appUnderTestBundleId, testRunnerBundleId], {
    env: (0, _helpers.convertToIDBEnv)(opts.env)
  });
  await uiTestProcess.start(0);
  return uiTestProcess;
};

xctestCommands.installXCTestBundle = async function installXCTestBundle(xctestBundlePath) {
  const output = await this.exec(['xctest', 'install'], ['--json', xctestBundlePath]);

  try {
    const object = JSON.parse(output);
    return object.installedTestBundleId;
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object: ${e.message}`);
  }
};

xctestCommands.listXCTestBundles = async function listXCTestBundles() {
  const output = await this.exec(['xctest', 'list'], ['--json']);
  const bundles = (0, _helpers.fixOutputToArray)(output);
  return bundles.map(bundle => bundle.bundle_id);
};

xctestCommands.listXCTestsInTestBundle = async function listXCTestBundles(xctestBundleId) {
  const output = await this.exec(['xctest', 'list-bundle'], ['--json', xctestBundleId]);

  try {
    return JSON.parse(output);
  } catch (e) {
    throw new Error(`Failed to parse '${output}' into json object: ${e.message}`);
  }
};

var _default = xctestCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy94Y3Rlc3QtY29tbWFuZHMuanMiXSwibmFtZXMiOlsieGN0ZXN0Q29tbWFuZHMiLCJydW5YQ1VJVGVzdCIsInRlc3RSdW5uZXJCdW5kbGVJZCIsImFwcFVuZGVyVGVzdEJ1bmRsZUlkIiwieGN0ZXN0QnVuZGxlSWQiLCJvcHRzIiwidWlUZXN0UHJvY2VzcyIsImNyZWF0ZVN1YlByb2Nlc3MiLCJ0ZXN0VHlwZSIsImFyZ3MiLCJlbnYiLCJzdGFydCIsImluc3RhbGxYQ1Rlc3RCdW5kbGUiLCJ4Y3Rlc3RCdW5kbGVQYXRoIiwib3V0cHV0IiwiZXhlYyIsIm9iamVjdCIsIkpTT04iLCJwYXJzZSIsImluc3RhbGxlZFRlc3RCdW5kbGVJZCIsImUiLCJFcnJvciIsIm1lc3NhZ2UiLCJsaXN0WENUZXN0QnVuZGxlcyIsImJ1bmRsZXMiLCJtYXAiLCJidW5kbGUiLCJidW5kbGVfaWQiLCJsaXN0WENUZXN0c0luVGVzdEJ1bmRsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUEsTUFBTUEsY0FBYyxHQUFHLEVBQXZCOztBQWtCQUEsY0FBYyxDQUFDQyxXQUFmLEdBQTZCLGVBQWVBLFdBQWYsQ0FDM0JDLGtCQUQyQixFQUNQQyxvQkFETyxFQUNlQyxjQURmLEVBQytCQyxJQUFJLEdBQUcsRUFEdEMsRUFFM0I7QUFDQSxRQUFNQyxhQUFhLEdBQUcsS0FBS0MsZ0JBQUwsQ0FDcEIsQ0FBQyxRQUFELEVBQVcsS0FBWCxFQUFrQkYsSUFBSSxDQUFDRyxRQUFMLElBQWlCLElBQW5DLENBRG9CLEVBRXBCLENBQ0UsSUFBSUgsSUFBSSxDQUFDSSxJQUFMLElBQWEsRUFBakIsQ0FERixFQUVFTCxjQUZGLEVBR0VELG9CQUhGLEVBSUVELGtCQUpGLENBRm9CLEVBUXBCO0FBQUNRLElBQUFBLEdBQUcsRUFBRSw4QkFBZ0JMLElBQUksQ0FBQ0ssR0FBckI7QUFBTixHQVJvQixDQUF0QjtBQVVBLFFBQU1KLGFBQWEsQ0FBQ0ssS0FBZCxDQUFvQixDQUFwQixDQUFOO0FBQ0EsU0FBT0wsYUFBUDtBQUNELENBZkQ7O0FBc0JBTixjQUFjLENBQUNZLG1CQUFmLEdBQXFDLGVBQWVBLG1CQUFmLENBQW9DQyxnQkFBcEMsRUFBc0Q7QUFDekYsUUFBTUMsTUFBTSxHQUFHLE1BQU0sS0FBS0MsSUFBTCxDQUFVLENBQUMsUUFBRCxFQUFXLFNBQVgsQ0FBVixFQUFpQyxDQUFDLFFBQUQsRUFBV0YsZ0JBQVgsQ0FBakMsQ0FBckI7O0FBQ0EsTUFBSTtBQUNGLFVBQU1HLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdKLE1BQVgsQ0FBZjtBQUNBLFdBQU9FLE1BQU0sQ0FBQ0cscUJBQWQ7QUFDRCxHQUhELENBR0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsVUFBTSxJQUFJQyxLQUFKLENBQVcsb0JBQW1CUCxNQUFPLHVCQUFzQk0sQ0FBQyxDQUFDRSxPQUFRLEVBQXJFLENBQU47QUFDRDtBQUNGLENBUkQ7O0FBYUF0QixjQUFjLENBQUN1QixpQkFBZixHQUFtQyxlQUFlQSxpQkFBZixHQUFvQztBQUNyRSxRQUFNVCxNQUFNLEdBQUcsTUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxRQUFELEVBQVcsTUFBWCxDQUFWLEVBQThCLENBQUMsUUFBRCxDQUE5QixDQUFyQjtBQUNBLFFBQU1TLE9BQU8sR0FBRywrQkFBaUJWLE1BQWpCLENBQWhCO0FBQ0EsU0FBT1UsT0FBTyxDQUFDQyxHQUFSLENBQWFDLE1BQUQsSUFBWUEsTUFBTSxDQUFDQyxTQUEvQixDQUFQO0FBQ0QsQ0FKRDs7QUFVQTNCLGNBQWMsQ0FBQzRCLHVCQUFmLEdBQXlDLGVBQWVMLGlCQUFmLENBQWtDbkIsY0FBbEMsRUFBa0Q7QUFDekYsUUFBTVUsTUFBTSxHQUFHLE1BQU0sS0FBS0MsSUFBTCxDQUFVLENBQUMsUUFBRCxFQUFXLGFBQVgsQ0FBVixFQUFxQyxDQUFDLFFBQUQsRUFBV1gsY0FBWCxDQUFyQyxDQUFyQjs7QUFDQSxNQUFJO0FBQ0YsV0FBT2EsSUFBSSxDQUFDQyxLQUFMLENBQVdKLE1BQVgsQ0FBUDtBQUNELEdBRkQsQ0FFRSxPQUFPTSxDQUFQLEVBQVU7QUFDVixVQUFNLElBQUlDLEtBQUosQ0FBVyxvQkFBbUJQLE1BQU8sdUJBQXNCTSxDQUFDLENBQUNFLE9BQVEsRUFBckUsQ0FBTjtBQUNEO0FBQ0YsQ0FQRDs7ZUFVZXRCLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb252ZXJ0VG9JREJFbnYsIGZpeE91dHB1dFRvQXJyYXkgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgeGN0ZXN0Q29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSdW5PcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3R9IGVudiBFbnZpcm9ubWVudCB2YXJpYWJsZXMgbWFwIHRvIGJlIHBhc3NlZCB0byB0aGUgdGVzdCBydW5uZXJcbiAqIEBwcm9wZXJ0eSB7QXJyYXl9IGFyZ3MgQXJndW1lbnRzIGFycmF5IHRvIGJlIHBhc3NlZCB0byB0aGUgdGVzdCBydW5uZXJcbiAqL1xuXG4vKipcbiAqIFJ1bnMgYW4geGN1aXRlc3Qgb24gdGhlIGRldmljZSBvciBzaW11bGF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXN0UnVubmVyQnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCBvZiB0aGUgdGVzdCBydW5uZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBVbmRlclRlc3RCdW5kbGVJZCBUaGUgYnVuZGxlIGlkIG9mIHRoZSBhcHAgdW5kZXIgdGVzdFxuICogQHBhcmFtIHtzdHJpbmd9IHhjdGVzdEJ1bmRsZUlkIFRoZSBidW5kbGUgaWQgb2YgdGhlIHhjdGVzdCBwYWNrYWdlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0cyBUaGUgZW52cyBhbmQgYXJncyB0byBiZSBwYXNzZWQgdG8gdGhlIHhjdWl0ZXN0IHJ1bm5lclxuICpcbiAqIEByZXR1cm5zIHtTdWJQcm9jZXNzfVxuICovXG54Y3Rlc3RDb21tYW5kcy5ydW5YQ1VJVGVzdCA9IGFzeW5jIGZ1bmN0aW9uIHJ1blhDVUlUZXN0IChcbiAgdGVzdFJ1bm5lckJ1bmRsZUlkLCBhcHBVbmRlclRlc3RCdW5kbGVJZCwgeGN0ZXN0QnVuZGxlSWQsIG9wdHMgPSB7fVxuKSB7XG4gIGNvbnN0IHVpVGVzdFByb2Nlc3MgPSB0aGlzLmNyZWF0ZVN1YlByb2Nlc3MoXG4gICAgWyd4Y3Rlc3QnLCAncnVuJywgb3B0cy50ZXN0VHlwZSB8fCAndWknXSxcbiAgICBbXG4gICAgICAuLi4ob3B0cy5hcmdzIHx8IFtdKSxcbiAgICAgIHhjdGVzdEJ1bmRsZUlkLFxuICAgICAgYXBwVW5kZXJUZXN0QnVuZGxlSWQsXG4gICAgICB0ZXN0UnVubmVyQnVuZGxlSWQsXG4gICAgXSxcbiAgICB7ZW52OiBjb252ZXJ0VG9JREJFbnYob3B0cy5lbnYpXG4gICAgfSk7XG4gIGF3YWl0IHVpVGVzdFByb2Nlc3Muc3RhcnQoMCk7XG4gIHJldHVybiB1aVRlc3RQcm9jZXNzO1xufTtcblxuLyoqXG4gKiBJbnN0YWxscyBhIHhjdGVzdCBidW5kbGUgb24gdGhlIGRldmljZSBvciBzaW11bGF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSB4Y3Rlc3RCdW5kbGVQYXRoIHRoZSBwYXRoIG9mIHRoZSB4Y3Rlc3QgYnVuZGxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgYnVuZGxlIGlkIG9mIHhjdGVzdCBidW5kbGUgdGhhdCB3YXMgaW5zdGFsbGVkXG4gKi9cbnhjdGVzdENvbW1hbmRzLmluc3RhbGxYQ1Rlc3RCdW5kbGUgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsWENUZXN0QnVuZGxlICh4Y3Rlc3RCdW5kbGVQYXRoKSB7XG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuZXhlYyhbJ3hjdGVzdCcsICdpbnN0YWxsJ10sIFsnLS1qc29uJywgeGN0ZXN0QnVuZGxlUGF0aF0pO1xuICB0cnkge1xuICAgIGNvbnN0IG9iamVjdCA9IEpTT04ucGFyc2Uob3V0cHV0KTtcbiAgICByZXR1cm4gb2JqZWN0Lmluc3RhbGxlZFRlc3RCdW5kbGVJZDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlICcke291dHB1dH0nIGludG8ganNvbiBvYmplY3Q6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIExpc3RzIGFsbCB0aGUgeGN0ZXN0IGJ1bmRsZXMgaW5zdGFsbGVkIG9uIGEgZGV2aWNlIG9yIGEgc2ltdWxhdG9yXG4gKi9cbnhjdGVzdENvbW1hbmRzLmxpc3RYQ1Rlc3RCdW5kbGVzID0gYXN5bmMgZnVuY3Rpb24gbGlzdFhDVGVzdEJ1bmRsZXMgKCkge1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWMoWyd4Y3Rlc3QnLCAnbGlzdCddLCBbJy0tanNvbiddKTtcbiAgY29uc3QgYnVuZGxlcyA9IGZpeE91dHB1dFRvQXJyYXkob3V0cHV0KTtcbiAgcmV0dXJuIGJ1bmRsZXMubWFwKChidW5kbGUpID0+IGJ1bmRsZS5idW5kbGVfaWQpO1xufTtcblxuLyoqXG4gKiBMaXN0cyBhbGwgdGhlIHhjdGVzdCBidW5kbGVzIGluc3RhbGxlZCBvbiBhIGRldmljZSBvciBhIHNpbXVsYXRvclxuICogQHBhcmFtIHtzdHJpbmd9IHhjdGVzdEJ1bmRsZUlkIHRoZSBidW5kbGUgaWQgb2YgdGhlIHhjdGVzdFxuICovXG54Y3Rlc3RDb21tYW5kcy5saXN0WENUZXN0c0luVGVzdEJ1bmRsZSA9IGFzeW5jIGZ1bmN0aW9uIGxpc3RYQ1Rlc3RCdW5kbGVzICh4Y3Rlc3RCdW5kbGVJZCkge1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWMoWyd4Y3Rlc3QnLCAnbGlzdC1idW5kbGUnXSwgWyctLWpzb24nLCB4Y3Rlc3RCdW5kbGVJZF0pO1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKG91dHB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSAnJHtvdXRwdXR9JyBpbnRvIGpzb24gb2JqZWN0OiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCB4Y3Rlc3RDb21tYW5kcztcbiJdLCJmaWxlIjoibGliL3Rvb2xzL3hjdGVzdC1jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
