"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _helpers = require("../helpers");

const appCommands = {};

appCommands.listApps = async function listApps() {
  _logger.default.debug(`Listing the info about installed apps on the device '${this.udid}'`);

  return (0, _helpers.fixOutputToArray)(await this.exec(['list-apps'], ['--json']));
};

appCommands.installApp = async function installApp(appPath) {
  _logger.default.debug(`Installing '${appPath}' to the device '${this.udid}'`);

  await this.exec(['install'], [appPath]);
};

appCommands.launchApp = async function launchApp(bundleId, opts = {}) {
  const {
    foregroundIfRunning = true,
    wait = false
  } = opts;

  _logger.default.debug(`Launching '${bundleId}' on the device '${this.udid}'`);

  const args = [];

  if (foregroundIfRunning) {
    args.push('--foreground-if-running');
  }

  if (!wait) {
    await this.exec(['launch'], [...args, bundleId]);
    return null;
  }

  const processMonitor = this.createSubProcess(['launch'], [...args, '--wait-for', bundleId]);
  await processMonitor.start(0);
  return processMonitor;
};

appCommands.terminateApp = async function terminateApp(bundleId) {
  _logger.default.debug(`Terminating '${bundleId}' on the device '${this.udid}'`);

  await this.exec(['terminate'], [bundleId]);
};

appCommands.uninstallApp = async function uninstallApp(bundleId) {
  _logger.default.debug(`Uninstalling '${bundleId}' from the device '${this.udid}'`);

  await this.exec(['uninstall'], [bundleId]);
};

var _default = appCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hcHAtY29tbWFuZHMuanMiXSwibmFtZXMiOlsiYXBwQ29tbWFuZHMiLCJsaXN0QXBwcyIsImxvZyIsImRlYnVnIiwidWRpZCIsImV4ZWMiLCJpbnN0YWxsQXBwIiwiYXBwUGF0aCIsImxhdW5jaEFwcCIsImJ1bmRsZUlkIiwib3B0cyIsImZvcmVncm91bmRJZlJ1bm5pbmciLCJ3YWl0IiwiYXJncyIsInB1c2giLCJwcm9jZXNzTW9uaXRvciIsImNyZWF0ZVN1YlByb2Nlc3MiLCJzdGFydCIsInRlcm1pbmF0ZUFwcCIsInVuaW5zdGFsbEFwcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxXQUFXLEdBQUcsRUFBcEI7O0FBVUFBLFdBQVcsQ0FBQ0MsUUFBWixHQUF1QixlQUFlQSxRQUFmLEdBQTJCO0FBQ2hEQyxrQkFBSUMsS0FBSixDQUFXLHdEQUF1RCxLQUFLQyxJQUFLLEdBQTVFOztBQUNBLFNBQU8sK0JBQWlCLE1BQU0sS0FBS0MsSUFBTCxDQUFVLENBQUMsV0FBRCxDQUFWLEVBQXlCLENBQUMsUUFBRCxDQUF6QixDQUF2QixDQUFQO0FBQ0QsQ0FIRDs7QUFVQUwsV0FBVyxDQUFDTSxVQUFaLEdBQXlCLGVBQWVBLFVBQWYsQ0FBMkJDLE9BQTNCLEVBQW9DO0FBQzNETCxrQkFBSUMsS0FBSixDQUFXLGVBQWNJLE9BQVEsb0JBQW1CLEtBQUtILElBQUssR0FBOUQ7O0FBQ0EsUUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxTQUFELENBQVYsRUFBdUIsQ0FBQ0UsT0FBRCxDQUF2QixDQUFOO0FBQ0QsQ0FIRDs7QUEwQkFQLFdBQVcsQ0FBQ1EsU0FBWixHQUF3QixlQUFlQSxTQUFmLENBQTBCQyxRQUExQixFQUFvQ0MsSUFBSSxHQUFHLEVBQTNDLEVBQStDO0FBQ3JFLFFBQU07QUFDSkMsSUFBQUEsbUJBQW1CLEdBQUcsSUFEbEI7QUFFSkMsSUFBQUEsSUFBSSxHQUFHO0FBRkgsTUFHRkYsSUFISjs7QUFJQVIsa0JBQUlDLEtBQUosQ0FBVyxjQUFhTSxRQUFTLG9CQUFtQixLQUFLTCxJQUFLLEdBQTlEOztBQUNBLFFBQU1TLElBQUksR0FBRyxFQUFiOztBQUNBLE1BQUlGLG1CQUFKLEVBQXlCO0FBQ3ZCRSxJQUFBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSx5QkFBVjtBQUNEOztBQUNELE1BQUksQ0FBQ0YsSUFBTCxFQUFXO0FBQ1QsVUFBTSxLQUFLUCxJQUFMLENBQVUsQ0FBQyxRQUFELENBQVYsRUFBc0IsQ0FBQyxHQUFHUSxJQUFKLEVBQVVKLFFBQVYsQ0FBdEIsQ0FBTjtBQUNBLFdBQU8sSUFBUDtBQUNEOztBQUVELFFBQU1NLGNBQWMsR0FBRyxLQUFLQyxnQkFBTCxDQUNyQixDQUFDLFFBQUQsQ0FEcUIsRUFFckIsQ0FBQyxHQUFHSCxJQUFKLEVBQVUsWUFBVixFQUF3QkosUUFBeEIsQ0FGcUIsQ0FBdkI7QUFJQSxRQUFNTSxjQUFjLENBQUNFLEtBQWYsQ0FBcUIsQ0FBckIsQ0FBTjtBQUNBLFNBQU9GLGNBQVA7QUFDRCxDQXJCRDs7QUE0QkFmLFdBQVcsQ0FBQ2tCLFlBQVosR0FBMkIsZUFBZUEsWUFBZixDQUE2QlQsUUFBN0IsRUFBdUM7QUFDaEVQLGtCQUFJQyxLQUFKLENBQVcsZ0JBQWVNLFFBQVMsb0JBQW1CLEtBQUtMLElBQUssR0FBaEU7O0FBQ0EsUUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxXQUFELENBQVYsRUFBeUIsQ0FBQ0ksUUFBRCxDQUF6QixDQUFOO0FBQ0QsQ0FIRDs7QUFVQVQsV0FBVyxDQUFDbUIsWUFBWixHQUEyQixlQUFlQSxZQUFmLENBQTZCVixRQUE3QixFQUF1QztBQUNoRVAsa0JBQUlDLEtBQUosQ0FBVyxpQkFBZ0JNLFFBQVMsc0JBQXFCLEtBQUtMLElBQUssR0FBbkU7O0FBQ0EsUUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxXQUFELENBQVYsRUFBeUIsQ0FBQ0ksUUFBRCxDQUF6QixDQUFOO0FBQ0QsQ0FIRDs7ZUFLZVQsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCB7IGZpeE91dHB1dFRvQXJyYXkgfSBmcm9tICcuLi9oZWxwZXJzJztcblxuY29uc3QgYXBwQ29tbWFuZHMgPSB7fTtcblxuLyoqXG4gKiBMaXN0cyB0aGUgdGFyZ2V0cyBpbnN0YWxsZWQgYXBwbGljYXRpb25zIGFuZCB0aGVpciBtZXRhZGF0YS5cbiAqIEV4YW1wbGUgb3V0cHV0OlxuICoge1wiYnVuZGxlX2lkXCI6IFwiY29tLmFwcGxlLnRlc3QuSW50ZWdyYXRpb25UZXN0c18xLVJ1bm5lclwiLCBcIm5hbWVcIjogXCJJbnRlZ3JhdGlvblRlc3RzXzEtUnVubmVyXCIsIFwiaW5zdGFsbF90eXBlXCI6IFwidXNlclwiLCBcImFyY2hpdGVjdHVyZXNcIjogW1wieDg2XzY0XCIsIFwiaTM4NlwiXSwgXCJwcm9jZXNzX3N0YXRlXCI6IFwiVW5rbm93blwiLCBcImRlYnVnZ2FibGVcIjogZmFsc2V9XG4gKiB7XCJidW5kbGVfaWRcIjogXCJjb20uYXBwbGUubW9iaWxlc2FmYXJpXCIsIFwibmFtZVwiOiBcIk1vYmlsZVNhZmFyaVwiLCBcImluc3RhbGxfdHlwZVwiOiBcInN5c3RlbVwiLCBcImFyY2hpdGVjdHVyZXNcIjogW1wieDg2XzY0XCJdLCBcInByb2Nlc3Nfc3RhdGVcIjogXCJVbmtub3duXCIsIFwiZGVidWdnYWJsZVwiOiBmYWxzZX1cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXk8b2JqZWN0Pn1cbiAqL1xuYXBwQ29tbWFuZHMubGlzdEFwcHMgPSBhc3luYyBmdW5jdGlvbiBsaXN0QXBwcyAoKSB7XG4gIGxvZy5kZWJ1ZyhgTGlzdGluZyB0aGUgaW5mbyBhYm91dCBpbnN0YWxsZWQgYXBwcyBvbiB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIHJldHVybiBmaXhPdXRwdXRUb0FycmF5KGF3YWl0IHRoaXMuZXhlYyhbJ2xpc3QtYXBwcyddLCBbJy0tanNvbiddKSk7XG59O1xuXG4vKipcbiAqIEluc3RhbGxzIHRoZSBnaXZlbiBhcHBsaWNhdGlvbiB0byB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGFwcFBhdGggRnVsbCBwYXRoIHRvIHRoZSAuYXBwIG9yIC5pcGFcbiAqL1xuYXBwQ29tbWFuZHMuaW5zdGFsbEFwcCA9IGFzeW5jIGZ1bmN0aW9uIGluc3RhbGxBcHAgKGFwcFBhdGgpIHtcbiAgbG9nLmRlYnVnKGBJbnN0YWxsaW5nICcke2FwcFBhdGh9JyB0byB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ2luc3RhbGwnXSwgW2FwcFBhdGhdKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTGF1bmNoT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IGZvcmVncm91bmRJZlJ1bm5pbmcgW3RydWVdIC0gSWYgc2V0IHRvIHRydWUgdGhlblxuICogdGhlIG1ldGhvZCBjYWxsIHdpbGwgcHV0IHRoZSBnaXZlbiBhcHAgaW4gZm9yZWdyb3VuZCBpZiBpdCBpc1xuICogYWxyZWFkeSBydW5uaW5nXG4gKiBAcHJvcGVydHkgez9ib29sZWFufSB3YWl0IFtmYWxzZV0gLSBTZXQgaXQgdG8gdHJ1ZSBpZiBwcm9jZXNzXG4gKiBtb25pdG9yaW5nIGlzIG5lZWRlZC4gU2VlIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgcmV0dXJuZWQgcmVzdWx0XG4gKiBmb3IgbW9yZSBkZXRhaWxzXG4gKi9cblxuLyoqXG4gKiBTdGFydHMgYW4gaW5zdGFsbGVkIGFwcCBvbiB0aGUgZGV2aWNlIHVuZGVyIHRlc3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIEJ1bmRsZSBpZGVudGlmaWVyIG9mIHRoZSBhcHBsaWNhdGlvbiB0byBsYXVuY2guXG4gKiBAcGFyYW0gez9MYXVuY2hPcHRpb25zfSBvcHRzXG4gKiBAcmV0dXJucyB7P1N1YlByb2Nlc3N9IElmIGBvcHRzLndhaXRgIGlzIHNldCB0byB0cnVlIHRoZW4gU3ViUHJvY2VzcyBpbnN0YW5jZVxuICogaXMgcmV0dXJuZWQsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGV4ZWN1dGVkIHByb2Nlc3MgbW9uaXRvci4gVGhlIG1vbml0b3JcbiAqIHdpbGwgYmUgdGVybWluYXRlZCB3aGVuIHRoZSBsYXVuY2hlZCBpcyBjbG9zZWQuIHN0ZG91dCBhbmQgc3RkZXJyIG9mIHRoZVxuICogcmVtb3RlIHByb2Nlc3Mgd2lsbCBhbHNvIGJlIGZvcndhcmRlZC4gYG51bGxgIGlzIHJldHVybmVkIG90aGVyd2lzZS5cbiAqL1xuYXBwQ29tbWFuZHMubGF1bmNoQXBwID0gYXN5bmMgZnVuY3Rpb24gbGF1bmNoQXBwIChidW5kbGVJZCwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBmb3JlZ3JvdW5kSWZSdW5uaW5nID0gdHJ1ZSxcbiAgICB3YWl0ID0gZmFsc2UsXG4gIH0gPSBvcHRzO1xuICBsb2cuZGVidWcoYExhdW5jaGluZyAnJHtidW5kbGVJZH0nIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgY29uc3QgYXJncyA9IFtdO1xuICBpZiAoZm9yZWdyb3VuZElmUnVubmluZykge1xuICAgIGFyZ3MucHVzaCgnLS1mb3JlZ3JvdW5kLWlmLXJ1bm5pbmcnKTtcbiAgfVxuICBpZiAoIXdhaXQpIHtcbiAgICBhd2FpdCB0aGlzLmV4ZWMoWydsYXVuY2gnXSwgWy4uLmFyZ3MsIGJ1bmRsZUlkXSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBwcm9jZXNzTW9uaXRvciA9IHRoaXMuY3JlYXRlU3ViUHJvY2VzcyhcbiAgICBbJ2xhdW5jaCddLFxuICAgIFsuLi5hcmdzLCAnLS13YWl0LWZvcicsIGJ1bmRsZUlkXSxcbiAgKTtcbiAgYXdhaXQgcHJvY2Vzc01vbml0b3Iuc3RhcnQoMCk7XG4gIHJldHVybiBwcm9jZXNzTW9uaXRvcjtcbn07XG5cbi8qKlxuICogS2lsbHMgYW4gYXBwIHdpdGggdGhlIGdpdmVuIGJ1bmRsZSBJRFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBidW5kbGVJZCBCdW5kbGUgaWRlbnRpZmllciBvZiB0aGUgYXBwbGljYXRpb24gdG8gdGVybWluYXRlXG4gKi9cbmFwcENvbW1hbmRzLnRlcm1pbmF0ZUFwcCA9IGFzeW5jIGZ1bmN0aW9uIHRlcm1pbmF0ZUFwcCAoYnVuZGxlSWQpIHtcbiAgbG9nLmRlYnVnKGBUZXJtaW5hdGluZyAnJHtidW5kbGVJZH0nIG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgYXdhaXQgdGhpcy5leGVjKFsndGVybWluYXRlJ10sIFtidW5kbGVJZF0pO1xufTtcblxuLyoqXG4gKiBVbmluc3RhbGxzIGFuIGFwcCB3aXRoIHRoZSBnaXZlbiBidW5kbGUgSURcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgQnVuZGxlIGlkZW50aWZpZXIgb2YgdGhlIGFwcGxpY2F0aW9uIHRvIHVuaW5zdGFsbFxuICovXG5hcHBDb21tYW5kcy51bmluc3RhbGxBcHAgPSBhc3luYyBmdW5jdGlvbiB1bmluc3RhbGxBcHAgKGJ1bmRsZUlkKSB7XG4gIGxvZy5kZWJ1ZyhgVW5pbnN0YWxsaW5nICcke2J1bmRsZUlkfScgZnJvbSB0aGUgZGV2aWNlICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ3VuaW5zdGFsbCddLCBbYnVuZGxlSWRdKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFwcENvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvdG9vbHMvYXBwLWNvbW1hbmRzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
