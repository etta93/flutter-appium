"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger.js"));

var _lodash = _interopRequireDefault(require("lodash"));

var _helpers = require("../helpers");

const miscCommands = {};

miscCommands.describeDevice = async function describeDevice() {
  _logger.default.debug(`Describing the device '${this.udid}'`);

  const output = await this.exec(['describe'], ['--json']);
  return (0, _helpers.fixOutputToObject)(output);
};

miscCommands.focusSimulator = async function focusSimulator() {
  _logger.default.debug(`Focusing Simulator '${this.udid}'`);

  await this.exec(['focus']);
};

miscCommands.openUrl = async function openUrl(url) {
  _logger.default.debug(`Opening URL '${url}' on the device '${this.udid}'`);

  await this.exec(['open'], [url]);
};

miscCommands.clearKeychain = async function clearKeychain() {
  _logger.default.debug(`Clearing keychain on the device '${this.udid}'`);

  await this.exec(['clear-keychain']);
};

miscCommands.setLocation = async function setLocation(latitude, longitude) {
  _logger.default.debug(`Setting location (${latitude}, ${longitude}) on the device '${this.udid}'`);

  await this.exec(['set-location'], [latitude, longitude]);
};

miscCommands.approve = async function approve(bundleId, permissions) {
  _logger.default.debug(`Approving permissions (${JSON.stringify(permissions)}) for '${bundleId}' ` + `on the device '${this.udid}'`);

  const command = ['approve'];
  const args = [];

  if (_lodash.default.isArray(permissions)) {
    args.push(...permissions);
  } else {
    args.push(permissions);
  }

  args.push(bundleId);
  await this.exec(command, args);
};

miscCommands.addContacts = async function addContacts(dbPath) {
  _logger.default.debug(`Adding contacts from (${dbPath}) to the device '${this.udid}'`);

  await this.exec(['contacts', 'update'], [dbPath]);
};

var _default = miscCommands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9taXNjLWNvbW1hbmRzLmpzIl0sIm5hbWVzIjpbIm1pc2NDb21tYW5kcyIsImRlc2NyaWJlRGV2aWNlIiwibG9nIiwiZGVidWciLCJ1ZGlkIiwib3V0cHV0IiwiZXhlYyIsImZvY3VzU2ltdWxhdG9yIiwib3BlblVybCIsInVybCIsImNsZWFyS2V5Y2hhaW4iLCJzZXRMb2NhdGlvbiIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiYXBwcm92ZSIsImJ1bmRsZUlkIiwicGVybWlzc2lvbnMiLCJKU09OIiwic3RyaW5naWZ5IiwiY29tbWFuZCIsImFyZ3MiLCJfIiwiaXNBcnJheSIsInB1c2giLCJhZGRDb250YWN0cyIsImRiUGF0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxZQUFZLEdBQUcsRUFBckI7O0FBdUJBQSxZQUFZLENBQUNDLGNBQWIsR0FBOEIsZUFBZUEsY0FBZixHQUFpQztBQUM3REMsa0JBQUlDLEtBQUosQ0FBVywwQkFBeUIsS0FBS0MsSUFBSyxHQUE5Qzs7QUFDQSxRQUFNQyxNQUFNLEdBQUcsTUFBTSxLQUFLQyxJQUFMLENBQVUsQ0FBQyxVQUFELENBQVYsRUFBd0IsQ0FBQyxRQUFELENBQXhCLENBQXJCO0FBQ0EsU0FBTyxnQ0FBa0JELE1BQWxCLENBQVA7QUFDRCxDQUpEOztBQVNBTCxZQUFZLENBQUNPLGNBQWIsR0FBOEIsZUFBZUEsY0FBZixHQUFpQztBQUM3REwsa0JBQUlDLEtBQUosQ0FBVyx1QkFBc0IsS0FBS0MsSUFBSyxHQUEzQzs7QUFDQSxRQUFNLEtBQUtFLElBQUwsQ0FBVSxDQUFDLE9BQUQsQ0FBVixDQUFOO0FBQ0QsQ0FIRDs7QUFXQU4sWUFBWSxDQUFDUSxPQUFiLEdBQXVCLGVBQWVBLE9BQWYsQ0FBd0JDLEdBQXhCLEVBQTZCO0FBQ2xEUCxrQkFBSUMsS0FBSixDQUFXLGdCQUFlTSxHQUFJLG9CQUFtQixLQUFLTCxJQUFLLEdBQTNEOztBQUNBLFFBQU0sS0FBS0UsSUFBTCxDQUFVLENBQUMsTUFBRCxDQUFWLEVBQW9CLENBQUNHLEdBQUQsQ0FBcEIsQ0FBTjtBQUNELENBSEQ7O0FBUUFULFlBQVksQ0FBQ1UsYUFBYixHQUE2QixlQUFlQSxhQUFmLEdBQWdDO0FBQzNEUixrQkFBSUMsS0FBSixDQUFXLG9DQUFtQyxLQUFLQyxJQUFLLEdBQXhEOztBQUNBLFFBQU0sS0FBS0UsSUFBTCxDQUFVLENBQUMsZ0JBQUQsQ0FBVixDQUFOO0FBQ0QsQ0FIRDs7QUFXQU4sWUFBWSxDQUFDVyxXQUFiLEdBQTJCLGVBQWVBLFdBQWYsQ0FBNEJDLFFBQTVCLEVBQXNDQyxTQUF0QyxFQUFpRDtBQUMxRVgsa0JBQUlDLEtBQUosQ0FBVyxxQkFBb0JTLFFBQVMsS0FBSUMsU0FBVSxvQkFBbUIsS0FBS1QsSUFBSyxHQUFuRjs7QUFDQSxRQUFNLEtBQUtFLElBQUwsQ0FBVSxDQUFDLGNBQUQsQ0FBVixFQUE0QixDQUFDTSxRQUFELEVBQVdDLFNBQVgsQ0FBNUIsQ0FBTjtBQUNELENBSEQ7O0FBWUFiLFlBQVksQ0FBQ2MsT0FBYixHQUF1QixlQUFlQSxPQUFmLENBQXdCQyxRQUF4QixFQUFrQ0MsV0FBbEMsRUFBK0M7QUFDcEVkLGtCQUFJQyxLQUFKLENBQVcsMEJBQXlCYyxJQUFJLENBQUNDLFNBQUwsQ0FBZUYsV0FBZixDQUE0QixVQUFTRCxRQUFTLElBQXhFLEdBQ1Asa0JBQWlCLEtBQUtYLElBQUssR0FEOUI7O0FBRUEsUUFBTWUsT0FBTyxHQUFHLENBQUMsU0FBRCxDQUFoQjtBQUNBLFFBQU1DLElBQUksR0FBRyxFQUFiOztBQUNBLE1BQUlDLGdCQUFFQyxPQUFGLENBQVVOLFdBQVYsQ0FBSixFQUE0QjtBQUMxQkksSUFBQUEsSUFBSSxDQUFDRyxJQUFMLENBQVUsR0FBR1AsV0FBYjtBQUNELEdBRkQsTUFFTztBQUNMSSxJQUFBQSxJQUFJLENBQUNHLElBQUwsQ0FBVVAsV0FBVjtBQUNEOztBQUNESSxFQUFBQSxJQUFJLENBQUNHLElBQUwsQ0FBVVIsUUFBVjtBQUNBLFFBQU0sS0FBS1QsSUFBTCxDQUFVYSxPQUFWLEVBQW1CQyxJQUFuQixDQUFOO0FBQ0QsQ0FaRDs7QUFtQkFwQixZQUFZLENBQUN3QixXQUFiLEdBQTJCLGVBQWVBLFdBQWYsQ0FBNEJDLE1BQTVCLEVBQW9DO0FBQzdEdkIsa0JBQUlDLEtBQUosQ0FBVyx5QkFBd0JzQixNQUFPLG9CQUFtQixLQUFLckIsSUFBSyxHQUF2RTs7QUFDQSxRQUFNLEtBQUtFLElBQUwsQ0FBVSxDQUFDLFVBQUQsRUFBYSxRQUFiLENBQVYsRUFBa0MsQ0FBQ21CLE1BQUQsQ0FBbEMsQ0FBTjtBQUNELENBSEQ7O2VBS2V6QixZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZpeE91dHB1dFRvT2JqZWN0IH0gZnJvbSAnLi4vaGVscGVycyc7XG5cblxuY29uc3QgbWlzY0NvbW1hbmRzID0ge307XG5cbi8qKlxuICogUmV0dXJucyBtZXRhZGF0YSBhYm91dCB0aGUgc3BlY2lmaWVkIHRhcmdldC5cbiAqIE91dHB1dCBleGFtcGxlOlxuICogdGFyZ2V0X2Rlc2NyaXB0aW9uIHtcbiAqICAgdWRpZDogXCIxNEVCREVERS0wQzlFLTQ2QjQtQjFGRi0wODgxRjExRDBFNzVcIlxuICogICBuYW1lOiBcImlQaG9uZSBYXFwzMTJcXDIwMFwiXG4gKiAgIHNjcmVlbl9kaW1lbnNpb25zIHtcbiAqICAgICB3aWR0aDogODI4XG4gKiAgICAgaGVpZ2h0OiAxNzkyXG4gKiAgICAgZGVuc2l0eTogMi4wXG4gKiAgICAgd2lkdGhfcG9pbnRzOiA0MTRcbiAqICAgICBoZWlnaHRfcG9pbnRzOiA4OTZcbiAqICAgfVxuICogICBzdGF0ZTogXCJib290ZWRcIlxuICogICB0YXJnZXRfdHlwZTogXCJzaW11bGF0b3JcIlxuICogICBvc192ZXJzaW9uOiBcImlPUyAxMi4yXCJcbiAqICAgYXJjaGl0ZWN0dXJlOiBcIng4Nl82NFwiXG4gKiB9XG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIGNvbW1hbmQgb3V0cHV0IHBhcnNlZCB0byBhbiBvYmplY3RcbiAqL1xubWlzY0NvbW1hbmRzLmRlc2NyaWJlRGV2aWNlID0gYXN5bmMgZnVuY3Rpb24gZGVzY3JpYmVEZXZpY2UgKCkge1xuICBsb2cuZGVidWcoYERlc2NyaWJpbmcgdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBjb25zdCBvdXRwdXQgPSBhd2FpdCB0aGlzLmV4ZWMoWydkZXNjcmliZSddLCBbJy0tanNvbiddKTtcbiAgcmV0dXJuIGZpeE91dHB1dFRvT2JqZWN0KG91dHB1dCk7XG59O1xuXG4vKipcbiAqIEJyaW5ncyBhIHNpbXVsYXRvcnMgd2luZG93IHRvIHRoZSBmb3JlZ3JvdW5kLlxuICovXG5taXNjQ29tbWFuZHMuZm9jdXNTaW11bGF0b3IgPSBhc3luYyBmdW5jdGlvbiBmb2N1c1NpbXVsYXRvciAoKSB7XG4gIGxvZy5kZWJ1ZyhgRm9jdXNpbmcgU2ltdWxhdG9yICcke3RoaXMudWRpZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhbJ2ZvY3VzJ10pO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgc3BlY2lmaWVkIFVSTCBvbiB0aGUgdGFyZ2V0LlxuICogVGhpcyB3b3JrcyBib3RoIHdpdGggd2ViIGFkZHJlc3NlcyBhbmQgVVJMIHNjaGVtZXMgcHJlc2VudCBvbiB0aGUgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIHVybCB0byBvcGVuXG4gKi9cbm1pc2NDb21tYW5kcy5vcGVuVXJsID0gYXN5bmMgZnVuY3Rpb24gb3BlblVybCAodXJsKSB7XG4gIGxvZy5kZWJ1ZyhgT3BlbmluZyBVUkwgJyR7dXJsfScgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydvcGVuJ10sIFt1cmxdKTtcbn07XG5cbi8qKlxuICogQ2xlYXIgdGhlIGVudGlyZSBrZXljaGFpbiBvbiBTaW11bGF0b3IuXG4gKi9cbm1pc2NDb21tYW5kcy5jbGVhcktleWNoYWluID0gYXN5bmMgZnVuY3Rpb24gY2xlYXJLZXljaGFpbiAoKSB7XG4gIGxvZy5kZWJ1ZyhgQ2xlYXJpbmcga2V5Y2hhaW4gb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydjbGVhci1rZXljaGFpbiddKTtcbn07XG5cbi8qKlxuICogT3ZlcnJpZGVzIGEgc2ltdWxhdG9ycyBsb2NhdGlvblxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGF0aXR1ZGUgVGhlIGxhdGl0dWRlIHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxvbmdpdHVkZSBUaGUgbG9uZ2l0dWRlIHZhbHVlXG4gKi9cbm1pc2NDb21tYW5kcy5zZXRMb2NhdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIHNldExvY2F0aW9uIChsYXRpdHVkZSwgbG9uZ2l0dWRlKSB7XG4gIGxvZy5kZWJ1ZyhgU2V0dGluZyBsb2NhdGlvbiAoJHtsYXRpdHVkZX0sICR7bG9uZ2l0dWRlfSkgb24gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydzZXQtbG9jYXRpb24nXSwgW2xhdGl0dWRlLCBsb25naXR1ZGVdKTtcbn07XG5cbi8qKlxuICogUHJvZ3JhbW1hdGljYWxseSBhcHByb3ZlIHBlcm1pc3Npb24gZm9yIGFuIGFwcCBvbiBTaW11bGF0b3JcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgQXBwbGljYXRpb24gaWRlbnRpZmllciB0byBzZXQgdGhlIHBlcm1pc3Npb25zIGZvclxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPn0gcGVybWlzc2lvbnMgVGhlIHBlcm1pc3Npb24ocykgdG8gYXBwbHkuIENhbiBiZVxuICogb25lIG9mIHtwaG90b3MsY2FtZXJhLGNhbWVyYX1cbiAqL1xubWlzY0NvbW1hbmRzLmFwcHJvdmUgPSBhc3luYyBmdW5jdGlvbiBhcHByb3ZlIChidW5kbGVJZCwgcGVybWlzc2lvbnMpIHtcbiAgbG9nLmRlYnVnKGBBcHByb3ZpbmcgcGVybWlzc2lvbnMgKCR7SlNPTi5zdHJpbmdpZnkocGVybWlzc2lvbnMpfSkgZm9yICcke2J1bmRsZUlkfScgYCArXG4gICAgYG9uIHRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfSdgKTtcbiAgY29uc3QgY29tbWFuZCA9IFsnYXBwcm92ZSddO1xuICBjb25zdCBhcmdzID0gW107XG4gIGlmIChfLmlzQXJyYXkocGVybWlzc2lvbnMpKSB7XG4gICAgYXJncy5wdXNoKC4uLnBlcm1pc3Npb25zKTtcbiAgfSBlbHNlIHtcbiAgICBhcmdzLnB1c2gocGVybWlzc2lvbnMpO1xuICB9XG4gIGFyZ3MucHVzaChidW5kbGVJZCk7XG4gIGF3YWl0IHRoaXMuZXhlYyhjb21tYW5kLCBhcmdzKTtcbn07XG5cbi8qKlxuICogT3ZlcndyaXRlIHRoZSBzaW11bGF0b3JzIGNvbnRhY3RzIGRiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGRiUGF0aCBGdWxsIHBhdGggdG8gdGhlIFNRTGl0ZSBkYiBjb250YWluaW5nIHRoZSBjb250YWN0c1xuICovXG5taXNjQ29tbWFuZHMuYWRkQ29udGFjdHMgPSBhc3luYyBmdW5jdGlvbiBhZGRDb250YWN0cyAoZGJQYXRoKSB7XG4gIGxvZy5kZWJ1ZyhgQWRkaW5nIGNvbnRhY3RzIGZyb20gKCR7ZGJQYXRofSkgdG8gdGhlIGRldmljZSAnJHt0aGlzLnVkaWR9J2ApO1xuICBhd2FpdCB0aGlzLmV4ZWMoWydjb250YWN0cycsICd1cGRhdGUnXSwgW2RiUGF0aF0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWlzY0NvbW1hbmRzO1xuIl0sImZpbGUiOiJsaWIvdG9vbHMvbWlzYy1jb21tYW5kcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
