"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HouseArrestService = exports.HOUSE_ARREST_SERVICE_NAME = void 0;

require("source-map-support/register");

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _constants = require("../constants");

var _afc = _interopRequireDefault(require("../afc"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _baseService = require("../base-service");

const HOUSE_ARREST_SERVICE_NAME = 'com.apple.mobile.house_arrest';
exports.HOUSE_ARREST_SERVICE_NAME = HOUSE_ARREST_SERVICE_NAME;
const MAX_FRAME_SIZE = 1 * _constants.KB;

class HouseArrestService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);

    this._assignClientFailureHandlers(this._encoder);
  }

  async vendContainer(bundleId) {
    const responsePromise = this._receivePlistPromise();

    this._encoder.write({
      Command: 'VendContainer',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application container. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  async vendDocuments(bundleId) {
    const responsePromise = this._receivePlistPromise();

    this._encoder.write({
      Command: 'VendDocuments',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application documents. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  _receivePlistPromise(timeout = 10000) {
    return new _bluebird.default((resolve, reject) => {
      this._decoder.once('data', resolve);

      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
  }

}

exports.HouseArrestService = HouseArrestService;
var _default = HouseArrestService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ob3VzZS1hcnJlc3QvaW5kZXguanMiXSwibmFtZXMiOlsiSE9VU0VfQVJSRVNUX1NFUlZJQ0VfTkFNRSIsIk1BWF9GUkFNRV9TSVpFIiwiS0IiLCJIb3VzZUFycmVzdFNlcnZpY2UiLCJCYXNlU2VydmljZVNvY2tldCIsImNvbnN0cnVjdG9yIiwic29ja2V0Q2xpZW50IiwiX2RlY29kZXIiLCJQbGlzdFNlcnZpY2VEZWNvZGVyIiwiX3NwbGl0dGVyIiwiTGVuZ3RoQmFzZWRTcGxpdHRlciIsInJlYWRhYmxlU3RyZWFtIiwibGl0dGxlRW5kaWFuIiwibWF4RnJhbWVMZW5ndGgiLCJsZW5ndGhGaWVsZE9mZnNldCIsImxlbmd0aEZpZWxkTGVuZ3RoIiwibGVuZ3RoQWRqdXN0bWVudCIsIl9zb2NrZXRDbGllbnQiLCJwaXBlIiwiX2VuY29kZXIiLCJQbGlzdFNlcnZpY2VFbmNvZGVyIiwiX2Fzc2lnbkNsaWVudEZhaWx1cmVIYW5kbGVycyIsInZlbmRDb250YWluZXIiLCJidW5kbGVJZCIsInJlc3BvbnNlUHJvbWlzZSIsIl9yZWNlaXZlUGxpc3RQcm9taXNlIiwid3JpdGUiLCJDb21tYW5kIiwiSWRlbnRpZmllciIsInJlc3BvbnNlIiwiU3RhdHVzIiwiRXJyb3IiLCJ1bnBpcGUiLCJBZmNTZXJ2aWNlIiwidmVuZERvY3VtZW50cyIsInRpbWVvdXQiLCJCIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uY2UiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLHlCQUF5QixHQUFHLCtCQUFsQzs7QUFDQSxNQUFNQyxjQUFjLEdBQUcsSUFBSUMsYUFBM0I7O0FBRUEsTUFBTUMsa0JBQU4sU0FBaUNDLDhCQUFqQyxDQUFtRDtBQUNqREMsRUFBQUEsV0FBVyxDQUFFQyxZQUFGLEVBQWdCO0FBQ3pCLFVBQU1BLFlBQU47QUFFQSxTQUFLQyxRQUFMLEdBQWdCLElBQUlDLDRCQUFKLEVBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFJQyw0QkFBSixDQUF3QjtBQUN2Q0MsTUFBQUEsY0FBYyxFQUFFTCxZQUR1QjtBQUV2Q00sTUFBQUEsWUFBWSxFQUFFLEtBRnlCO0FBR3ZDQyxNQUFBQSxjQUFjLEVBQUVaLGNBSHVCO0FBSXZDYSxNQUFBQSxpQkFBaUIsRUFBRSxDQUpvQjtBQUt2Q0MsTUFBQUEsaUJBQWlCLEVBQUUsQ0FMb0I7QUFNdkNDLE1BQUFBLGdCQUFnQixFQUFFO0FBTnFCLEtBQXhCLENBQWpCOztBQVFBLFNBQUtDLGFBQUwsQ0FBbUJDLElBQW5CLENBQXdCLEtBQUtULFNBQTdCLEVBQXdDUyxJQUF4QyxDQUE2QyxLQUFLWCxRQUFsRDs7QUFFQSxTQUFLWSxRQUFMLEdBQWdCLElBQUlDLDRCQUFKLEVBQWhCOztBQUNBLFNBQUtELFFBQUwsQ0FBY0QsSUFBZCxDQUFtQixLQUFLRCxhQUF4Qjs7QUFDQSxTQUFLSSw0QkFBTCxDQUFrQyxLQUFLRixRQUF2QztBQUNEOztBQVFrQixRQUFiRyxhQUFhLENBQUVDLFFBQUYsRUFBWTtBQUM3QixVQUFNQyxlQUFlLEdBQUcsS0FBS0Msb0JBQUwsRUFBeEI7O0FBQ0EsU0FBS04sUUFBTCxDQUFjTyxLQUFkLENBQW9CO0FBQ2xCQyxNQUFBQSxPQUFPLEVBQUUsZUFEUztBQUVsQkMsTUFBQUEsVUFBVSxFQUFFTDtBQUZNLEtBQXBCOztBQUlBLFVBQU1NLFFBQVEsR0FBRyxNQUFNTCxlQUF2Qjs7QUFDQSxRQUFJSyxRQUFRLENBQUNDLE1BQVQsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsWUFBTSxJQUFJQyxLQUFKLENBQVcseURBQXdERixRQUFRLENBQUNFLEtBQU0sRUFBbEYsQ0FBTjtBQUNEOztBQUNELFNBQUtkLGFBQUwsQ0FBbUJlLE1BQW5CLENBQTBCLEtBQUt2QixTQUEvQjs7QUFDQSxTQUFLQSxTQUFMLENBQWV1QixNQUFmLENBQXNCLEtBQUt6QixRQUEzQjs7QUFDQSxXQUFPLElBQUkwQixZQUFKLENBQWUsS0FBS2hCLGFBQXBCLENBQVA7QUFDRDs7QUFRa0IsUUFBYmlCLGFBQWEsQ0FBRVgsUUFBRixFQUFZO0FBQzdCLFVBQU1DLGVBQWUsR0FBRyxLQUFLQyxvQkFBTCxFQUF4Qjs7QUFDQSxTQUFLTixRQUFMLENBQWNPLEtBQWQsQ0FBb0I7QUFDbEJDLE1BQUFBLE9BQU8sRUFBRSxlQURTO0FBRWxCQyxNQUFBQSxVQUFVLEVBQUVMO0FBRk0sS0FBcEI7O0FBSUEsVUFBTU0sUUFBUSxHQUFHLE1BQU1MLGVBQXZCOztBQUNBLFFBQUlLLFFBQVEsQ0FBQ0MsTUFBVCxLQUFvQixVQUF4QixFQUFvQztBQUNsQyxZQUFNLElBQUlDLEtBQUosQ0FBVyx5REFBd0RGLFFBQVEsQ0FBQ0UsS0FBTSxFQUFsRixDQUFOO0FBQ0Q7O0FBQ0QsU0FBS2QsYUFBTCxDQUFtQmUsTUFBbkIsQ0FBMEIsS0FBS3ZCLFNBQS9COztBQUNBLFNBQUtBLFNBQUwsQ0FBZXVCLE1BQWYsQ0FBc0IsS0FBS3pCLFFBQTNCOztBQUNBLFdBQU8sSUFBSTBCLFlBQUosQ0FBZSxLQUFLaEIsYUFBcEIsQ0FBUDtBQUNEOztBQUVEUSxFQUFBQSxvQkFBb0IsQ0FBRVUsT0FBTyxHQUFHLEtBQVosRUFBbUI7QUFDckMsV0FBTyxJQUFJQyxpQkFBSixDQUFNLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNoQyxXQUFLL0IsUUFBTCxDQUFjZ0MsSUFBZCxDQUFtQixNQUFuQixFQUEyQkYsT0FBM0I7O0FBQ0FHLE1BQUFBLFVBQVUsQ0FBQyxNQUFNRixNQUFNLENBQUMsSUFBSVAsS0FBSixDQUFXLGtEQUFpREksT0FBUSxFQUFwRSxDQUFELENBQWIsRUFBdUZBLE9BQXZGLENBQVY7QUFDRCxLQUhNLENBQVA7QUFJRDs7QUFuRWdEOzs7ZUF1RXBDaEMsa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGxpc3RTZXJ2aWNlRGVjb2RlciBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZGVjb2Rlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRW5jb2RlciBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZW5jb2Rlcic7XG5pbXBvcnQgTGVuZ3RoQmFzZWRTcGxpdHRlciBmcm9tICcuLi91dGlsL3RyYW5zZm9ybWVyL2xlbmd0aC1iYXNlZC1zcGxpdHRlcic7XG5pbXBvcnQgeyBLQiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgQWZjU2VydmljZSBmcm9tICcuLi9hZmMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgQmFzZVNlcnZpY2VTb2NrZXQgfSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuXG5cbmNvbnN0IEhPVVNFX0FSUkVTVF9TRVJWSUNFX05BTUUgPSAnY29tLmFwcGxlLm1vYmlsZS5ob3VzZV9hcnJlc3QnO1xuY29uc3QgTUFYX0ZSQU1FX1NJWkUgPSAxICogS0I7XG5cbmNsYXNzIEhvdXNlQXJyZXN0U2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlU29ja2V0IHtcbiAgY29uc3RydWN0b3IgKHNvY2tldENsaWVudCkge1xuICAgIHN1cGVyKHNvY2tldENsaWVudCk7XG5cbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFBsaXN0U2VydmljZURlY29kZXIoKTtcbiAgICB0aGlzLl9zcGxpdHRlciA9IG5ldyBMZW5ndGhCYXNlZFNwbGl0dGVyKHtcbiAgICAgIHJlYWRhYmxlU3RyZWFtOiBzb2NrZXRDbGllbnQsXG4gICAgICBsaXR0bGVFbmRpYW46IGZhbHNlLFxuICAgICAgbWF4RnJhbWVMZW5ndGg6IE1BWF9GUkFNRV9TSVpFLFxuICAgICAgbGVuZ3RoRmllbGRPZmZzZXQ6IDAsXG4gICAgICBsZW5ndGhGaWVsZExlbmd0aDogNCxcbiAgICAgIGxlbmd0aEFkanVzdG1lbnQ6IDQsXG4gICAgfSk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnBpcGUodGhpcy5fc3BsaXR0ZXIpLnBpcGUodGhpcy5fZGVjb2Rlcik7XG5cbiAgICB0aGlzLl9lbmNvZGVyID0gbmV3IFBsaXN0U2VydmljZUVuY29kZXIoKTtcbiAgICB0aGlzLl9lbmNvZGVyLnBpcGUodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgICB0aGlzLl9hc3NpZ25DbGllbnRGYWlsdXJlSGFuZGxlcnModGhpcy5fZW5jb2Rlcik7XG4gIH1cblxuICAvKipcbiAgICogVmVuZHMgaW50byB0aGUgYXBwbGljYXRpb24gY29udGFpbmVyIGFuZCByZXR1cm5zIGFuIEFmY1NlcnZpY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIFRoZSBidW5kbGUgaWQgb2YgdGhlIGFwcCBjb250YWluZXIgdGhhdCB3ZSB3aWxsIGVudGVyIHRvXG4gICAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiBob3VzZSBhcnJlc3QgZmFpbHMgdG8gYWNjZXNzIHRoZSBhcHBsaWNhdGlvbidzIGNvbnRhaW5lclxuICAgKiBAcmV0dXJucyB7QWZjU2VydmljZX1cbiAgICovXG4gIGFzeW5jIHZlbmRDb250YWluZXIgKGJ1bmRsZUlkKSB7XG4gICAgY29uc3QgcmVzcG9uc2VQcm9taXNlID0gdGhpcy5fcmVjZWl2ZVBsaXN0UHJvbWlzZSgpO1xuICAgIHRoaXMuX2VuY29kZXIud3JpdGUoe1xuICAgICAgQ29tbWFuZDogJ1ZlbmRDb250YWluZXInLFxuICAgICAgSWRlbnRpZmllcjogYnVuZGxlSWQsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNwb25zZVByb21pc2U7XG4gICAgaWYgKHJlc3BvbnNlLlN0YXR1cyAhPT0gJ0NvbXBsZXRlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gdmVuZCBpbnRvIHRoZSBhcHBsaWNhdGlvbiBjb250YWluZXIuIEVycm9yOiAke3Jlc3BvbnNlLkVycm9yfWApO1xuICAgIH1cbiAgICB0aGlzLl9zb2NrZXRDbGllbnQudW5waXBlKHRoaXMuX3NwbGl0dGVyKTtcbiAgICB0aGlzLl9zcGxpdHRlci51bnBpcGUodGhpcy5fZGVjb2Rlcik7XG4gICAgcmV0dXJuIG5ldyBBZmNTZXJ2aWNlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gIH1cblxuICAvKipcbiAgICogVmVuZHMgaW50byB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnRzIGFuZCByZXR1cm5zIGFuIEFmY1NlcnZpY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIFRoZSBidW5kbGUgaWQgb2YgdGhlIGFwcCBkb2N1bWVudHMgdGhhdCB3ZSB3aWxsIGVudGVyIHRvXG4gICAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiBob3VzZSBhcnJlc3QgZmFpbHMgdG8gYWNjZXNzIHRoZSBhcHBsaWNhdGlvbidzIGRvY3VtZW50c1xuICAgKiBAcmV0dXJucyB7QWZjU2VydmljZX1cbiAgICovXG4gIGFzeW5jIHZlbmREb2N1bWVudHMgKGJ1bmRsZUlkKSB7XG4gICAgY29uc3QgcmVzcG9uc2VQcm9taXNlID0gdGhpcy5fcmVjZWl2ZVBsaXN0UHJvbWlzZSgpO1xuICAgIHRoaXMuX2VuY29kZXIud3JpdGUoe1xuICAgICAgQ29tbWFuZDogJ1ZlbmREb2N1bWVudHMnLFxuICAgICAgSWRlbnRpZmllcjogYnVuZGxlSWQsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNwb25zZVByb21pc2U7XG4gICAgaWYgKHJlc3BvbnNlLlN0YXR1cyAhPT0gJ0NvbXBsZXRlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gdmVuZCBpbnRvIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudHMuIEVycm9yOiAke3Jlc3BvbnNlLkVycm9yfWApO1xuICAgIH1cbiAgICB0aGlzLl9zb2NrZXRDbGllbnQudW5waXBlKHRoaXMuX3NwbGl0dGVyKTtcbiAgICB0aGlzLl9zcGxpdHRlci51bnBpcGUodGhpcy5fZGVjb2Rlcik7XG4gICAgcmV0dXJuIG5ldyBBZmNTZXJ2aWNlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gIH1cblxuICBfcmVjZWl2ZVBsaXN0UHJvbWlzZSAodGltZW91dCA9IDEwMDAwKSB7XG4gICAgcmV0dXJuIG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX2RlY29kZXIub25jZSgnZGF0YScsIHJlc29sdmUpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKGBGYWlsZWQgdG8gcmVjZWl2ZSBhbnkgZGF0YSB3aXRoaW4gdGhlIHRpbWVvdXQ6ICR7dGltZW91dH1gKSksIHRpbWVvdXQpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB7IEhvdXNlQXJyZXN0U2VydmljZSwgSE9VU0VfQVJSRVNUX1NFUlZJQ0VfTkFNRSB9O1xuZXhwb3J0IGRlZmF1bHQgSG91c2VBcnJlc3RTZXJ2aWNlO1xuIl0sImZpbGUiOiJsaWIvaG91c2UtYXJyZXN0L2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
