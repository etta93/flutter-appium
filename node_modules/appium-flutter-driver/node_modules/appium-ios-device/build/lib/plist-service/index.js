"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PlistService = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _sslHelper = require("../ssl-helper");

var _plistServiceEncoder = _interopRequireDefault(require("./transformer/plist-service-encoder"));

var _plistServiceDecoder = _interopRequireDefault(require("./transformer/plist-service-decoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _baseService = require("../base-service");

var _constants = require("../constants");

const MAX_FRAME_SIZE = 1 * _constants.MB;
const CHECK_FREQ_MS = 50;

class PlistService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);

    this._assignClientFailureHandlers(this._encoder);

    this.replyQueue = [];

    this._decoder.on('data', data => this.replyQueue.push(data));
  }

  async sendPlistAndReceive(json, timeout = 5000) {
    this.sendPlist(json);
    return await this.receivePlist(timeout);
  }

  sendPlist(json) {
    if (!json) {
      throw new Error('Cant send a null a object');
    }

    this._encoder.write(json);
  }

  async receivePlist(timeout = 5000) {
    return await new _bluebird.default((resolve, reject) => {
      const queue = this.replyQueue;
      const data = queue.shift();

      if (data) {
        resolve(data);
        return;
      }

      const checkExist = setInterval(() => {
        const data = queue.shift();

        if (!data) {
          return;
        }

        clearInterval(checkExist);
        resolve(data);
      }, CHECK_FREQ_MS);
      setTimeout(() => {
        clearInterval(checkExist);
        reject(new Error(`Failed to receive any data within the timeout: ${timeout}`));
      }, timeout);
    });
  }

  enableSessionSSL(hostPrivateKey, hostCertificate) {
    this._socketClient.unpipe(this._splitter);

    this._encoder.unpipe(this._socketClient);

    this._socketClient = (0, _sslHelper.upgradeToSSL)(this._socketClient, hostPrivateKey, hostCertificate);

    this._encoder.pipe(this._socketClient);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);
  }

}

exports.PlistService = PlistService;
var _default = PlistService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wbGlzdC1zZXJ2aWNlL2luZGV4LmpzIl0sIm5hbWVzIjpbIk1BWF9GUkFNRV9TSVpFIiwiTUIiLCJDSEVDS19GUkVRX01TIiwiUGxpc3RTZXJ2aWNlIiwiQmFzZVNlcnZpY2VTb2NrZXQiLCJjb25zdHJ1Y3RvciIsInNvY2tldENsaWVudCIsIl9kZWNvZGVyIiwiUGxpc3RTZXJ2aWNlRGVjb2RlciIsIl9zcGxpdHRlciIsIkxlbmd0aEJhc2VkU3BsaXR0ZXIiLCJyZWFkYWJsZVN0cmVhbSIsImxpdHRsZUVuZGlhbiIsIm1heEZyYW1lTGVuZ3RoIiwibGVuZ3RoRmllbGRPZmZzZXQiLCJsZW5ndGhGaWVsZExlbmd0aCIsImxlbmd0aEFkanVzdG1lbnQiLCJfc29ja2V0Q2xpZW50IiwicGlwZSIsIl9lbmNvZGVyIiwiUGxpc3RTZXJ2aWNlRW5jb2RlciIsIl9hc3NpZ25DbGllbnRGYWlsdXJlSGFuZGxlcnMiLCJyZXBseVF1ZXVlIiwib24iLCJkYXRhIiwicHVzaCIsInNlbmRQbGlzdEFuZFJlY2VpdmUiLCJqc29uIiwidGltZW91dCIsInNlbmRQbGlzdCIsInJlY2VpdmVQbGlzdCIsIkVycm9yIiwid3JpdGUiLCJCIiwicmVzb2x2ZSIsInJlamVjdCIsInF1ZXVlIiwic2hpZnQiLCJjaGVja0V4aXN0Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwic2V0VGltZW91dCIsImVuYWJsZVNlc3Npb25TU0wiLCJob3N0UHJpdmF0ZUtleSIsImhvc3RDZXJ0aWZpY2F0ZSIsInVucGlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxjQUFjLEdBQUcsSUFBSUMsYUFBM0I7QUFFQSxNQUFNQyxhQUFhLEdBQUcsRUFBdEI7O0FBRUEsTUFBTUMsWUFBTixTQUEyQkMsOEJBQTNCLENBQTZDO0FBQzNDQyxFQUFBQSxXQUFXLENBQUVDLFlBQUYsRUFBZ0I7QUFD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QUFkLENBQW1CLEtBQUtELGFBQXhCOztBQUNBLFNBQUtBLGFBQUwsQ0FBbUJDLElBQW5CLENBQXdCLEtBQUtULFNBQTdCLEVBQXdDUyxJQUF4QyxDQUE2QyxLQUFLWCxRQUFsRDtBQUNEOztBQWhFMEM7OztlQW9FOUJKLFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyB1cGdyYWRlVG9TU0wgfSBmcm9tICcuLi9zc2wtaGVscGVyJztcbmltcG9ydCBQbGlzdFNlcnZpY2VFbmNvZGVyIGZyb20gJy4vdHJhbnNmb3JtZXIvcGxpc3Qtc2VydmljZS1lbmNvZGVyJztcbmltcG9ydCBQbGlzdFNlcnZpY2VEZWNvZGVyIGZyb20gJy4vdHJhbnNmb3JtZXIvcGxpc3Qtc2VydmljZS1kZWNvZGVyJztcbmltcG9ydCBMZW5ndGhCYXNlZFNwbGl0dGVyIGZyb20gJy4uL3V0aWwvdHJhbnNmb3JtZXIvbGVuZ3RoLWJhc2VkLXNwbGl0dGVyJztcbmltcG9ydCB7IEJhc2VTZXJ2aWNlU29ja2V0IH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcbmltcG9ydCB7IE1CIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuXG5jb25zdCBNQVhfRlJBTUVfU0laRSA9IDEgKiBNQjtcblxuY29uc3QgQ0hFQ0tfRlJFUV9NUyA9IDUwO1xuXG5jbGFzcyBQbGlzdFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQpIHtcbiAgICBzdXBlcihzb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgdGhpcy5fc3BsaXR0ZXIgPSBuZXcgTGVuZ3RoQmFzZWRTcGxpdHRlcih7XG4gICAgICByZWFkYWJsZVN0cmVhbTogc29ja2V0Q2xpZW50LFxuICAgICAgbGl0dGxlRW5kaWFuOiBmYWxzZSxcbiAgICAgIG1heEZyYW1lTGVuZ3RoOiBNQVhfRlJBTUVfU0laRSxcbiAgICAgIGxlbmd0aEZpZWxkT2Zmc2V0OiAwLFxuICAgICAgbGVuZ3RoRmllbGRMZW5ndGg6IDQsXG4gICAgICBsZW5ndGhBZGp1c3RtZW50OiA0LFxuICAgIH0pO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHRoaXMuX3NwbGl0dGVyKS5waXBlKHRoaXMuX2RlY29kZXIpO1xuXG4gICAgdGhpcy5fZW5jb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VFbmNvZGVyKCk7XG4gICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgdGhpcy5fYXNzaWduQ2xpZW50RmFpbHVyZUhhbmRsZXJzKHRoaXMuX2VuY29kZXIpO1xuXG4gICAgdGhpcy5yZXBseVF1ZXVlID0gW107XG4gICAgdGhpcy5fZGVjb2Rlci5vbignZGF0YScsIChkYXRhKSA9PiB0aGlzLnJlcGx5UXVldWUucHVzaChkYXRhKSk7XG4gIH1cblxuICBhc3luYyBzZW5kUGxpc3RBbmRSZWNlaXZlIChqc29uLCB0aW1lb3V0ID0gNTAwMCkge1xuICAgIHRoaXMuc2VuZFBsaXN0KGpzb24pO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlY2VpdmVQbGlzdCh0aW1lb3V0KTtcbiAgfVxuXG4gIHNlbmRQbGlzdCAoanNvbikge1xuICAgIGlmICghanNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW50IHNlbmQgYSBudWxsIGEgb2JqZWN0Jyk7XG4gICAgfVxuICAgIHRoaXMuX2VuY29kZXIud3JpdGUoanNvbik7XG4gIH1cblxuICBhc3luYyByZWNlaXZlUGxpc3QgKHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5yZXBseVF1ZXVlO1xuICAgICAgY29uc3QgZGF0YSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBjaGVja0V4aXN0ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tFeGlzdCk7XG4gICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICB9LCBDSEVDS19GUkVRX01TKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjbGVhckludGVydmFsKGNoZWNrRXhpc3QpO1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGBGYWlsZWQgdG8gcmVjZWl2ZSBhbnkgZGF0YSB3aXRoaW4gdGhlIHRpbWVvdXQ6ICR7dGltZW91dH1gKSk7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuYWJsZVNlc3Npb25TU0wgKGhvc3RQcml2YXRlS2V5LCBob3N0Q2VydGlmaWNhdGUpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQudW5waXBlKHRoaXMuX3NwbGl0dGVyKTtcbiAgICB0aGlzLl9lbmNvZGVyLnVucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICAgIHRoaXMuX3NvY2tldENsaWVudCA9IHVwZ3JhZGVUb1NTTCh0aGlzLl9zb2NrZXRDbGllbnQsIGhvc3RQcml2YXRlS2V5LCBob3N0Q2VydGlmaWNhdGUpO1xuICAgIHRoaXMuX2VuY29kZXIucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHRoaXMuX3NwbGl0dGVyKS5waXBlKHRoaXMuX2RlY29kZXIpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBsaXN0U2VydmljZSB9O1xuZXhwb3J0IGRlZmF1bHQgUGxpc3RTZXJ2aWNlO1xuIl0sImZpbGUiOiJsaWIvcGxpc3Qtc2VydmljZS9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
