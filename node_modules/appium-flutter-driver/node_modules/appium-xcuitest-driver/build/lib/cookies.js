"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createJSCookie = createJSCookie;
exports.createJWPCookie = createJWPCookie;
exports.default = void 0;
exports.expireCookie = expireCookie;
exports.getValue = getValue;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

const log = _support.logger.getLogger('Cookie');

function convertCookie(value, converter) {
  if (value.indexOf('"') === 0) {
    value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
  }

  let parsedValue;

  try {
    parsedValue = decodeURIComponent(value.replace(/\+/g, ' '));
  } catch (e) {
    log.warn(e);
  }

  return converter ? converter(parsedValue) : parsedValue;
}

function createJSCookie(key, value, options = {}) {
  return [encodeURIComponent(key), '=', value, options.expires ? `; expires=${options.expires}` : '', options.path ? `; path=${options.path}` : '', options.domain ? `; domain=${options.domain}` : '', options.secure ? '; secure' : ''].join('');
}

function createJWPCookie(key, cookieString, converter = null) {
  let result = {};
  let cookies = cookieString ? cookieString.split('; ') : [];

  for (let cookie of cookies) {
    let parts = cookie.split('=');
    let name = decodeURIComponent(parts.shift());
    let val = parts[0];

    if (key && key === name) {
      result.name = key;
      result.value = convertCookie(val, converter);
    } else {
      result[name] = convertCookie(val, converter);
    }
  }

  return result;
}

function getValue(key, cookieString, converter = null) {
  let result = createJWPCookie(key, cookieString, converter);
  return _lodash.default.isUndefined(key) ? result : result.value;
}

function expireCookie(key, options) {
  return createJSCookie(key, '', _lodash.default.assign({}, options, {
    expires: 'Thu, 01 Jan 1970 00:00:00 GMT'
  }));
}

var _default = {
  createJSCookie,
  createJWPCookie,
  getValue,
  expireCookie
};
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb29raWVzLmpzIl0sIm5hbWVzIjpbImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImNvbnZlcnRDb29raWUiLCJ2YWx1ZSIsImNvbnZlcnRlciIsImluZGV4T2YiLCJzbGljZSIsInJlcGxhY2UiLCJwYXJzZWRWYWx1ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImUiLCJ3YXJuIiwiY3JlYXRlSlNDb29raWUiLCJrZXkiLCJvcHRpb25zIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJqb2luIiwiY3JlYXRlSldQQ29va2llIiwiY29va2llU3RyaW5nIiwicmVzdWx0IiwiY29va2llcyIsInNwbGl0IiwiY29va2llIiwicGFydHMiLCJuYW1lIiwic2hpZnQiLCJ2YWwiLCJnZXRWYWx1ZSIsIl8iLCJpc1VuZGVmaW5lZCIsImV4cGlyZUNvb2tpZSIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBT0E7O0FBQ0E7O0FBR0EsTUFBTUEsR0FBRyxHQUFHQyxnQkFBT0MsU0FBUCxDQUFpQixRQUFqQixDQUFaOztBQUlBLFNBQVNDLGFBQVQsQ0FBd0JDLEtBQXhCLEVBQStCQyxTQUEvQixFQUEwQztBQUN4QyxNQUFJRCxLQUFLLENBQUNFLE9BQU4sQ0FBYyxHQUFkLE1BQXVCLENBQTNCLEVBQThCO0FBRzVCRixJQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0csS0FBTixDQUFZLENBQVosRUFBZSxDQUFDLENBQWhCLEVBQW1CQyxPQUFuQixDQUEyQixNQUEzQixFQUFtQyxHQUFuQyxFQUF3Q0EsT0FBeEMsQ0FBZ0QsT0FBaEQsRUFBeUQsSUFBekQsQ0FBUjtBQUNEOztBQUVELE1BQUlDLFdBQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxXQUFXLEdBQUdDLGtCQUFrQixDQUFDTixLQUFLLENBQUNJLE9BQU4sQ0FBYyxLQUFkLEVBQXFCLEdBQXJCLENBQUQsQ0FBaEM7QUFDRCxHQUZELENBRUUsT0FBT0csQ0FBUCxFQUFVO0FBRVZYLElBQUFBLEdBQUcsQ0FBQ1ksSUFBSixDQUFTRCxDQUFUO0FBQ0Q7O0FBRUQsU0FBT04sU0FBUyxHQUFHQSxTQUFTLENBQUNJLFdBQUQsQ0FBWixHQUE0QkEsV0FBNUM7QUFDRDs7QUFHRCxTQUFTSSxjQUFULENBQXlCQyxHQUF6QixFQUE4QlYsS0FBOUIsRUFBcUNXLE9BQU8sR0FBRyxFQUEvQyxFQUFtRDtBQUNqRCxTQUFPLENBQ0xDLGtCQUFrQixDQUFDRixHQUFELENBRGIsRUFDb0IsR0FEcEIsRUFDeUJWLEtBRHpCLEVBRUxXLE9BQU8sQ0FBQ0UsT0FBUixHQUNLLGFBQVlGLE9BQU8sQ0FBQ0UsT0FBUSxFQURqQyxHQUVJLEVBSkMsRUFLTEYsT0FBTyxDQUFDRyxJQUFSLEdBQ0ssVUFBU0gsT0FBTyxDQUFDRyxJQUFLLEVBRDNCLEdBRUksRUFQQyxFQVFMSCxPQUFPLENBQUNJLE1BQVIsR0FDSyxZQUFXSixPQUFPLENBQUNJLE1BQU8sRUFEL0IsR0FFSSxFQVZDLEVBV0xKLE9BQU8sQ0FBQ0ssTUFBUixHQUNJLFVBREosR0FFSSxFQWJDLEVBY0xDLElBZEssQ0FjQSxFQWRBLENBQVA7QUFlRDs7QUFHRCxTQUFTQyxlQUFULENBQTBCUixHQUExQixFQUErQlMsWUFBL0IsRUFBNkNsQixTQUFTLEdBQUcsSUFBekQsRUFBK0Q7QUFDN0QsTUFBSW1CLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSUMsT0FBTyxHQUFHRixZQUFZLEdBQUdBLFlBQVksQ0FBQ0csS0FBYixDQUFtQixJQUFuQixDQUFILEdBQThCLEVBQXhEOztBQUNBLE9BQUssSUFBSUMsTUFBVCxJQUFtQkYsT0FBbkIsRUFBNEI7QUFDMUIsUUFBSUcsS0FBSyxHQUFHRCxNQUFNLENBQUNELEtBQVAsQ0FBYSxHQUFiLENBQVo7QUFHQSxRQUFJRyxJQUFJLEdBQUduQixrQkFBa0IsQ0FBQ2tCLEtBQUssQ0FBQ0UsS0FBTixFQUFELENBQTdCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHSCxLQUFLLENBQUMsQ0FBRCxDQUFmOztBQUlBLFFBQUlkLEdBQUcsSUFBSUEsR0FBRyxLQUFLZSxJQUFuQixFQUF5QjtBQUN2QkwsTUFBQUEsTUFBTSxDQUFDSyxJQUFQLEdBQWNmLEdBQWQ7QUFDQVUsTUFBQUEsTUFBTSxDQUFDcEIsS0FBUCxHQUFlRCxhQUFhLENBQUM0QixHQUFELEVBQU0xQixTQUFOLENBQTVCO0FBQ0QsS0FIRCxNQUdPO0FBQ0xtQixNQUFBQSxNQUFNLENBQUNLLElBQUQsQ0FBTixHQUFlMUIsYUFBYSxDQUFDNEIsR0FBRCxFQUFNMUIsU0FBTixDQUE1QjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT21CLE1BQVA7QUFDRDs7QUFHRCxTQUFTUSxRQUFULENBQW1CbEIsR0FBbkIsRUFBd0JTLFlBQXhCLEVBQXNDbEIsU0FBUyxHQUFHLElBQWxELEVBQXdEO0FBQ3RELE1BQUltQixNQUFNLEdBQUdGLGVBQWUsQ0FBQ1IsR0FBRCxFQUFNUyxZQUFOLEVBQW9CbEIsU0FBcEIsQ0FBNUI7QUFHQSxTQUFPNEIsZ0JBQUVDLFdBQUYsQ0FBY3BCLEdBQWQsSUFBcUJVLE1BQXJCLEdBQThCQSxNQUFNLENBQUNwQixLQUE1QztBQUNEOztBQUtELFNBQVMrQixZQUFULENBQXVCckIsR0FBdkIsRUFBNEJDLE9BQTVCLEVBQXFDO0FBRW5DLFNBQU9GLGNBQWMsQ0FBQ0MsR0FBRCxFQUFNLEVBQU4sRUFBVW1CLGdCQUFFRyxNQUFGLENBQVMsRUFBVCxFQUFhckIsT0FBYixFQUFzQjtBQUNuREUsSUFBQUEsT0FBTyxFQUFFO0FBRDBDLEdBQXRCLENBQVYsQ0FBckI7QUFHRDs7ZUFJYztBQUFFSixFQUFBQSxjQUFGO0FBQWtCUyxFQUFBQSxlQUFsQjtBQUFtQ1UsRUFBQUEsUUFBbkM7QUFBNkNHLEVBQUFBO0FBQTdDLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogZGVyaXZlZCBmcm9tIGpRdWVyeSBDb29raWUgUGx1Z2luIHYxLjQuMVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhcmhhcnRsL2pxdWVyeS1jb29raWVcbiAqL1xuXG4vLyBuZWVkZWQgdG8gY29tbXVuaWNhdGUvdHJhbnNsYXRlIGJldHdlZW4gSlNPTldpcmUgY29va2llcyBhbmQgcmVndWxhciBKYXZhU2NyaXB0IGNvb2tpZXNcblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5cblxuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignQ29va2llJyk7XG5cbi8vIHBhcnNlcyB0aGUgdmFsdWUgaWYgbmVlZGVkIGFuZCBjb252ZXJ0cyB0aGUgdmFsdWUgaWYgYSBjb252ZXJ0ZXIgaXMgcHJvdmlkZWRcbi8vIGludGVybmFsIGZ1bmN0aW9uLCBub3QgZXhwb3J0ZWRcbmZ1bmN0aW9uIGNvbnZlcnRDb29raWUgKHZhbHVlLCBjb252ZXJ0ZXIpIHtcbiAgaWYgKHZhbHVlLmluZGV4T2YoJ1wiJykgPT09IDApIHtcbiAgICAvLyB0aGlzIGlzIGEgcXVvdGVkIGNvb2tpZWQgYWNjb3JkaW5nIHRvIFJGQzIwNjhcbiAgICAvLyByZW1vdmUgZW5jbG9zaW5nIHF1b3RlcyBhbmQgaW50ZXJuYWwgcXVvdGVzIGFuZCBiYWNrc2xhc2hlc1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSwgLTEpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKS5yZXBsYWNlKC9cXFxcXFxcXC9nLCAnXFxcXCcpO1xuICB9XG5cbiAgbGV0IHBhcnNlZFZhbHVlO1xuICB0cnkge1xuICAgIHBhcnNlZFZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vIG5lZWQgdG8gZmFpbCBpZiB3ZSBjYW4ndCBkZWNvZGVcbiAgICBsb2cud2FybihlKTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZXIgPyBjb252ZXJ0ZXIocGFyc2VkVmFsdWUpIDogcGFyc2VkVmFsdWU7XG59XG5cbi8vIHRha2VzIGFyZ3VtZW50cyBnaXZlbiBhbmQgY3JlYXRlcyBhIEphdmFTY3JpcHQgQ29va2llXG5mdW5jdGlvbiBjcmVhdGVKU0Nvb2tpZSAoa2V5LCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBbXG4gICAgZW5jb2RlVVJJQ29tcG9uZW50KGtleSksICc9JywgdmFsdWUsXG4gICAgb3B0aW9ucy5leHBpcmVzXG4gICAgICA/IGA7IGV4cGlyZXM9JHtvcHRpb25zLmV4cGlyZXN9YFxuICAgICAgOiAnJyxcbiAgICBvcHRpb25zLnBhdGhcbiAgICAgID8gYDsgcGF0aD0ke29wdGlvbnMucGF0aH1gXG4gICAgICA6ICcnLFxuICAgIG9wdGlvbnMuZG9tYWluXG4gICAgICA/IGA7IGRvbWFpbj0ke29wdGlvbnMuZG9tYWlufWBcbiAgICAgIDogJycsXG4gICAgb3B0aW9ucy5zZWN1cmVcbiAgICAgID8gJzsgc2VjdXJlJ1xuICAgICAgOiAnJ1xuICBdLmpvaW4oJycpO1xufVxuXG4vLyB0YWtlcyB0aGUgSmF2YVNjcmlwdCBjb29raWVTdHJpbmcgYW5kIHRyYW5zbGF0ZXMgaXQgaW50byBhIEpTT05XaXJlIGZvcm1hdHRlZCBjb29raWVcbmZ1bmN0aW9uIGNyZWF0ZUpXUENvb2tpZSAoa2V5LCBjb29raWVTdHJpbmcsIGNvbnZlcnRlciA9IG51bGwpIHtcbiAgbGV0IHJlc3VsdCA9IHt9O1xuICBsZXQgY29va2llcyA9IGNvb2tpZVN0cmluZyA/IGNvb2tpZVN0cmluZy5zcGxpdCgnOyAnKSA6IFtdO1xuICBmb3IgKGxldCBjb29raWUgb2YgY29va2llcykge1xuICAgIGxldCBwYXJ0cyA9IGNvb2tpZS5zcGxpdCgnPScpO1xuXG4gICAgLy8gZ2V0IHRoZSBmaXJzdCBhbmQgc2Vjb25kIGVsZW1lbnQgYXMgbmFtZSBhbmQgdmFsdWVcbiAgICBsZXQgbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0cy5zaGlmdCgpKTtcbiAgICBsZXQgdmFsID0gcGFydHNbMF07XG5cbiAgICAvLyBpZiBuYW1lIGlzIGtleSwgdGhpcyBpcyB0aGUgY2VudHJhbCBlbGVtZW50IG9mIHRoZSBjb29raWUsIHNvIGFkZCBhcyBgbmFtZWBcbiAgICAvLyBvdGhlcndpc2UgaXQgaXMgYW4gb3B0aW9uYWwgZWxlbWVudFxuICAgIGlmIChrZXkgJiYga2V5ID09PSBuYW1lKSB7XG4gICAgICByZXN1bHQubmFtZSA9IGtleTtcbiAgICAgIHJlc3VsdC52YWx1ZSA9IGNvbnZlcnRDb29raWUodmFsLCBjb252ZXJ0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbbmFtZV0gPSBjb252ZXJ0Q29va2llKHZhbCwgY29udmVydGVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gdGFrZXMgYSBKYXZhU2NyaXB0IGNvb2tpZXN0cmluZyBhbmQgcGFyc2VzIGl0IGZvciB0aGUgdmFsdWUgZ2l2ZW4gdGhlIGtleVxuZnVuY3Rpb24gZ2V0VmFsdWUgKGtleSwgY29va2llU3RyaW5nLCBjb252ZXJ0ZXIgPSBudWxsKSB7XG4gIGxldCByZXN1bHQgPSBjcmVhdGVKV1BDb29raWUoa2V5LCBjb29raWVTdHJpbmcsIGNvbnZlcnRlcik7XG5cbiAgLy8gaWYgYGtleWAgaXMgdW5kZWZpbmVkIHdlIHdhbnQgdGhlIGVudGlyZSBjb29raWVcbiAgcmV0dXJuIF8uaXNVbmRlZmluZWQoa2V5KSA/IHJlc3VsdCA6IHJlc3VsdC52YWx1ZTtcbn1cblxuXG4vLyByZXR1cm5zIGEgY29va2llIHRoYXQgZXhwaXJlcyBvbiAwMSBKYW4gMTk3MFxuLy8gYXNzaWduIHRoZSByZXR1cm5lZCBjb29raWUgdG8gYW4gZXhpc3RpbmcgY29va2llIHRvIGRlbGV0ZSB0aGF0IGNvb2tpZVxuZnVuY3Rpb24gZXhwaXJlQ29va2llIChrZXksIG9wdGlvbnMpIHtcbiAgLy8gb3ZlcnJpZGUgYGV4cGlyZXNgIGluIGBvcHRpb25zYCwgYW5kIHRoZW4gbWFrZSB0aGUgY29va2llXG4gIHJldHVybiBjcmVhdGVKU0Nvb2tpZShrZXksICcnLCBfLmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgIGV4cGlyZXM6ICdUaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVCdcbiAgfSkpO1xufVxuXG4vLyBleHBvcnQgaW5kaXZpZHVhbGx5IGFuZCBhbHNvIChhcyBkZWZhdWx0KSBhcyBhbiBvYmplY3RcbmV4cG9ydCB7IGNyZWF0ZUpTQ29va2llLCBjcmVhdGVKV1BDb29raWUsIGdldFZhbHVlLCBleHBpcmVDb29raWUgfTtcbmV4cG9ydCBkZWZhdWx0IHsgY3JlYXRlSlNDb29raWUsIGNyZWF0ZUpXUENvb2tpZSwgZ2V0VmFsdWUsIGV4cGlyZUNvb2tpZSB9O1xuIl0sImZpbGUiOiJsaWIvY29va2llcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
