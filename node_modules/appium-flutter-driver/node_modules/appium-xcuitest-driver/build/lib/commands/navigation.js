"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _baseDriver = require("@appium/base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _asyncbox = require("asyncbox");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const CLOSE_WINDOW_TIMEOUT = 5000;
const CLOSE_WINDOW_INTERVAL = 100;

commands.back = async function back() {
  if (!this.isWebContext()) {
    await this.nativeBack();
  } else {
    await this.mobileWebNav('back');
  }
};

helpers.nativeBack = async function nativeBack() {
  try {
    let navBar = await this.findNativeElementOrElements('class name', 'XCUIElementTypeNavigationBar', false);
    let buttons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, navBar);

    if (buttons.length === 0) {
      throw new Error('No buttons found in navigation bar');
    }

    let backButton = _lodash.default.filter(buttons, value => value.label === 'Back')[0];

    if (backButton) {
      _logger.default.debug(`Found navigation bar 'back' button. Clicking.`);
    } else {
      _logger.default.debug(`Unable to find 'Back' button. Trying first button in navigation bar`);

      backButton = buttons[0];
    }

    await this.nativeClick(backButton);
  } catch (err) {
    _logger.default.error(`Unable to find navigation bar and back button: ${err.message}`);
  }
};

commands.forward = async function forward() {
  if (!this.isWebContext()) {}

  await this.mobileWebNav('forward');
};

commands.closeWindow = async function closeWindow() {
  if (!this.isWebContext()) {
    throw new _baseDriver.errors.NotImplementedError();
  }

  const script = `setTimeout(function () {window.open('','_self').close();}, 0); return true;`;
  const context = this.curContext;

  try {
    return await this.executeAtom('execute_script', [script, []], true);
  } finally {
    try {
      await (0, _asyncbox.waitForCondition)(() => this.curContext !== context, {
        waitMs: CLOSE_WINDOW_TIMEOUT,
        intervalMs: CLOSE_WINDOW_INTERVAL
      });
    } catch (ign) {
      _logger.default.debug('Context has not yet been changed after closing window. Continuing...');
    }
  }
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9uYXZpZ2F0aW9uLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJDTE9TRV9XSU5ET1dfVElNRU9VVCIsIkNMT1NFX1dJTkRPV19JTlRFUlZBTCIsImJhY2siLCJpc1dlYkNvbnRleHQiLCJuYXRpdmVCYWNrIiwibW9iaWxlV2ViTmF2IiwibmF2QmFyIiwiZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzIiwiYnV0dG9ucyIsImxlbmd0aCIsIkVycm9yIiwiYmFja0J1dHRvbiIsIl8iLCJmaWx0ZXIiLCJ2YWx1ZSIsImxhYmVsIiwibG9nIiwiZGVidWciLCJuYXRpdmVDbGljayIsImVyciIsImVycm9yIiwibWVzc2FnZSIsImZvcndhcmQiLCJjbG9zZVdpbmRvdyIsImVycm9ycyIsIk5vdEltcGxlbWVudGVkRXJyb3IiLCJzY3JpcHQiLCJjb250ZXh0IiwiY3VyQ29udGV4dCIsImV4ZWN1dGVBdG9tIiwid2FpdE1zIiwiaW50ZXJ2YWxNcyIsImlnbiIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7QUFHQSxNQUFNQyxvQkFBb0IsR0FBRyxJQUE3QjtBQUNBLE1BQU1DLHFCQUFxQixHQUFHLEdBQTlCOztBQUVBSixRQUFRLENBQUNLLElBQVQsR0FBZ0IsZUFBZUEsSUFBZixHQUF1QjtBQUNyQyxNQUFJLENBQUMsS0FBS0MsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sS0FBS0MsVUFBTCxFQUFOO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsVUFBTSxLQUFLQyxZQUFMLENBQWtCLE1BQWxCLENBQU47QUFDRDtBQUNGLENBTkQ7O0FBUUFQLE9BQU8sQ0FBQ00sVUFBUixHQUFxQixlQUFlQSxVQUFmLEdBQTZCO0FBQ2hELE1BQUk7QUFDRixRQUFJRSxNQUFNLEdBQUcsTUFBTSxLQUFLQywyQkFBTCxDQUFpQyxZQUFqQyxFQUErQyw4QkFBL0MsRUFBK0UsS0FBL0UsQ0FBbkI7QUFDQSxRQUFJQyxPQUFPLEdBQUcsTUFBTSxLQUFLRCwyQkFBTCxDQUFpQyxZQUFqQyxFQUErQyx1QkFBL0MsRUFBd0UsSUFBeEUsRUFBOEVELE1BQTlFLENBQXBCOztBQUNBLFFBQUlFLE9BQU8sQ0FBQ0MsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixZQUFNLElBQUlDLEtBQUosQ0FBVSxvQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSUMsVUFBVSxHQUFHQyxnQkFBRUMsTUFBRixDQUFTTCxPQUFULEVBQW1CTSxLQUFELElBQVdBLEtBQUssQ0FBQ0MsS0FBTixLQUFnQixNQUE3QyxFQUFxRCxDQUFyRCxDQUFqQjs7QUFDQSxRQUFJSixVQUFKLEVBQWdCO0FBQ2RLLHNCQUFJQyxLQUFKLENBQVcsK0NBQVg7QUFDRCxLQUZELE1BRU87QUFDTEQsc0JBQUlDLEtBQUosQ0FBVyxxRUFBWDs7QUFDQU4sTUFBQUEsVUFBVSxHQUFHSCxPQUFPLENBQUMsQ0FBRCxDQUFwQjtBQUNEOztBQUNELFVBQU0sS0FBS1UsV0FBTCxDQUFpQlAsVUFBakIsQ0FBTjtBQUNELEdBZkQsQ0FlRSxPQUFPUSxHQUFQLEVBQVk7QUFDWkgsb0JBQUlJLEtBQUosQ0FBVyxrREFBaURELEdBQUcsQ0FBQ0UsT0FBUSxFQUF4RTtBQUNEO0FBQ0YsQ0FuQkQ7O0FBcUJBeEIsUUFBUSxDQUFDeUIsT0FBVCxHQUFtQixlQUFlQSxPQUFmLEdBQTBCO0FBQzNDLE1BQUksQ0FBQyxLQUFLbkIsWUFBTCxFQUFMLEVBQTBCLENBQ3pCOztBQUNELFFBQU0sS0FBS0UsWUFBTCxDQUFrQixTQUFsQixDQUFOO0FBQ0QsQ0FKRDs7QUFNQVIsUUFBUSxDQUFDMEIsV0FBVCxHQUF1QixlQUFlQSxXQUFmLEdBQThCO0FBQ25ELE1BQUksQ0FBQyxLQUFLcEIsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSXFCLG1CQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBSUQsUUFBTUMsTUFBTSxHQUFJLDZFQUFoQjtBQUNBLFFBQU1DLE9BQU8sR0FBRyxLQUFLQyxVQUFyQjs7QUFDQSxNQUFJO0FBQ0YsV0FBTyxNQUFNLEtBQUtDLFdBQUwsQ0FBaUIsZ0JBQWpCLEVBQW1DLENBQUNILE1BQUQsRUFBUyxFQUFULENBQW5DLEVBQWlELElBQWpELENBQWI7QUFDRCxHQUZELFNBRVU7QUFFUixRQUFJO0FBQ0YsWUFBTSxnQ0FBaUIsTUFBTSxLQUFLRSxVQUFMLEtBQW9CRCxPQUEzQyxFQUFvRDtBQUN4REcsUUFBQUEsTUFBTSxFQUFFOUIsb0JBRGdEO0FBRXhEK0IsUUFBQUEsVUFBVSxFQUFFOUI7QUFGNEMsT0FBcEQsQ0FBTjtBQUlELEtBTEQsQ0FLRSxPQUFPK0IsR0FBUCxFQUFZO0FBQ1poQixzQkFBSUMsS0FBSixDQUFVLHNFQUFWO0FBQ0Q7QUFDRjtBQUNGLENBdEJEOztBQXlCQWdCLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjbkMsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbi8vIHRoZXNlIHR3byBjb25zdGl0dXRlIHRoZSB3YWl0IGFmdGVyIGNsb3NpbmcgYSB3aW5kb3dcbmNvbnN0IENMT1NFX1dJTkRPV19USU1FT1VUID0gNTAwMDtcbmNvbnN0IENMT1NFX1dJTkRPV19JTlRFUlZBTCA9IDEwMDtcblxuY29tbWFuZHMuYmFjayA9IGFzeW5jIGZ1bmN0aW9uIGJhY2sgKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBhd2FpdCB0aGlzLm5hdGl2ZUJhY2soKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLm1vYmlsZVdlYk5hdignYmFjaycpO1xuICB9XG59O1xuXG5oZWxwZXJzLm5hdGl2ZUJhY2sgPSBhc3luYyBmdW5jdGlvbiBuYXRpdmVCYWNrICgpIHtcbiAgdHJ5IHtcbiAgICBsZXQgbmF2QmFyID0gYXdhaXQgdGhpcy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMoJ2NsYXNzIG5hbWUnLCAnWENVSUVsZW1lbnRUeXBlTmF2aWdhdGlvbkJhcicsIGZhbHNlKTtcbiAgICBsZXQgYnV0dG9ucyA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZUJ1dHRvbicsIHRydWUsIG5hdkJhcik7XG4gICAgaWYgKGJ1dHRvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGJ1dHRvbnMgZm91bmQgaW4gbmF2aWdhdGlvbiBiYXInKTtcbiAgICB9XG5cbiAgICBsZXQgYmFja0J1dHRvbiA9IF8uZmlsdGVyKGJ1dHRvbnMsICh2YWx1ZSkgPT4gdmFsdWUubGFiZWwgPT09ICdCYWNrJylbMF07XG4gICAgaWYgKGJhY2tCdXR0b24pIHtcbiAgICAgIGxvZy5kZWJ1ZyhgRm91bmQgbmF2aWdhdGlvbiBiYXIgJ2JhY2snIGJ1dHRvbi4gQ2xpY2tpbmcuYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5kZWJ1ZyhgVW5hYmxlIHRvIGZpbmQgJ0JhY2snIGJ1dHRvbi4gVHJ5aW5nIGZpcnN0IGJ1dHRvbiBpbiBuYXZpZ2F0aW9uIGJhcmApO1xuICAgICAgYmFja0J1dHRvbiA9IGJ1dHRvbnNbMF07XG4gICAgfVxuICAgIGF3YWl0IHRoaXMubmF0aXZlQ2xpY2soYmFja0J1dHRvbik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvcihgVW5hYmxlIHRvIGZpbmQgbmF2aWdhdGlvbiBiYXIgYW5kIGJhY2sgYnV0dG9uOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5jb21tYW5kcy5mb3J3YXJkID0gYXN5bmMgZnVuY3Rpb24gZm9yd2FyZCAoKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICB9XG4gIGF3YWl0IHRoaXMubW9iaWxlV2ViTmF2KCdmb3J3YXJkJyk7XG59O1xuXG5jb21tYW5kcy5jbG9zZVdpbmRvdyA9IGFzeW5jIGZ1bmN0aW9uIGNsb3NlV2luZG93ICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICAvLyBzaW5jZSB0aGUgd2luZG93IHdpbGwgYmUgY2xvc2VkIGFuZCB0aGUgZXhlY3V0aW9uIGNvbnRleHQgZ29uZSwgcmV0dXJuXG4gIC8vIGZpcnN0IGJlZm9yZSBjbG9zaW5nLiBXYWl0aW5nIGZvciBjbG9zZSB3aWxsIGhhcHBlbiBpbiB0aGUgZmluYWxseSBibG9ja1xuICBjb25zdCBzY3JpcHQgPSBgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7d2luZG93Lm9wZW4oJycsJ19zZWxmJykuY2xvc2UoKTt9LCAwKTsgcmV0dXJuIHRydWU7YDtcbiAgY29uc3QgY29udGV4dCA9IHRoaXMuY3VyQ29udGV4dDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZXhlY3V0ZV9zY3JpcHQnLCBbc2NyaXB0LCBbXV0sIHRydWUpO1xuICB9IGZpbmFsbHkge1xuICAgIC8vIHdhaXQgZm9yIHRoZSB3aW5kb3cgdG8gc3VjY2Vzc2Z1bGx5IGNoYW5nZS4uLlxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKCgpID0+IHRoaXMuY3VyQ29udGV4dCAhPT0gY29udGV4dCwge1xuICAgICAgICB3YWl0TXM6IENMT1NFX1dJTkRPV19USU1FT1VULFxuICAgICAgICBpbnRlcnZhbE1zOiBDTE9TRV9XSU5ET1dfSU5URVJWQUwsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChpZ24pIHtcbiAgICAgIGxvZy5kZWJ1ZygnQ29udGV4dCBoYXMgbm90IHlldCBiZWVuIGNoYW5nZWQgYWZ0ZXIgY2xvc2luZyB3aW5kb3cuIENvbnRpbnVpbmcuLi4nKTtcbiAgICB9XG4gIH1cbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL25hdmlnYXRpb24uanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
