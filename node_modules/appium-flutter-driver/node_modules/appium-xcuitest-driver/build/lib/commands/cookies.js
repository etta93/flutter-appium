"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _baseDriver = require("@appium/base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getCookies = async function getCookies() {
  if (!this.isWebContext()) {
    throw new _baseDriver.errors.NotImplementedError();
  }

  const cookies = (await this.remote.getCookies()) || {
    cookies: []
  };
  const decodedCookieValues = cookies.cookies.map(cookie => {
    try {
      return decodeURI(cookie.value);
    } catch (error) {
      _logger.default.debug(`Cookie ${cookie.name} was not decoded successfully. Cookie value: ${cookie.value}`);

      _logger.default.warn(error);

      return undefined;
    }
  });
  return _lodash.default.zip(cookies.cookies, decodedCookieValues).filter(([, value]) => !_lodash.default.isUndefined(value)).map(([cookie, value]) => Object.assign({}, cookie, {
    value
  }));
};

commands.deleteCookie = async function deleteCookie(cookieName) {
  if (!this.isWebContext()) {
    throw new _baseDriver.errors.NotImplementedError();
  }

  const cookies = await this.getCookies();
  const cookie = cookies.find(cookie => cookie.name === cookieName);

  if (!cookie) {
    _logger.default.debug(`Cookie '${cookieName}' not found. Ignoring.`);

    return true;
  }

  await this._deleteCookie(cookie);
  return true;
};

commands.deleteCookies = async function deleteCookies() {
  if (!this.isWebContext()) {
    throw new _baseDriver.errors.NotImplementedError();
  }

  const cookies = await this.getCookies();

  for (const cookie of cookies) {
    await this._deleteCookie(cookie);
  }

  return true;
};

helpers._deleteCookie = async function _deleteCookie(cookie) {
  const url = `http${cookie.secure ? 's' : ''}://${cookie.domain}${cookie.path}`;
  return await this.remote.deleteCookie(cookie.name, url);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb29raWVzLmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiaGVscGVycyIsImV4dGVuc2lvbnMiLCJnZXRDb29raWVzIiwiaXNXZWJDb250ZXh0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNvb2tpZXMiLCJyZW1vdGUiLCJkZWNvZGVkQ29va2llVmFsdWVzIiwibWFwIiwiY29va2llIiwiZGVjb2RlVVJJIiwidmFsdWUiLCJlcnJvciIsImxvZyIsImRlYnVnIiwibmFtZSIsIndhcm4iLCJ1bmRlZmluZWQiLCJfIiwiemlwIiwiZmlsdGVyIiwiaXNVbmRlZmluZWQiLCJPYmplY3QiLCJhc3NpZ24iLCJkZWxldGVDb29raWUiLCJjb29raWVOYW1lIiwiZmluZCIsIl9kZWxldGVDb29raWUiLCJkZWxldGVDb29raWVzIiwidXJsIiwic2VjdXJlIiwiZG9tYWluIiwicGF0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxJQUFJQSxRQUFRLEdBQUcsRUFBZjtBQUFBLElBQW1CQyxPQUFPLEdBQUcsRUFBN0I7QUFBQSxJQUFpQ0MsVUFBVSxHQUFHLEVBQTlDOzs7O0FBRUFGLFFBQVEsQ0FBQ0csVUFBVCxHQUFzQixlQUFlQSxVQUFmLEdBQTZCO0FBQ2pELE1BQUksQ0FBQyxLQUFLQyxZQUFMLEVBQUwsRUFBMEI7QUFDeEIsVUFBTSxJQUFJQyxtQkFBT0MsbUJBQVgsRUFBTjtBQUNEOztBQUdELFFBQU1DLE9BQU8sR0FBRyxPQUFNLEtBQUtDLE1BQUwsQ0FBWUwsVUFBWixFQUFOLEtBQWtDO0FBQUNJLElBQUFBLE9BQU8sRUFBRTtBQUFWLEdBQWxEO0FBR0EsUUFBTUUsbUJBQW1CLEdBQUdGLE9BQU8sQ0FBQ0EsT0FBUixDQUFnQkcsR0FBaEIsQ0FBcUJDLE1BQUQsSUFBWTtBQUMxRCxRQUFJO0FBQ0YsYUFBT0MsU0FBUyxDQUFDRCxNQUFNLENBQUNFLEtBQVIsQ0FBaEI7QUFDRCxLQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ2RDLHNCQUFJQyxLQUFKLENBQVcsVUFBU0wsTUFBTSxDQUFDTSxJQUFLLGdEQUErQ04sTUFBTSxDQUFDRSxLQUFNLEVBQTVGOztBQUNBRSxzQkFBSUcsSUFBSixDQUFTSixLQUFUOztBQUNBLGFBQU9LLFNBQVA7QUFDRDtBQUNGLEdBUjJCLENBQTVCO0FBV0EsU0FBT0MsZ0JBQUVDLEdBQUYsQ0FBTWQsT0FBTyxDQUFDQSxPQUFkLEVBQXVCRSxtQkFBdkIsRUFDSmEsTUFESSxDQUNHLENBQUMsR0FBR1QsS0FBSCxDQUFELEtBQWUsQ0FBQ08sZ0JBQUVHLFdBQUYsQ0FBY1YsS0FBZCxDQURuQixFQUVKSCxHQUZJLENBRUEsQ0FBQyxDQUFDQyxNQUFELEVBQVNFLEtBQVQsQ0FBRCxLQUFxQlcsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQmQsTUFBbEIsRUFBMEI7QUFBQ0UsSUFBQUE7QUFBRCxHQUExQixDQUZyQixDQUFQO0FBR0QsQ0F2QkQ7O0FBeUJBYixRQUFRLENBQUMwQixZQUFULEdBQXdCLGVBQWVBLFlBQWYsQ0FBNkJDLFVBQTdCLEVBQXlDO0FBQy9ELE1BQUksQ0FBQyxLQUFLdkIsWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSUMsbUJBQU9DLG1CQUFYLEVBQU47QUFDRDs7QUFFRCxRQUFNQyxPQUFPLEdBQUcsTUFBTSxLQUFLSixVQUFMLEVBQXRCO0FBQ0EsUUFBTVEsTUFBTSxHQUFHSixPQUFPLENBQUNxQixJQUFSLENBQWNqQixNQUFELElBQVlBLE1BQU0sQ0FBQ00sSUFBUCxLQUFnQlUsVUFBekMsQ0FBZjs7QUFDQSxNQUFJLENBQUNoQixNQUFMLEVBQWE7QUFDWEksb0JBQUlDLEtBQUosQ0FBVyxXQUFVVyxVQUFXLHdCQUFoQzs7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNLEtBQUtFLGFBQUwsQ0FBbUJsQixNQUFuQixDQUFOO0FBQ0EsU0FBTyxJQUFQO0FBQ0QsQ0FkRDs7QUFnQkFYLFFBQVEsQ0FBQzhCLGFBQVQsR0FBeUIsZUFBZUEsYUFBZixHQUFnQztBQUN2RCxNQUFJLENBQUMsS0FBSzFCLFlBQUwsRUFBTCxFQUEwQjtBQUN4QixVQUFNLElBQUlDLG1CQUFPQyxtQkFBWCxFQUFOO0FBQ0Q7O0FBRUQsUUFBTUMsT0FBTyxHQUFHLE1BQU0sS0FBS0osVUFBTCxFQUF0Qjs7QUFDQSxPQUFLLE1BQU1RLE1BQVgsSUFBcUJKLE9BQXJCLEVBQThCO0FBQzVCLFVBQU0sS0FBS3NCLGFBQUwsQ0FBbUJsQixNQUFuQixDQUFOO0FBQ0Q7O0FBQ0QsU0FBTyxJQUFQO0FBQ0QsQ0FWRDs7QUFZQVYsT0FBTyxDQUFDNEIsYUFBUixHQUF3QixlQUFlQSxhQUFmLENBQThCbEIsTUFBOUIsRUFBc0M7QUFDNUQsUUFBTW9CLEdBQUcsR0FBSSxPQUFNcEIsTUFBTSxDQUFDcUIsTUFBUCxHQUFnQixHQUFoQixHQUFzQixFQUFHLE1BQUtyQixNQUFNLENBQUNzQixNQUFPLEdBQUV0QixNQUFNLENBQUN1QixJQUFLLEVBQTdFO0FBQ0EsU0FBTyxNQUFNLEtBQUsxQixNQUFMLENBQVlrQixZQUFaLENBQXlCZixNQUFNLENBQUNNLElBQWhDLEVBQXNDYyxHQUF0QyxDQUFiO0FBQ0QsQ0FIRDs7QUFLQVAsTUFBTSxDQUFDQyxNQUFQLENBQWN2QixVQUFkLEVBQTBCRixRQUExQixFQUFvQ0MsT0FBcEM7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmdldENvb2tpZXMgPSBhc3luYyBmdW5jdGlvbiBnZXRDb29raWVzICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICAvLyBnZXQgdGhlIGNvb2tpZXMgZnJvbSB0aGUgcmVtb3RlIGRlYnVnZ2VyLCBvciBhbiBlbXB0eSBvYmplY3RcbiAgY29uc3QgY29va2llcyA9IGF3YWl0IHRoaXMucmVtb3RlLmdldENvb2tpZXMoKSB8fCB7Y29va2llczogW119O1xuXG4gIC8vIHRoZSB2YWx1ZSBpcyBVUkkgZW5jb2RlZCwgc28gZGVjb2RlIGl0IHNhZmVseVxuICBjb25zdCBkZWNvZGVkQ29va2llVmFsdWVzID0gY29va2llcy5jb29raWVzLm1hcCgoY29va2llKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBkZWNvZGVVUkkoY29va2llLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmRlYnVnKGBDb29raWUgJHtjb29raWUubmFtZX0gd2FzIG5vdCBkZWNvZGVkIHN1Y2Nlc3NmdWxseS4gQ29va2llIHZhbHVlOiAke2Nvb2tpZS52YWx1ZX1gKTtcbiAgICAgIGxvZy53YXJuKGVycm9yKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9KTtcblxuICAvLyB6aXAgY29va2VzIHdpdGggZGVjb2RlZCB2YWx1ZSwgcmVtb3ZpbmcgdW5kZWZpbmVkIGNvb2tpZSB2YWx1ZXNcbiAgcmV0dXJuIF8uemlwKGNvb2tpZXMuY29va2llcywgZGVjb2RlZENvb2tpZVZhbHVlcylcbiAgICAuZmlsdGVyKChbLCB2YWx1ZV0pID0+ICFfLmlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICAubWFwKChbY29va2llLCB2YWx1ZV0pID0+IE9iamVjdC5hc3NpZ24oe30sIGNvb2tpZSwge3ZhbHVlfSkpO1xufTtcblxuY29tbWFuZHMuZGVsZXRlQ29va2llID0gYXN5bmMgZnVuY3Rpb24gZGVsZXRlQ29va2llIChjb29raWVOYW1lKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgY29uc3QgY29va2llcyA9IGF3YWl0IHRoaXMuZ2V0Q29va2llcygpO1xuICBjb25zdCBjb29raWUgPSBjb29raWVzLmZpbmQoKGNvb2tpZSkgPT4gY29va2llLm5hbWUgPT09IGNvb2tpZU5hbWUpO1xuICBpZiAoIWNvb2tpZSkge1xuICAgIGxvZy5kZWJ1ZyhgQ29va2llICcke2Nvb2tpZU5hbWV9JyBub3QgZm91bmQuIElnbm9yaW5nLmApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXdhaXQgdGhpcy5fZGVsZXRlQ29va2llKGNvb2tpZSk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29tbWFuZHMuZGVsZXRlQ29va2llcyA9IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUNvb2tpZXMgKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoKTtcbiAgfVxuXG4gIGNvbnN0IGNvb2tpZXMgPSBhd2FpdCB0aGlzLmdldENvb2tpZXMoKTtcbiAgZm9yIChjb25zdCBjb29raWUgb2YgY29va2llcykge1xuICAgIGF3YWl0IHRoaXMuX2RlbGV0ZUNvb2tpZShjb29raWUpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuaGVscGVycy5fZGVsZXRlQ29va2llID0gYXN5bmMgZnVuY3Rpb24gX2RlbGV0ZUNvb2tpZSAoY29va2llKSB7XG4gIGNvbnN0IHVybCA9IGBodHRwJHtjb29raWUuc2VjdXJlID8gJ3MnIDogJyd9Oi8vJHtjb29raWUuZG9tYWlufSR7Y29va2llLnBhdGh9YDtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucmVtb3RlLmRlbGV0ZUNvb2tpZShjb29raWUubmFtZSwgdXJsKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9jb29raWVzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
