"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _cssConverter = _interopRequireDefault(require("../css-converter"));

var _baseDriver = require("@appium/base-driver");

var _support = require("@appium/support");

var _logger = _interopRequireDefault(require("../logger"));

const MAGIC_FIRST_VIS_CHILD_SEL = /\/\*\[@firstVisible\s*=\s*('|")true\1\]/;
const MAGIC_SCROLLABLE_SEL = /\/\/\*\[@scrollable\s*=\s*('|")true\1\]/;
const WDA_CLASS_CHAIN_STRATEGY = 'class chain';
let helpers = {},
    commands = {},
    extensions = {};
exports.commands = commands;
exports.helpers = helpers;

helpers.findElOrEls = async function findElOrEls(strategy, selector, mult, context) {
  if (this.isWebview()) {
    return await this.findWebElementOrElements(strategy, selector, mult, context);
  } else {
    return await this.findNativeElementOrElements(strategy, selector, mult, context);
  }
};

helpers.findNativeElementOrElements = async function findNativeElementOrElements(strategy, selector, mult, context) {
  const initSelector = selector;
  let rewroteSelector = false;

  if (strategy === '-ios predicate string') {
    strategy = 'predicate string';
  } else if (strategy === '-ios class chain') {
    strategy = WDA_CLASS_CHAIN_STRATEGY;
  } else if (strategy === 'css selector') {
    strategy = WDA_CLASS_CHAIN_STRATEGY;
    selector = _cssConverter.default.toIosClassChainSelector(selector);
  }

  function stripViewFromSelector(selector) {
    const keepView = ['XCUIElementTypeScrollView', 'XCUIElementTypeCollectionView', 'XCUIElementTypeTextView', 'XCUIElementTypeWebView'].includes(selector);

    if (!keepView && selector.indexOf('View') === selector.length - 4) {
      return selector.substr(0, selector.length - 4);
    } else {
      return selector;
    }
  }

  if (strategy === 'class name') {
    if (selector.startsWith('UIA')) {
      selector = selector.substring(3);
    }

    if (!selector.startsWith('XCUIElementType')) {
      selector = stripViewFromSelector(`XCUIElementType${selector}`);
      rewroteSelector = true;
    }
  }

  if (strategy === 'xpath' && MAGIC_FIRST_VIS_CHILD_SEL.test(selector)) {
    return await this.getFirstVisibleChild(mult, context);
  } else if (strategy === 'xpath' && MAGIC_SCROLLABLE_SEL.test(selector)) {
    [strategy, selector] = rewriteMagicScrollable(mult);
  } else if (strategy === 'xpath') {
    selector = selector.replace(/(^|\/)(UIA)([^[/]+)/g, (str, g1, g2, g3) => {
      rewroteSelector = true;
      return g1 + stripViewFromSelector(`XCUIElementType${g3}`);
    });
  }

  if (rewroteSelector) {
    _logger.default.info(`Rewrote incoming selector from '${initSelector}' to ` + `'${selector}' to match XCUI type. You should consider ` + `updating your tests to use the new selectors directly`);
  }

  return await this.doNativeFind(strategy, selector, mult, context);
};

helpers.doNativeFind = async function doNativeFind(strategy, selector, mult, context) {
  context = _support.util.unwrapElement(context);
  let endpoint = `/element${context ? `/${context}/element` : ''}${mult ? 's' : ''}`;
  let body = {
    using: strategy,
    value: selector
  };
  let method = 'POST';
  let els;

  try {
    await this.implicitWaitForCondition(async () => {
      try {
        els = await this.proxyCommand(endpoint, method, body);
      } catch (err) {
        els = [];
      }

      return !_lodash.default.isEmpty(els);
    });
  } catch (err) {
    if (err.message && err.message.match(/Condition unmet/)) {
      els = [];
    } else {
      throw err;
    }
  }

  if (mult) {
    return els;
  }

  if (_lodash.default.isEmpty(els)) {
    throw new _baseDriver.errors.NoSuchElementError();
  }

  return els;
};

helpers.getFirstVisibleChild = async function getFirstVisibleChild(mult, context) {
  _logger.default.info(`Getting first visible child`);

  if (mult) {
    throw new Error('Cannot get multiple first visible children!');
  }

  if (!context) {
    throw new Error('Cannot get first visible child without a context element');
  }

  let index = 1;

  while (true) {
    const strategy = WDA_CLASS_CHAIN_STRATEGY;
    const selector = `*[${index}]`;
    const nthChild = await this.doNativeFind(strategy, selector, false, context);
    const visible = await this.getAttribute('visible', nthChild);

    if (visible === 'true') {
      _logger.default.info(`Found first visible child at position ${index}`);

      return nthChild;
    }

    index++;
  }
};

function rewriteMagicScrollable(mult) {
  const pred = ['ScrollView', 'Table', 'CollectionView', 'WebView'].map(t => `type == "XCUIElementType${t}"`).join(' OR ');
  const strategy = WDA_CLASS_CHAIN_STRATEGY;
  let selector = '**/*[`' + pred + '`]';

  if (!mult) {
    selector += '[1]';
  }

  _logger.default.info('Rewrote request for scrollable descendants to class chain ' + `format with selector '${selector}'`);

  return [strategy, selector];
}

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9maW5kLmpzIl0sIm5hbWVzIjpbIk1BR0lDX0ZJUlNUX1ZJU19DSElMRF9TRUwiLCJNQUdJQ19TQ1JPTExBQkxFX1NFTCIsIldEQV9DTEFTU19DSEFJTl9TVFJBVEVHWSIsImhlbHBlcnMiLCJjb21tYW5kcyIsImV4dGVuc2lvbnMiLCJmaW5kRWxPckVscyIsInN0cmF0ZWd5Iiwic2VsZWN0b3IiLCJtdWx0IiwiY29udGV4dCIsImlzV2VidmlldyIsImZpbmRXZWJFbGVtZW50T3JFbGVtZW50cyIsImZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cyIsImluaXRTZWxlY3RvciIsInJld3JvdGVTZWxlY3RvciIsIkNzc0NvbnZlcnRlciIsInRvSW9zQ2xhc3NDaGFpblNlbGVjdG9yIiwic3RyaXBWaWV3RnJvbVNlbGVjdG9yIiwia2VlcFZpZXciLCJpbmNsdWRlcyIsImluZGV4T2YiLCJsZW5ndGgiLCJzdWJzdHIiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwidGVzdCIsImdldEZpcnN0VmlzaWJsZUNoaWxkIiwicmV3cml0ZU1hZ2ljU2Nyb2xsYWJsZSIsInJlcGxhY2UiLCJzdHIiLCJnMSIsImcyIiwiZzMiLCJsb2ciLCJpbmZvIiwiZG9OYXRpdmVGaW5kIiwidXRpbCIsInVud3JhcEVsZW1lbnQiLCJlbmRwb2ludCIsImJvZHkiLCJ1c2luZyIsInZhbHVlIiwibWV0aG9kIiwiZWxzIiwiaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uIiwicHJveHlDb21tYW5kIiwiZXJyIiwiXyIsImlzRW1wdHkiLCJtZXNzYWdlIiwibWF0Y2giLCJlcnJvcnMiLCJOb1N1Y2hFbGVtZW50RXJyb3IiLCJFcnJvciIsImluZGV4IiwibnRoQ2hpbGQiLCJ2aXNpYmxlIiwiZ2V0QXR0cmlidXRlIiwicHJlZCIsIm1hcCIsInQiLCJqb2luIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNB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ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQ3NzQ29udmVydGVyIGZyb20gJy4uL2Nzcy1jb252ZXJ0ZXInO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnQGFwcGl1bS9iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuLy8gd2Ugb3ZlcnJpZGUgdGhlIHhwYXRoIHNlYXJjaCBmb3IgdGhpcyBmaXJzdC12aXNpYmxlLWNoaWxkIHNlbGVjdG9yLCB3aGljaFxuLy8gbG9va3MgbGlrZSAvKltAZmlyc3RWaXNpYmxlPVwidHJ1ZVwiXVxuY29uc3QgTUFHSUNfRklSU1RfVklTX0NISUxEX1NFTCA9IC9cXC9cXCpcXFtAZmlyc3RWaXNpYmxlXFxzKj1cXHMqKCd8XCIpdHJ1ZVxcMVxcXS87XG5cbi8vIHdlIGxpa2V3aXNlIG92ZXJyaWRlIHhwYXRoIHNlYXJjaCB0byBwcm92aWRlIGEgc2hvcnRjdXQgZm9yIGZpbmRpbmcgYWxsXG4vLyBzY3JvbGxhYmxlIGVsZW1lbnRzXG5jb25zdCBNQUdJQ19TQ1JPTExBQkxFX1NFTCA9IC9cXC9cXC9cXCpcXFtAc2Nyb2xsYWJsZVxccyo9XFxzKignfFwiKXRydWVcXDFcXF0vO1xuXG5jb25zdCBXREFfQ0xBU1NfQ0hBSU5fU1RSQVRFR1kgPSAnY2xhc3MgY2hhaW4nO1xuXG5sZXQgaGVscGVycyA9IHt9LCBjb21tYW5kcyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmhlbHBlcnMuZmluZEVsT3JFbHMgPSBhc3luYyBmdW5jdGlvbiBmaW5kRWxPckVscyAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KSB7XG4gIGlmICh0aGlzLmlzV2VidmlldygpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZFdlYkVsZW1lbnRPckVsZW1lbnRzKHN0cmF0ZWd5LCBzZWxlY3RvciwgbXVsdCwgY29udGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKHN0cmF0ZWd5LCBzZWxlY3RvciwgbXVsdCwgY29udGV4dCk7XG4gIH1cbn07XG5cbmhlbHBlcnMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzID0gYXN5bmMgZnVuY3Rpb24gZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzIChzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpIHtcbiAgY29uc3QgaW5pdFNlbGVjdG9yID0gc2VsZWN0b3I7XG4gIGxldCByZXdyb3RlU2VsZWN0b3IgPSBmYWxzZTtcbiAgaWYgKHN0cmF0ZWd5ID09PSAnLWlvcyBwcmVkaWNhdGUgc3RyaW5nJykge1xuICAgIC8vIFdlYkRyaXZlckFnZW50IHVzZXMgJ3ByZWRpY2F0ZSBzdHJpbmcnXG4gICAgc3RyYXRlZ3kgPSAncHJlZGljYXRlIHN0cmluZyc7XG4gIH0gZWxzZSBpZiAoc3RyYXRlZ3kgPT09ICctaW9zIGNsYXNzIGNoYWluJykge1xuICAgIC8vIFdlYkRyaXZlckFnZW50IHVzZXMgJ2NsYXNzIGNoYWluJ1xuICAgIHN0cmF0ZWd5ID0gV0RBX0NMQVNTX0NIQUlOX1NUUkFURUdZO1xuICB9IGVsc2UgaWYgKHN0cmF0ZWd5ID09PSAnY3NzIHNlbGVjdG9yJykge1xuICAgIHN0cmF0ZWd5ID0gV0RBX0NMQVNTX0NIQUlOX1NUUkFURUdZO1xuICAgIHNlbGVjdG9yID0gQ3NzQ29udmVydGVyLnRvSW9zQ2xhc3NDaGFpblNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSB3b3JkICdWaWV3JyBpcyBhcHBlbmRlZCB0byBzZWxlY3RvciBhbmQgaWYgaXQgaXMsIHN0cmlwIGl0IG91dFxuICBmdW5jdGlvbiBzdHJpcFZpZXdGcm9tU2VsZWN0b3IgKHNlbGVjdG9yKSB7XG4gICAgLy8gRG9uJ3Qgc3RyaXAgaXQgb3V0IGlmIGl0J3Mgb25lIG9mIHRoZXNlIDQgZWxlbWVudCB0eXBlc1xuICAgIC8vIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL1dlYkRyaXZlckFnZW50L2Jsb2IvbWFzdGVyL1dlYkRyaXZlckFnZW50TGliL1V0aWxpdGllcy9GQkVsZW1lbnRUeXBlVHJhbnNmb3JtZXIubSBmb3IgcmVmZXJlbmNlKVxuICAgIGNvbnN0IGtlZXBWaWV3ID0gW1xuICAgICAgJ1hDVUlFbGVtZW50VHlwZVNjcm9sbFZpZXcnLFxuICAgICAgJ1hDVUlFbGVtZW50VHlwZUNvbGxlY3Rpb25WaWV3JyxcbiAgICAgICdYQ1VJRWxlbWVudFR5cGVUZXh0VmlldycsXG4gICAgICAnWENVSUVsZW1lbnRUeXBlV2ViVmlldycsXG4gICAgXS5pbmNsdWRlcyhzZWxlY3Rvcik7XG5cbiAgICBpZiAoIWtlZXBWaWV3ICYmIHNlbGVjdG9yLmluZGV4T2YoJ1ZpZXcnKSA9PT0gc2VsZWN0b3IubGVuZ3RoIC0gNCkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yLnN1YnN0cigwLCBzZWxlY3Rvci5sZW5ndGggLSA0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdHJhdGVneSA9PT0gJ2NsYXNzIG5hbWUnKSB7XG4gICAgLy8gWENVSVRlc3QgY2xhc3NlcyBoYXZlIGBYQ1VJRWxlbWVudFR5cGVgIHByZXBlbmRlZFxuICAgIC8vIGZpcnN0IGNoZWNrIGlmIHRoZXJlIGlzIHRoZSBvbGQgYFVJQWAgcHJlZml4XG4gICAgaWYgKHNlbGVjdG9yLnN0YXJ0c1dpdGgoJ1VJQScpKSB7XG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnN1YnN0cmluZygzKTtcbiAgICB9XG4gICAgLy8gbm93IGNoZWNrIGlmIHdlIG5lZWQgdG8gYWRkIGBYQ1VJRWxlbWVudFR5cGVgXG4gICAgaWYgKCFzZWxlY3Rvci5zdGFydHNXaXRoKCdYQ1VJRWxlbWVudFR5cGUnKSkge1xuICAgICAgc2VsZWN0b3IgPSBzdHJpcFZpZXdGcm9tU2VsZWN0b3IoYFhDVUlFbGVtZW50VHlwZSR7c2VsZWN0b3J9YCk7XG4gICAgICByZXdyb3RlU2VsZWN0b3IgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdHJhdGVneSA9PT0gJ3hwYXRoJyAmJiBNQUdJQ19GSVJTVF9WSVNfQ0hJTERfU0VMLnRlc3Qoc2VsZWN0b3IpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Rmlyc3RWaXNpYmxlQ2hpbGQobXVsdCwgY29udGV4dCk7XG4gIH0gZWxzZSBpZiAoc3RyYXRlZ3kgPT09ICd4cGF0aCcgJiYgTUFHSUNfU0NST0xMQUJMRV9TRUwudGVzdChzZWxlY3RvcikpIHtcbiAgICBbc3RyYXRlZ3ksIHNlbGVjdG9yXSA9IHJld3JpdGVNYWdpY1Njcm9sbGFibGUobXVsdCk7XG4gIH0gZWxzZSBpZiAoc3RyYXRlZ3kgPT09ICd4cGF0aCcpIHtcbiAgICAvLyBSZXBsYWNlIFVJQSBpZiBpdCBjb21lcyBhZnRlciBhIGZvcndhcmQgc2xhc2ggb3IgaXMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKC8oXnxcXC8pKFVJQSkoW15bL10rKS9nLCAoc3RyLCBnMSwgZzIsIGczKSA9PiB7XG4gICAgICByZXdyb3RlU2VsZWN0b3IgPSB0cnVlO1xuICAgICAgcmV0dXJuIGcxICsgc3RyaXBWaWV3RnJvbVNlbGVjdG9yKGBYQ1VJRWxlbWVudFR5cGUke2czfWApO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJld3JvdGVTZWxlY3Rvcikge1xuICAgIGxvZy5pbmZvKGBSZXdyb3RlIGluY29taW5nIHNlbGVjdG9yIGZyb20gJyR7aW5pdFNlbGVjdG9yfScgdG8gYCArXG4gICAgICAgICAgICAgYCcke3NlbGVjdG9yfScgdG8gbWF0Y2ggWENVSSB0eXBlLiBZb3Ugc2hvdWxkIGNvbnNpZGVyIGAgK1xuICAgICAgICAgICAgIGB1cGRhdGluZyB5b3VyIHRlc3RzIHRvIHVzZSB0aGUgbmV3IHNlbGVjdG9ycyBkaXJlY3RseWApO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMuZG9OYXRpdmVGaW5kKHN0cmF0ZWd5LCBzZWxlY3RvciwgbXVsdCwgY29udGV4dCk7XG59O1xuXG5oZWxwZXJzLmRvTmF0aXZlRmluZCA9IGFzeW5jIGZ1bmN0aW9uIGRvTmF0aXZlRmluZCAoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSB1dGlsLnVud3JhcEVsZW1lbnQoY29udGV4dCk7XG5cbiAgbGV0IGVuZHBvaW50ID0gYC9lbGVtZW50JHtjb250ZXh0ID8gYC8ke2NvbnRleHR9L2VsZW1lbnRgIDogJyd9JHttdWx0ID8gJ3MnIDogJyd9YDtcblxuICBsZXQgYm9keSA9IHtcbiAgICB1c2luZzogc3RyYXRlZ3ksXG4gICAgdmFsdWU6IHNlbGVjdG9yXG4gIH07XG5cbiAgbGV0IG1ldGhvZCA9ICdQT1NUJztcblxuICAvLyBUaGlzIGlzIGVpdGhlciBhbiBhcnJheSBpcyBtdWx0ID09PSB0cnVlXG4gIC8vIG9yIGFuIG9iamVjdCBpZiBtdWx0ID09PSBmYWxzZVxuICBsZXQgZWxzO1xuICB0cnkge1xuICAgIGF3YWl0IHRoaXMuaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVscyA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGVuZHBvaW50LCBtZXRob2QsIGJvZHkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGVscyA9IFtdO1xuICAgICAgfVxuICAgICAgLy8gd2Ugc3VjY2VlZCBpZiB3ZSBnZXQgc29tZSBlbGVtZW50c1xuICAgICAgcmV0dXJuICFfLmlzRW1wdHkoZWxzKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyci5tZXNzYWdlICYmIGVyci5tZXNzYWdlLm1hdGNoKC9Db25kaXRpb24gdW5tZXQvKSkge1xuICAgICAgLy8gY29uZGl0aW9uIHdhcyBub3QgbWV0IHNldHRpbmcgcmVzIHRvIGVtcHR5IGFycmF5XG4gICAgICBlbHMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuICBpZiAobXVsdCkge1xuICAgIHJldHVybiBlbHM7XG4gIH1cbiAgaWYgKF8uaXNFbXB0eShlbHMpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob1N1Y2hFbGVtZW50RXJyb3IoKTtcbiAgfVxuICByZXR1cm4gZWxzO1xufTtcblxuaGVscGVycy5nZXRGaXJzdFZpc2libGVDaGlsZCA9IGFzeW5jIGZ1bmN0aW9uIGdldEZpcnN0VmlzaWJsZUNoaWxkIChtdWx0LCBjb250ZXh0KSB7XG4gIGxvZy5pbmZvKGBHZXR0aW5nIGZpcnN0IHZpc2libGUgY2hpbGRgKTtcbiAgaWYgKG11bHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBnZXQgbXVsdGlwbGUgZmlyc3QgdmlzaWJsZSBjaGlsZHJlbiEnKTtcbiAgfVxuICBpZiAoIWNvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBnZXQgZmlyc3QgdmlzaWJsZSBjaGlsZCB3aXRob3V0IGEgY29udGV4dCBlbGVtZW50Jyk7XG4gIH1cbiAgbGV0IGluZGV4ID0gMTtcbiAgLy8gbG9vcCB0aHJvdWdoIGNoaWxkcmVuIHZpYSBjbGFzcy1jaGFpbiBmaW5kcywgdW50aWwgd2UgcnVuIG91dCBvZiBjaGlsZHJlblxuICAvLyBvciB3ZSBmaW5kIGEgdmlzaWJsZSBvbmUuIFRoaXMgbG9vcCBsb29rcyBpbmZpbml0ZSBidXQgaXRzIG5vdCwgYmVjYXVzZSBhdFxuICAvLyBzb21lIHBvaW50IHRoZSBjYWxsIHRvIGRvTmF0aXZlRmluZCB3aWxsIHRocm93IHdpdGggYW4gRWxlbWVudCBOb3QgRm91bmRcbiAgLy8gZXJyb3IsIHdoZW4gdGhlIGluZGV4IGdldHMgaGlnaGVyIHRoYW4gdGhlIG51bWJlciBvZiBjaGlsZCBlbGVtZW50cy4gVGhpc1xuICAvLyBpcyB3aGF0IHdlIHdhbnQgYmVjYXVzZSB0aGF0IGVycm9yIHdpbGwgaGFsdCB0aGUgbG9vcCBhbmQgbWFrZSBpdCBhbGwgdGhlXG4gIC8vIHdheSB0byB0aGUgY2xpZW50LlxuICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnN0YW50LWNvbmRpdGlvblxuICAgIGNvbnN0IHN0cmF0ZWd5ID0gV0RBX0NMQVNTX0NIQUlOX1NUUkFURUdZO1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYCpbJHtpbmRleH1dYDtcbiAgICBjb25zdCBudGhDaGlsZCA9IGF3YWl0IHRoaXMuZG9OYXRpdmVGaW5kKHN0cmF0ZWd5LCBzZWxlY3RvciwgZmFsc2UsIGNvbnRleHQpO1xuICAgIGNvbnN0IHZpc2libGUgPSBhd2FpdCB0aGlzLmdldEF0dHJpYnV0ZSgndmlzaWJsZScsIG50aENoaWxkKTtcbiAgICBpZiAodmlzaWJsZSA9PT0gJ3RydWUnKSB7XG4gICAgICBsb2cuaW5mbyhgRm91bmQgZmlyc3QgdmlzaWJsZSBjaGlsZCBhdCBwb3NpdGlvbiAke2luZGV4fWApO1xuICAgICAgcmV0dXJuIG50aENoaWxkO1xuICAgIH1cbiAgICBpbmRleCsrO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZXdyaXRlTWFnaWNTY3JvbGxhYmxlIChtdWx0KSB7XG4gIGNvbnN0IHByZWQgPSBbXG4gICAgJ1Njcm9sbFZpZXcnLFxuICAgICdUYWJsZScsXG4gICAgJ0NvbGxlY3Rpb25WaWV3JyxcbiAgICAnV2ViVmlldydcbiAgXS5tYXAoKHQpID0+IGB0eXBlID09IFwiWENVSUVsZW1lbnRUeXBlJHt0fVwiYCkuam9pbignIE9SICcpO1xuICBjb25zdCBzdHJhdGVneSA9IFdEQV9DTEFTU19DSEFJTl9TVFJBVEVHWTtcbiAgbGV0IHNlbGVjdG9yID0gJyoqLypbYCcgKyBwcmVkICsgJ2BdJztcbiAgaWYgKCFtdWx0KSB7XG4gICAgc2VsZWN0b3IgKz0gJ1sxXSc7XG4gIH1cbiAgbG9nLmluZm8oJ1Jld3JvdGUgcmVxdWVzdCBmb3Igc2Nyb2xsYWJsZSBkZXNjZW5kYW50cyB0byBjbGFzcyBjaGFpbiAnICtcbiAgICAgICAgICAgYGZvcm1hdCB3aXRoIHNlbGVjdG9yICcke3NlbGVjdG9yfSdgKTtcbiAgcmV0dXJuIFtzdHJhdGVneSwgc2VsZWN0b3JdO1xufVxuXG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnN9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2ZpbmQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
