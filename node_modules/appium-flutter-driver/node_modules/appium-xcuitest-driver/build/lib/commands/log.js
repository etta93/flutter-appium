"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseDriver = require("@appium/base-driver");

var _iosCrashLog = require("../device-log/ios-crash-log");

var _iosSimulatorLog = require("../device-log/ios-simulator-log");

var _iosDeviceLog = require("../device-log/ios-device-log");

var _logger = _interopRequireDefault(require("../logger"));

var _ws = _interopRequireDefault(require("ws"));

var _safariConsoleLog = _interopRequireDefault(require("../device-log/safari-console-log"));

var _safariNetworkLog = _interopRequireDefault(require("../device-log/safari-network-log"));

const extensions = {};

const WEBSOCKET_ENDPOINT = sessionId => `${_baseDriver.DEFAULT_WS_PATHNAME_PREFIX}/session/${sessionId}/appium/device/syslog`;

const GET_SERVER_LOGS_FEATURE = 'get_server_logs';

extensions.extractLogs = async function extractLogs(logType, logsContainer = {}) {
  if (_lodash.default.isEmpty(logsContainer)) {
    throw new Error('No logs currently available. Is the device/simulator started?');
  }

  const logObject = logsContainer[logType];
  const logs = logObject ? await logObject.getLogs() : null;

  if (logs) {
    return logs;
  }

  throw new Error(`No logs of type '${logType}' found.`);
};

extensions.supportedLogTypes = {
  syslog: {
    description: 'System Logs - Device logs for iOS applications on real devices and simulators',
    getter: async self => await self.extractLogs('syslog', self.logs)
  },
  crashlog: {
    description: 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
    getter: async self => await self.extractLogs('crashlog', self.logs)
  },
  performance: {
    description: 'Performance Logs - Debug Timelines on real devices and simulators',
    getter: async self => await self.extractLogs('performance', self.logs)
  },
  safariConsole: {
    description: 'Safari Console Logs - data written to the JS console in Safari',
    getter: async self => await self.extractLogs('safariConsole', self.logs)
  },
  safariNetwork: {
    description: 'Safari Network Logs - information about network operations undertaken by Safari',
    getter: async self => await self.extractLogs('safariNetwork', self.logs)
  },
  server: {
    description: 'Appium server logs',
    getter: self => {
      self.ensureFeatureEnabled(GET_SERVER_LOGS_FEATURE);
      return _logger.default.unwrap().record.map(function (x) {
        return {
          timestamp: Date.now(),
          level: 'ALL',
          message: _lodash.default.isEmpty(x.prefix) ? x.message : `[${x.prefix}] ${x.message}`
        };
      });
    }
  }
};

extensions.startLogCapture = async function startLogCapture() {
  this.logs = this.logs || {};

  if (!_lodash.default.isUndefined(this.logs.syslog) && this.logs.syslog.isCapturing) {
    _logger.default.warn('Trying to start iOS log capture but it has already started!');

    return true;
  }

  if (_lodash.default.isUndefined(this.logs.syslog)) {
    this.logs.crashlog = new _iosCrashLog.IOSCrashLog({
      sim: this.opts.device,
      udid: this.isRealDevice() ? this.opts.udid : undefined
    });

    if (this.isRealDevice()) {
      this.logs.syslog = new _iosDeviceLog.IOSDeviceLog({
        udid: this.opts.udid,
        showLogs: this.opts.showIOSLog
      });
    } else {
      this.logs.syslog = new _iosSimulatorLog.IOSSimulatorLog({
        sim: this.opts.device,
        showLogs: this.opts.showIOSLog,
        xcodeVersion: this.xcodeVersion,
        iosSimulatorLogsPredicate: this.opts.iosSimulatorLogsPredicate
      });
    }

    this.logs.safariConsole = new _safariConsoleLog.default(!!this.opts.showSafariConsoleLog);
    this.logs.safariNetwork = new _safariNetworkLog.default(!!this.opts.showSafariNetworkLog);
  }

  try {
    await this.logs.syslog.startCapture();
  } catch (err) {
    _logger.default.warn(`Continuing without capturing device logs: ${err.message}`);

    return false;
  }

  await this.logs.crashlog.startCapture();
  await this.logs.safariConsole.startCapture();
  await this.logs.safariNetwork.startCapture();
  return true;
};

extensions.mobileStartLogsBroadcast = async function mobileStartLogsBroadcast() {
  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);

  if (!_lodash.default.isEmpty(await this.server.getWebSocketHandlers(pathname))) {
    _logger.default.debug(`The system logs broadcasting web socket server is already listening at ${pathname}`);

    return;
  }

  _logger.default.info(`Assigning system logs broadcasting web socket server to ${pathname}`);

  const wss = new _ws.default.Server({
    noServer: true
  });
  wss.on('connection', (ws, req) => {
    if (req) {
      var _req$connection;

      const remoteIp = _lodash.default.isEmpty(req.headers['x-forwarded-for']) ? (_req$connection = req.connection) === null || _req$connection === void 0 ? void 0 : _req$connection.remoteAddress : req.headers['x-forwarded-for'];

      _logger.default.debug(`Established a new system logs listener web socket connection from ${remoteIp}`);
    } else {
      _logger.default.debug('Established a new system logs listener web socket connection');
    }

    if (_lodash.default.isEmpty(this._syslogWebsocketListener)) {
      this._syslogWebsocketListener = logRecord => {
        if ((ws === null || ws === void 0 ? void 0 : ws.readyState) === _ws.default.OPEN) {
          ws.send(logRecord.message);
        }
      };
    }

    this.logs.syslog.on('output', this._syslogWebsocketListener);
    ws.on('close', (code, reason) => {
      if (!_lodash.default.isEmpty(this._syslogWebsocketListener)) {
        this.logs.syslog.removeListener('output', this._syslogWebsocketListener);
        this._syslogWebsocketListener = null;
      }

      let closeMsg = 'System logs listener web socket is closed.';

      if (!_lodash.default.isEmpty(code)) {
        closeMsg += ` Code: ${code}.`;
      }

      if (!_lodash.default.isEmpty(reason)) {
        closeMsg += ` Reason: ${reason.toString()}.`;
      }

      _logger.default.debug(closeMsg);
    });
  });
  await this.server.addWebSocketHandler(pathname, wss);
};

extensions.mobileStopLogsBroadcast = async function mobileStopLogsBroadcast() {
  const pathname = WEBSOCKET_ENDPOINT(this.sessionId);

  if (_lodash.default.isEmpty(await this.server.getWebSocketHandlers(pathname))) {
    return;
  }

  _logger.default.debug('Stopping the system logs broadcasting web socket server');

  await this.server.removeWebSocketHandler(pathname);
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
