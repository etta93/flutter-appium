"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _support = require("@appium/support");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger"));

var _utils = require("../utils");

var _asyncbox = require("asyncbox");

var _bluebird = _interopRequireDefault(require("bluebird"));

const commands = {};
exports.commands = commands;
const PERF_RECORD_FEAT_NAME = 'perf_record';
const PERF_RECORD_SECURITY_MESSAGE = 'Performance measurement requires relaxing security for simulator. ' + `Please set '--relaxed-security' or '--allow-insecure' with '${PERF_RECORD_FEAT_NAME}' ` + 'referencing https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/security.md for more details.';
const DEFAULT_TIMEOUT_MS = 5 * 60 * 1000;
const STOP_TIMEOUT_MS = 3 * 60 * 1000;
const STARTUP_TIMEOUT_MS = 60 * 1000;
const DEFAULT_PROFILE_NAME = 'Activity Monitor';
const DEFAULT_EXT = '.trace';
const DEFAULT_PID = 'current';
const INSTRUMENTS = 'instruments';
const XCRUN = 'xcrun';
const XCTRACE = 'xctrace';

async function requireXctrace() {
  let xcrunPath;

  try {
    xcrunPath = await _support.fs.which(XCRUN);
  } catch (e) {
    _logger.default.errorAndThrow(`${XCRUN} has not been found in PATH. ` + `Please make sure XCode development tools are installed`);
  }

  try {
    await (0, _teen_process.exec)(xcrunPath, [XCTRACE, 'help']);
  } catch (e) {
    _logger.default.errorAndThrow(`${XCTRACE} is not available for the active Xcode version. ` + `Please make sure XCode is up to date. Original error: ${e.stderr || e.message}`);
  }

  return xcrunPath;
}

async function requireInstruments() {
  try {
    return await _support.fs.which(INSTRUMENTS);
  } catch (e) {
    _logger.default.errorAndThrow(`${INSTRUMENTS} has not been found in PATH. ` + `Please make sure XCode development tools are installed`);
  }
}

class PerfRecorder {
  constructor(reportRoot, udid, opts = {}) {
    this._process = null;
    this._zippedReportPath = '';
    this._timeout = opts.timeout && opts.timeout > 0 ? opts.timeout : DEFAULT_TIMEOUT_MS;
    this._profileName = opts.profileName || DEFAULT_PROFILE_NAME;
    this._reportPath = _path.default.resolve(reportRoot, `appium_perf__${this._profileName.replace(/\W/g, '_')}__${Date.now()}${DEFAULT_EXT}`);
    this._pid = opts.pid;
    this._udid = udid;
    this._logger = _support.logger.getLogger(`${_lodash.default.truncate(this._profileName, {
      length: 10
    })}@${this._udid.substring(0, 8)}`);
    this._archivePromise = null;
  }

  get profileName() {
    return this._profileName;
  }

  async getOriginalReportPath() {
    return (await _support.fs.exists(this._reportPath)) ? this._reportPath : '';
  }

  async getZippedReportPath() {
    if (!this._archivePromise) {
      this._archivePromise = (async () => {
        const originalReportPath = await this.getOriginalReportPath();

        if (!originalReportPath) {
          return '';
        }

        const zippedReportPath = await _support.tempDir.path({
          prefix: _path.default.parse(originalReportPath).name,
          suffix: '.zip'
        });
        await _support.zip.toArchive(zippedReportPath, {
          cwd: _path.default.dirname(this._reportPath)
        });
        await _support.fs.rimraf(_path.default.dirname(this._reportPath));
        this._zippedReportPath = zippedReportPath;
        return this._zippedReportPath;
      })();
    }

    return await this._archivePromise;
  }

  isRunning() {
    var _this$_process;

    return !!((_this$_process = this._process) !== null && _this$_process !== void 0 && _this$_process.isRunning);
  }

  async _enforceTermination() {
    if (this._process && this.isRunning()) {
      this._logger.debug('Force-stopping the currently running perf recording');

      try {
        await this._process.stop('SIGKILL');
      } catch (ign) {}
    }

    this._process = null;

    const performCleanup = async () => {
      try {
        await _bluebird.default.all([this._zippedReportPath, _path.default.dirname(this._reportPath)].filter(Boolean).map(x => _support.fs.rimraf(x)));
      } catch (e) {
        this._logger.warn(e.message);
      }
    };

    if (this._archivePromise) {
      this._archivePromise.finally(async () => {
        await performCleanup();
        this._archivePromise = null;
      }).catch(() => {});
    }

    await performCleanup();
    return '';
  }

  async start() {
    let binaryPath;

    try {
      binaryPath = await requireXctrace();
    } catch (e) {
      _logger.default.debug(e.message);

      _logger.default.info(`Defaulting to ${INSTRUMENTS} usage`);

      binaryPath = await requireInstruments();
    }

    const args = [];
    const toolName = _path.default.basename(binaryPath) === XCRUN ? XCTRACE : INSTRUMENTS;

    if (toolName === XCTRACE) {
      args.push(XCTRACE, 'record', '--device', this._udid, '--template', this._profileName, '--output', this._reportPath, '--time-limit', `${this._timeout}ms`);

      if (this._pid) {
        args.push('--attach', `${this._pid}`);
      } else {
        args.push('--all-processes');
      }
    } else {
      args.push('-w', this._udid, '-t', this._profileName, '-D', this._reportPath, '-l', `${this._timeout}`);

      if (this._pid) {
        args.push('-p', `${this._pid}`);
      }
    }

    const fullCmd = [binaryPath, ...args];
    this._process = new _teen_process.SubProcess(fullCmd[0], fullCmd.slice(1));
    this._archivePromise = null;

    this._logger.debug(`Starting performance recording: ${_support.util.quote(fullCmd)}`);

    this._process.on('output', (stdout, stderr) => {
      if (_lodash.default.trim(stdout || stderr)) {
        this._logger.debug(`[${toolName}] ${stdout || stderr}`);
      }
    });

    this._process.once('exit', async (code, signal) => {
      this._process = null;

      if (code === 0) {
        this._logger.debug('Performance recording exited without errors');

        try {
          await this.getZippedReportPath();
        } catch (e) {
          this._logger.warn(e);
        }
      } else {
        await this._enforceTermination();

        this._logger.warn(`Performance recording exited with error code ${code}, signal ${signal}`);
      }
    });

    await this._process.start(0);

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (await this.getOriginalReportPath()) {
          return true;
        }

        if (!this._process) {
          throw new Error(`${toolName} process died unexpectedly`);
        }

        return false;
      }, {
        waitMs: STARTUP_TIMEOUT_MS,
        intervalMs: 500
      });
    } catch (e) {
      await this._enforceTermination();
      const listProfilesCommand = toolName === XCTRACE ? `${XCRUN} ${XCTRACE} list templates` : `${INSTRUMENTS} -s`;

      this._logger.errorAndThrow(`There is no ${DEFAULT_EXT} file found for performance profile ` + `'${this._profileName}'. Make sure the profile is supported on this device. ` + `You could use '${listProfilesCommand}' command to see the list of all available profiles. ` + `Check the server log for more details`);
    }

    this._logger.info(`The performance recording has started. Will timeout in ${this._timeout}ms`);
  }

  async stop(force = false) {
    if (force) {
      return await this._enforceTermination();
    }

    if (!this.isRunning()) {
      this._logger.debug('Performance recording is not running. Returning the recent result');

      return await this.getZippedReportPath();
    }

    try {
      await this._process.stop('SIGINT', STOP_TIMEOUT_MS);
    } catch (e) {
      this._logger.errorAndThrow(`Performance recording has failed to exit after ${STOP_TIMEOUT_MS}ms`);
    }

    return await this.getZippedReportPath();
  }

}

commands.mobileStartPerfRecord = async function mobileStartPerfRecord(opts = {}) {
  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {
    _logger.default.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);
  }

  const {
    timeout = DEFAULT_TIMEOUT_MS,
    profileName = DEFAULT_PROFILE_NAME,
    pid
  } = opts;

  if (!_lodash.default.isEmpty(this._perfRecorders)) {
    for (const recorder of this._perfRecorders.filter(x => x.profileName === profileName)) {
      if (recorder.isRunning()) {
        _logger.default.debug(`Performance recorder for '${profileName}' on device '${this.opts.device.udid}' ` + ` is already running. Doing nothing`);

        return;
      }

      _lodash.default.pull(this._perfRecorders, recorder);

      await recorder.stop(true);
    }
  }

  let realPid;

  if (pid) {
    if (_lodash.default.toLower(pid) === DEFAULT_PID) {
      const appInfo = await this.proxyCommand('/wda/activeAppInfo', 'GET');
      realPid = appInfo.pid;
    } else {
      realPid = pid;
    }
  }

  const recorder = new PerfRecorder(await _support.tempDir.openDir(), this.opts.device.udid, {
    timeout: parseInt(timeout, 10),
    profileName,
    pid: parseInt(realPid, 10)
  });
  await recorder.start();
  this._perfRecorders = [...(this._perfRecorders || []), recorder];
};

commands.mobileStopPerfRecord = async function mobileStopPerfRecord(opts = {}) {
  if (!this.isFeatureEnabled(PERF_RECORD_FEAT_NAME) && !this.isRealDevice()) {
    _logger.default.errorAndThrow(PERF_RECORD_SECURITY_MESSAGE);
  }

  if (_lodash.default.isEmpty(this._perfRecorders)) {
    _logger.default.info('No performance recorders have been started. Doing nothing');

    return '';
  }

  const {
    profileName = DEFAULT_PROFILE_NAME,
    remotePath
  } = opts;

  const recorders = this._perfRecorders.filter(x => x.profileName === profileName);

  if (_lodash.default.isEmpty(recorders)) {
    _logger.default.errorAndThrow(`There are no records for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. Have you started the profiling before?`);
  }

  const recorder = _lodash.default.first(recorders);

  const resultPath = await recorder.stop();

  if (!(await _support.fs.exists(resultPath))) {
    _logger.default.errorAndThrow(`There is no ${DEFAULT_EXT} file found for performance profile '${profileName}' ` + `and device ${this.opts.device.udid}. Make sure the selected profile is supported on this device`);
  }

  const result = await (0, _utils.encodeBase64OrUpload)(resultPath, remotePath, opts);

  _lodash.default.pull(this._perfRecorders, recorder);

  await _support.fs.rimraf(resultPath);
  return result;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
