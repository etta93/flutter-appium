"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _baseDriver = require("@appium/base-driver");

var _lodash = _interopRequireDefault(require("lodash"));

const extensions = {};

extensions.mobilePushNotification = async function mobilePushNotification(opts = {}) {
  if (!this.isSimulator()) {
    throw new Error('This extension only works on Simulator');
  }

  const {
    payload,
    bundleId
  } = opts;

  if (!bundleId) {
    throw new _baseDriver.errors.InvalidArgumentError(`'bundleId' argument must be a valid bundle identifier string`);
  }

  if (!_lodash.default.isPlainObject(payload)) {
    throw new _baseDriver.errors.InvalidArgumentError(`The 'payload' argument value must be a valid dictionary. ` + `Got ${JSON.stringify(payload)} instead`);
  }

  if (!_lodash.default.isPlainObject(payload.aps)) {
    throw new _baseDriver.errors.InvalidArgumentError(`The 'payload.aps' value must be a valid dictionary. ` + `Got ${JSON.stringify(payload.aps)} instead`);
  }

  return await this.opts.device.pushNotification({ ...payload,
    'Simulator Target Bundle': bundleId
  });
};

extensions.mobileExpectNotification = async function mobileExpectNotification(opts = {}) {
  const {
    name,
    type,
    timeoutSeconds
  } = opts;
  return await this.proxyCommand('/wda/expectNotification', 'POST', {
    name,
    type,
    timeout: timeoutSeconds
  });
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9ub3RpZmljYXRpb25zLmpzIl0sIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJtb2JpbGVQdXNoTm90aWZpY2F0aW9uIiwib3B0cyIsImlzU2ltdWxhdG9yIiwiRXJyb3IiLCJwYXlsb2FkIiwiYnVuZGxlSWQiLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIl8iLCJpc1BsYWluT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsImFwcyIsImRldmljZSIsInB1c2hOb3RpZmljYXRpb24iLCJtb2JpbGVFeHBlY3ROb3RpZmljYXRpb24iLCJuYW1lIiwidHlwZSIsInRpbWVvdXRTZWNvbmRzIiwicHJveHlDb21tYW5kIiwidGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxNQUFNQSxVQUFVLEdBQUcsRUFBbkI7O0FBc0JBQSxVQUFVLENBQUNDLHNCQUFYLEdBQW9DLGVBQWVBLHNCQUFmLENBQXVDQyxJQUFJLEdBQUcsRUFBOUMsRUFBa0Q7QUFDcEYsTUFBSSxDQUFDLEtBQUtDLFdBQUwsRUFBTCxFQUF5QjtBQUN2QixVQUFNLElBQUlDLEtBQUosQ0FBVSx3Q0FBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBTTtBQUFFQyxJQUFBQSxPQUFGO0FBQVdDLElBQUFBO0FBQVgsTUFBd0JKLElBQTlCOztBQUNBLE1BQUksQ0FBQ0ksUUFBTCxFQUFlO0FBQ2IsVUFBTSxJQUFJQyxtQkFBT0Msb0JBQVgsQ0FBaUMsOERBQWpDLENBQU47QUFDRDs7QUFDRCxNQUFJLENBQUNDLGdCQUFFQyxhQUFGLENBQWdCTCxPQUFoQixDQUFMLEVBQStCO0FBQzdCLFVBQU0sSUFBSUUsbUJBQU9DLG9CQUFYLENBQWlDLDJEQUFELEdBQ25DLE9BQU1HLElBQUksQ0FBQ0MsU0FBTCxDQUFlUCxPQUFmLENBQXdCLFVBRDNCLENBQU47QUFFRDs7QUFDRCxNQUFJLENBQUNJLGdCQUFFQyxhQUFGLENBQWdCTCxPQUFPLENBQUNRLEdBQXhCLENBQUwsRUFBbUM7QUFDakMsVUFBTSxJQUFJTixtQkFBT0Msb0JBQVgsQ0FBaUMsc0RBQUQsR0FDbkMsT0FBTUcsSUFBSSxDQUFDQyxTQUFMLENBQWVQLE9BQU8sQ0FBQ1EsR0FBdkIsQ0FBNEIsVUFEL0IsQ0FBTjtBQUVEOztBQUNELFNBQU8sTUFBTSxLQUFLWCxJQUFMLENBQVVZLE1BQVYsQ0FBaUJDLGdCQUFqQixDQUFrQyxFQUM3QyxHQUFHVixPQUQwQztBQUU3QywrQkFBMkJDO0FBRmtCLEdBQWxDLENBQWI7QUFJRCxDQXJCRDs7QUEyQ0FOLFVBQVUsQ0FBQ2dCLHdCQUFYLEdBQXNDLGVBQWVBLHdCQUFmLENBQXlDZCxJQUFJLEdBQUcsRUFBaEQsRUFBb0Q7QUFDeEYsUUFBTTtBQUFFZSxJQUFBQSxJQUFGO0FBQVFDLElBQUFBLElBQVI7QUFBY0MsSUFBQUE7QUFBZCxNQUFpQ2pCLElBQXZDO0FBQ0EsU0FBTyxNQUFNLEtBQUtrQixZQUFMLENBQWtCLHlCQUFsQixFQUE2QyxNQUE3QyxFQUFxRDtBQUNoRUgsSUFBQUEsSUFEZ0U7QUFFaEVDLElBQUFBLElBRmdFO0FBR2hFRyxJQUFBQSxPQUFPLEVBQUVGO0FBSHVELEdBQXJELENBQWI7QUFLRCxDQVBEOztlQVNlbkIsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycyB9IGZyb20gJ0BhcHBpdW0vYmFzZS1kcml2ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFB1c2hOb3RpZmljYXRpb25cbiAqXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd9IGJ1bmRsZUlkIC0gVGhlIGJ1bmRsZSBpZGVudGlmaWVyIG9mIHRoZSB0YXJnZXQgYXBwbGljYXRpb25cbiAqIEBwcm9wZXJ0eSB7IW9iamVjdH0gcGF5bG9hZCAtIFJlbW90ZSBub3RpZmljYXRpb24gcGF5bG9hZC4gUmVhZCB0aGUgYENyZWF0ZSB0aGUgSlNPTiBQYXlsb2FkYCB0b3BpYyBvZlxuICogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vdXNlcm5vdGlmaWNhdGlvbnMvc2V0dGluZ191cF9hX3JlbW90ZV9ub3RpZmljYXRpb25fc2VydmVyL2dlbmVyYXRpbmdfYV9yZW1vdGVfbm90aWZpY2F0aW9uXG4gKiBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyB0byBjcmVhdGUgdGhpcyBwYXlsb2FkLlxuICovXG5cbi8qKlxuICogU2ltdWxhdGVzIHB1c2ggbm90aWZpY2F0aW9uIGRlbGl2ZXJ5IHRvIFNpbXVsYXRvci5cbiAqIE9ubHkgYXBwbGljYXRpb24gcmVtb3RlIHB1c2ggbm90aWZpY2F0aW9ucyBhcmUgc3VwcG9ydGVkLiBWb0lQLCBDb21wbGljYXRpb24sIEZpbGUgUHJvdmlkZXIsXG4gKiBhbmQgb3RoZXIgdHlwZXMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAqXG4gKiBAc2luY2UgWGNvZGUgU0RLIDExLjRcbiAqIEBwYXJhbSB7UHVzaE5vdGlmaWNhdGlvbn0gb3B0cyAtIFRoZSBvYmplY3QgdGhhdCBkZXNjcmliZXMgQXBwbGUgcHVzaCBub3RpZmljYXRpb24gY29udGVudC5cbiAqIEl0IG11c3QgY29udGFpbiBhIHRvcC1sZXZlbCBgYnVuZGxlSWRgIGtleSB3aXRoIGEgc3RyaW5nIHZhbHVlIG1hdGNoaW5nXG4gKiB0aGUgdGFyZ2V0IGFwcGxpY2F0aW9u4oCYcyBidW5kbGUgaWRlbnRpZmllciBhbmQgXCJwYXlsb2FkLmFwc1wiIGtleSB3aXRoIHZhbGlkIEFwcGxlIFB1c2ggTm90aWZpY2F0aW9uIHZhbHVlcy5cbiAqIENoZWNrIHRoZSBvdXRwdXQgb2YgYHhjcnVuIHNpbWN0bCBoZWxwIHB1c2hgIGNvbW1hbmQgZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXh0ZW5zaW9ucy5tb2JpbGVQdXNoTm90aWZpY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlUHVzaE5vdGlmaWNhdGlvbiAob3B0cyA9IHt9KSB7XG4gIGlmICghdGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGV4dGVuc2lvbiBvbmx5IHdvcmtzIG9uIFNpbXVsYXRvcicpO1xuICB9XG5cbiAgY29uc3QgeyBwYXlsb2FkLCBidW5kbGVJZCB9ID0gb3B0cztcbiAgaWYgKCFidW5kbGVJZCkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYCdidW5kbGVJZCcgYXJndW1lbnQgbXVzdCBiZSBhIHZhbGlkIGJ1bmRsZSBpZGVudGlmaWVyIHN0cmluZ2ApO1xuICB9XG4gIGlmICghXy5pc1BsYWluT2JqZWN0KHBheWxvYWQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgVGhlICdwYXlsb2FkJyBhcmd1bWVudCB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgZGljdGlvbmFyeS4gYCArXG4gICAgICBgR290ICR7SlNPTi5zdHJpbmdpZnkocGF5bG9hZCl9IGluc3RlYWRgKTtcbiAgfVxuICBpZiAoIV8uaXNQbGFpbk9iamVjdChwYXlsb2FkLmFwcykpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBUaGUgJ3BheWxvYWQuYXBzJyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgZGljdGlvbmFyeS4gYCArXG4gICAgICBgR290ICR7SlNPTi5zdHJpbmdpZnkocGF5bG9hZC5hcHMpfSBpbnN0ZWFkYCk7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IHRoaXMub3B0cy5kZXZpY2UucHVzaE5vdGlmaWNhdGlvbih7XG4gICAgLi4ucGF5bG9hZCxcbiAgICAnU2ltdWxhdG9yIFRhcmdldCBCdW5kbGUnOiBidW5kbGVJZCxcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTm90aWZpY2F0aW9uRXhwZWN0YXRpb25PcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHshc3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIG5vdGlmaWNhdGlvbiB0byBleHBlY3RcbiAqIEBwcm9wZXJ0eSB7P3N0cmluZ30gdHlwZSBbcGxhaW5dIC0gV2hpY2ggbm90aWZpY2F0aW9uIHR5cGUgdG8gZXhwZWN0LlxuICogRWl0aGVyICdwbGFpbicgdG8gd2FpdCBmb3IgYSBub3RpZmljYXRpb24gZnJvbSB0aGUgZGVmYXVsdCBub3RpZmljYXRpb24gY2VudGVyIG9yICdkYXJ3aW4nXG4gKiB0byB3YWl0IGZvciBhIHN5c3RlbSBub3RpZmljYXRpb24uXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGltZW91dFNlY29uZHMgWzYwXSAtIEZvciBob3cgbG9uZyB0byB3YWl0IHVudGlsIHRoZSBub3RpZmljYXRpb24gaXMgZGVsaXZlcmVkXG4gKiBpbiBmbG9hdCBzZWNvbmRzLlxuICovXG5cbi8qKlxuICogQmxvY2tzIHVudGlsIHRoZSBleHBlY3RlZCBub3RpZmljYXRpb24gaXMgZGVsaXZlcmVkLlxuICogVGhpcyBtZXRob2QgaXMgYSB0aGluIHdyYXBwZXIgb3ZlciBYQ1ROU05vdGlmaWNhdGlvbkV4cGVjdGF0aW9uIGFuZFxuICogWENURGFyd2luTm90aWZpY2F0aW9uRXhwZWN0YXRpb24gZW50aXRpZXMuXG4gKlxuICogQHBhcmFtIHtOb3RpZmljYXRpb25FeHBlY3RhdGlvbk9wdGlvbnN9IG9wdHNcbiAqIEB0aHJvd3MgVGltZW91dEVycm9yIGlmIHRoZSBleHBlY3RlZCBub3RpZmljYXRpb24gaGFzIG5vdCBiZWVuIGRlbGl2ZXJlZCB3aXRoaW4gdGhlIGdpdmVuIHRpbWVvdXRcbiAqL1xuZXh0ZW5zaW9ucy5tb2JpbGVFeHBlY3ROb3RpZmljYXRpb24gPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVFeHBlY3ROb3RpZmljYXRpb24gKG9wdHMgPSB7fSkge1xuICBjb25zdCB7IG5hbWUsIHR5cGUsIHRpbWVvdXRTZWNvbmRzIH0gPSBvcHRzO1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvZXhwZWN0Tm90aWZpY2F0aW9uJywgJ1BPU1QnLCB7XG4gICAgbmFtZSxcbiAgICB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXRTZWNvbmRzLFxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy9ub3RpZmljYXRpb25zLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
